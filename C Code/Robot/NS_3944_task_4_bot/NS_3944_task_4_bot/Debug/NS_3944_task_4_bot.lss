
NS_3944_task_4_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800200  00004adc  00004b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ed  0080026a  0080026a  00004bda  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004bda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056d6  00000000  00000000  00004f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001008  00000000  00000000  0000a65e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000043a8  00000000  00000000  0000b666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000998  00000000  00000000  0000fa10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c66  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e0c  00000000  00000000  0001100e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00013e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c0       	rjmp	.+262    	; 0x108 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c0       	rjmp	.+430    	; 0x1b4 <__vector_1>
       6:	00 00       	nop
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c0       	rjmp	.+284    	; 0x14a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c0       	rjmp	.+212    	; 0x14a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c0       	rjmp	.+208    	; 0x14a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c0       	rjmp	.+204    	; 0x14a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c0       	rjmp	.+200    	; 0x14a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c0       	rjmp	.+196    	; 0x14a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c0       	rjmp	.+192    	; 0x14a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c0       	rjmp	.+188    	; 0x14a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c0       	rjmp	.+184    	; 0x14a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c0       	rjmp	.+180    	; 0x14a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c0       	rjmp	.+176    	; 0x14a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	56 c0       	rjmp	.+172    	; 0x14a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	54 c0       	rjmp	.+168    	; 0x14a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	52 c0       	rjmp	.+164    	; 0x14a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	50 c0       	rjmp	.+160    	; 0x14a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4e c0       	rjmp	.+156    	; 0x14a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c0       	rjmp	.+152    	; 0x14a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c0       	rjmp	.+148    	; 0x14a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c0       	rjmp	.+144    	; 0x14a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c0       	rjmp	.+140    	; 0x14a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c0       	rjmp	.+136    	; 0x14a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c0       	rjmp	.+132    	; 0x14a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c0       	rjmp	.+128    	; 0x14a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3e c0       	rjmp	.+124    	; 0x14a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3c c0       	rjmp	.+120    	; 0x14a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3a c0       	rjmp	.+116    	; 0x14a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	38 c0       	rjmp	.+112    	; 0x14a <__bad_interrupt>
      da:	00 00       	nop
      dc:	36 c0       	rjmp	.+108    	; 0x14a <__bad_interrupt>
      de:	00 00       	nop
      e0:	34 c0       	rjmp	.+104    	; 0x14a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7c 16       	cp	r7, r28
      e6:	b5 16       	cp	r11, r21
      e8:	f9 16       	cp	r15, r25
      ea:	3d 17       	cp	r19, r29
      ec:	59 17       	cp	r21, r25
      ee:	7a 17       	cp	r23, r26
      f0:	9b 17       	cp	r25, r27
      f2:	a9 17       	cp	r26, r25
      f4:	c2 17       	cp	r28, r18
      f6:	00 18       	sub	r0, r0
      f8:	64 18       	sub	r6, r4
      fa:	bb 18       	sub	r11, r11
      fc:	f4 18       	sub	r15, r4
      fe:	2d 19       	sub	r18, r13
     100:	7b 19       	sub	r23, r11
     102:	d2 19       	sub	r29, r2
     104:	76 1a       	sub	r7, r22
     106:	ba 1a       	sub	r11, r26

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d1 e2       	ldi	r29, 0x21	; 33
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	0c bf       	out	0x3c, r16	; 60

00000118 <__do_copy_data>:
     118:	12 e0       	ldi	r17, 0x02	; 2
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b2 e0       	ldi	r27, 0x02	; 2
     11e:	ec ed       	ldi	r30, 0xDC	; 220
     120:	fa e4       	ldi	r31, 0x4A	; 74
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	0b bf       	out	0x3b, r16	; 59
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x14>
     128:	07 90       	elpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	aa 36       	cpi	r26, 0x6A	; 106
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x10>

00000132 <__do_clear_bss>:
     132:	23 e0       	ldi	r18, 0x03	; 3
     134:	aa e6       	ldi	r26, 0x6A	; 106
     136:	b2 e0       	ldi	r27, 0x02	; 2
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a7 35       	cpi	r26, 0x57	; 87
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <main>
     146:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <_exit>

0000014a <__bad_interrupt>:
     14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <delay>:
	forward();
	delay(400);
	
	right_turn();
	pick();
}
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	8b 01       	movw	r16, r22
     152:	9c 01       	movw	r18, r24
     154:	99 23       	and	r25, r25
     156:	84 f4       	brge	.+32     	; 0x178 <delay+0x2c>
     158:	15 c0       	rjmp	.+42     	; 0x184 <delay+0x38>
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	81 3d       	cpi	r24, 0xD1	; 209
     15e:	e7 e0       	ldi	r30, 0x07	; 7
     160:	9e 07       	cpc	r25, r30
     162:	d9 f7       	brne	.-10     	; 0x15a <delay+0xe>
     164:	4f 5f       	subi	r20, 0xFF	; 255
     166:	5f 4f       	sbci	r21, 0xFF	; 255
     168:	6f 4f       	sbci	r22, 0xFF	; 255
     16a:	7f 4f       	sbci	r23, 0xFF	; 255
     16c:	04 17       	cp	r16, r20
     16e:	15 07       	cpc	r17, r21
     170:	26 07       	cpc	r18, r22
     172:	37 07       	cpc	r19, r23
     174:	24 f4       	brge	.+8      	; 0x17e <delay+0x32>
     176:	06 c0       	rjmp	.+12     	; 0x184 <delay+0x38>
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	ba 01       	movw	r22, r20
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	eb cf       	rjmp	.-42     	; 0x15a <delay+0xe>
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	08 95       	ret

0000018a <rgb_port_config>:
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
     190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     194:	08 95       	ret

00000196 <color_sensor_pin_config>:
     196:	8e ef       	ldi	r24, 0xFE	; 254
     198:	8a b9       	out	0x0a, r24	; 10
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	8b b9       	out	0x0b, r24	; 11
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	84 b9       	out	0x04, r24	; 4
     1a2:	08 95       	ret

000001a4 <color_sensor_pin_interrupt_init>:
     1a4:	f8 94       	cli
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	8d bb       	out	0x1d, r24	; 29
     1b0:	78 94       	sei
     1b2:	08 95       	ret

000001b4 <__vector_1>:
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	8f 93       	push	r24
     1c0:	9f 93       	push	r25
     1c2:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <pulse>
     1c6:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <pulse+0x1>
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <pulse+0x1>
     1d0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <pulse>
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <servo1_pin_config>:
     1e2:	6c 9a       	sbi	0x0d, 4	; 13
     1e4:	74 9a       	sbi	0x0e, 4	; 14
     1e6:	08 95       	ret

000001e8 <servo2_pin_config>:
     1e8:	6d 9a       	sbi	0x0d, 5	; 13
     1ea:	75 9a       	sbi	0x0e, 5	; 14
     1ec:	08 95       	ret

000001ee <timer3_init>:
     1ee:	e1 e9       	ldi	r30, 0x91	; 145
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	10 82       	st	Z, r1
     1f4:	8c ef       	ldi	r24, 0xFC	; 252
     1f6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     200:	93 e0       	ldi	r25, 0x03	; 3
     202:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     20c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     210:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
     214:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     218:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
     21c:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     220:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     224:	8b ea       	ldi	r24, 0xAB	; 171
     226:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     22a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x700092>
     22e:	8c e0       	ldi	r24, 0x0C	; 12
     230:	80 83       	st	Z, r24
     232:	08 95       	ret

00000234 <servo_1_free>:
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
     240:	08 95       	ret

00000242 <servo_2_free>:
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
     24e:	08 95       	ret

00000250 <lcd_port_config>:
     250:	87 b1       	in	r24, 0x07	; 7
     252:	87 6f       	ori	r24, 0xF7	; 247
     254:	87 b9       	out	0x07, r24	; 7
     256:	88 b1       	in	r24, 0x08	; 8
     258:	80 78       	andi	r24, 0x80	; 128
     25a:	88 b9       	out	0x08, r24	; 8
     25c:	08 95       	ret

0000025e <Busy_wait>:
     25e:	42 98       	cbi	0x08, 2	; 8
     260:	40 98       	cbi	0x08, 0	; 8
     262:	41 9a       	sbi	0x08, 1	; 8
     264:	88 b1       	in	r24, 0x08	; 8
     266:	8f 70       	andi	r24, 0x0F	; 15
     268:	88 b9       	out	0x08, r24	; 8
     26a:	87 b1       	in	r24, 0x07	; 7
     26c:	8f 70       	andi	r24, 0x0F	; 15
     26e:	87 b9       	out	0x07, r24	; 7
     270:	88 b1       	in	r24, 0x08	; 8
     272:	88 b9       	out	0x08, r24	; 8
     274:	42 9a       	sbi	0x08, 2	; 8
     276:	42 98       	cbi	0x08, 2	; 8
     278:	42 9a       	sbi	0x08, 2	; 8
     27a:	42 98       	cbi	0x08, 2	; 8
     27c:	47 99       	sbic	0x08, 7	; 8
     27e:	fa cf       	rjmp	.-12     	; 0x274 <Busy_wait+0x16>
     280:	42 98       	cbi	0x08, 2	; 8
     282:	41 98       	cbi	0x08, 1	; 8
     284:	87 b1       	in	r24, 0x07	; 7
     286:	88 70       	andi	r24, 0x08	; 8
     288:	87 b9       	out	0x07, r24	; 7
     28a:	87 b1       	in	r24, 0x07	; 7
     28c:	87 6f       	ori	r24, 0xF7	; 247
     28e:	87 b9       	out	0x07, r24	; 7
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	08 95       	ret

00000294 <lcd_wr_command>:
     294:	42 98       	cbi	0x08, 2	; 8
     296:	40 98       	cbi	0x08, 0	; 8
     298:	41 98       	cbi	0x08, 1	; 8
     29a:	98 b1       	in	r25, 0x08	; 8
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	98 b9       	out	0x08, r25	; 8
     2a0:	98 b1       	in	r25, 0x08	; 8
     2a2:	28 2f       	mov	r18, r24
     2a4:	20 7f       	andi	r18, 0xF0	; 240
     2a6:	92 2b       	or	r25, r18
     2a8:	98 b9       	out	0x08, r25	; 8
     2aa:	42 9a       	sbi	0x08, 2	; 8
     2ac:	42 98       	cbi	0x08, 2	; 8
     2ae:	98 b1       	in	r25, 0x08	; 8
     2b0:	9f 70       	andi	r25, 0x0F	; 15
     2b2:	98 b9       	out	0x08, r25	; 8
     2b4:	98 b1       	in	r25, 0x08	; 8
     2b6:	82 95       	swap	r24
     2b8:	80 7f       	andi	r24, 0xF0	; 240
     2ba:	89 2b       	or	r24, r25
     2bc:	88 b9       	out	0x08, r24	; 8
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	42 98       	cbi	0x08, 2	; 8
     2c2:	cd df       	rcall	.-102    	; 0x25e <Busy_wait>
     2c4:	81 11       	cpse	r24, r1
     2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <lcd_wr_command+0x2e>
     2c8:	81 ee       	ldi	r24, 0xE1	; 225
     2ca:	94 e0       	ldi	r25, 0x04	; 4
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcd_wr_command+0x38>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <lcd_wr_command+0x3e>
     2d2:	00 00       	nop
     2d4:	08 95       	ret

000002d6 <lcd_wr_char>:
     2d6:	42 98       	cbi	0x08, 2	; 8
     2d8:	40 9a       	sbi	0x08, 0	; 8
     2da:	41 98       	cbi	0x08, 1	; 8
     2dc:	98 b1       	in	r25, 0x08	; 8
     2de:	9f 70       	andi	r25, 0x0F	; 15
     2e0:	98 b9       	out	0x08, r25	; 8
     2e2:	98 b1       	in	r25, 0x08	; 8
     2e4:	28 2f       	mov	r18, r24
     2e6:	20 7f       	andi	r18, 0xF0	; 240
     2e8:	92 2b       	or	r25, r18
     2ea:	98 b9       	out	0x08, r25	; 8
     2ec:	42 9a       	sbi	0x08, 2	; 8
     2ee:	42 98       	cbi	0x08, 2	; 8
     2f0:	98 b1       	in	r25, 0x08	; 8
     2f2:	9f 70       	andi	r25, 0x0F	; 15
     2f4:	98 b9       	out	0x08, r25	; 8
     2f6:	98 b1       	in	r25, 0x08	; 8
     2f8:	82 95       	swap	r24
     2fa:	80 7f       	andi	r24, 0xF0	; 240
     2fc:	89 2b       	or	r24, r25
     2fe:	88 b9       	out	0x08, r24	; 8
     300:	42 9a       	sbi	0x08, 2	; 8
     302:	42 98       	cbi	0x08, 2	; 8
     304:	89 ef       	ldi	r24, 0xF9	; 249
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_wr_char+0x32>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <lcd_wr_char+0x38>
     30e:	00 00       	nop
     310:	08 95       	ret

00000312 <lcd_init>:
     312:	80 e2       	ldi	r24, 0x20	; 32
     314:	bf df       	rcall	.-130    	; 0x294 <lcd_wr_command>
     316:	88 e2       	ldi	r24, 0x28	; 40
     318:	bd df       	rcall	.-134    	; 0x294 <lcd_wr_command>
     31a:	8c e0       	ldi	r24, 0x0C	; 12
     31c:	bb df       	rcall	.-138    	; 0x294 <lcd_wr_command>
     31e:	86 e0       	ldi	r24, 0x06	; 6
     320:	b9 df       	rcall	.-142    	; 0x294 <lcd_wr_command>
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	b7 cf       	rjmp	.-146    	; 0x294 <lcd_wr_command>
     326:	08 95       	ret

00000328 <lcd_cursor>:
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	69 f0       	breq	.+26     	; 0x346 <lcd_cursor+0x1e>
     32c:	18 f4       	brcc	.+6      	; 0x334 <lcd_cursor+0xc>
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	31 f0       	breq	.+12     	; 0x33e <lcd_cursor+0x16>
     332:	08 95       	ret
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	59 f0       	breq	.+22     	; 0x34e <lcd_cursor+0x26>
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	69 f0       	breq	.+26     	; 0x356 <lcd_cursor+0x2e>
     33c:	08 95       	ret
     33e:	8f e7       	ldi	r24, 0x7F	; 127
     340:	86 0f       	add	r24, r22
     342:	a8 cf       	rjmp	.-176    	; 0x294 <lcd_wr_command>
     344:	08 95       	ret
     346:	8f eb       	ldi	r24, 0xBF	; 191
     348:	86 0f       	add	r24, r22
     34a:	a4 cf       	rjmp	.-184    	; 0x294 <lcd_wr_command>
     34c:	08 95       	ret
     34e:	83 e9       	ldi	r24, 0x93	; 147
     350:	86 0f       	add	r24, r22
     352:	a0 cf       	rjmp	.-192    	; 0x294 <lcd_wr_command>
     354:	08 95       	ret
     356:	83 ed       	ldi	r24, 0xD3	; 211
     358:	86 0f       	add	r24, r22
     35a:	9c cf       	rjmp	.-200    	; 0x294 <lcd_wr_command>
     35c:	08 95       	ret

0000035e <lcd_string>:
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ec 01       	movw	r28, r24
     364:	88 81       	ld	r24, Y
     366:	88 23       	and	r24, r24
     368:	29 f0       	breq	.+10     	; 0x374 <lcd_string+0x16>
     36a:	21 96       	adiw	r28, 0x01	; 1
     36c:	b4 df       	rcall	.-152    	; 0x2d6 <lcd_wr_char>
     36e:	89 91       	ld	r24, Y+
     370:	81 11       	cpse	r24, r1
     372:	fc cf       	rjmp	.-8      	; 0x36c <lcd_string+0xe>
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <lcd_home>:
     37a:	80 e8       	ldi	r24, 0x80	; 128
     37c:	8b cf       	rjmp	.-234    	; 0x294 <lcd_wr_command>
     37e:	08 95       	ret

00000380 <getPow>:
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	66 23       	and	r22, r22
     38a:	b1 f0       	breq	.+44     	; 0x3b8 <getPow+0x38>
     38c:	c8 2e       	mov	r12, r24
     38e:	d1 2c       	mov	r13, r1
     390:	e1 2c       	mov	r14, r1
     392:	f1 2c       	mov	r15, r1
     394:	ef ef       	ldi	r30, 0xFF	; 255
     396:	e6 0f       	add	r30, r22
     398:	a1 f0       	breq	.+40     	; 0x3c2 <getPow+0x42>
     39a:	68 2f       	mov	r22, r24
     39c:	7d 2d       	mov	r23, r13
     39e:	8e 2d       	mov	r24, r14
     3a0:	9f 2d       	mov	r25, r15
     3a2:	26 2f       	mov	r18, r22
     3a4:	37 2f       	mov	r19, r23
     3a6:	48 2f       	mov	r20, r24
     3a8:	59 2f       	mov	r21, r25
     3aa:	c7 01       	movw	r24, r14
     3ac:	b6 01       	movw	r22, r12
     3ae:	0e 94 1d 22 	call	0x443a	; 0x443a <__mulsi3>
     3b2:	e1 50       	subi	r30, 0x01	; 1
     3b4:	b1 f7       	brne	.-20     	; 0x3a2 <getPow+0x22>
     3b6:	09 c0       	rjmp	.+18     	; 0x3ca <getPow+0x4a>
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <getPow+0x4a>
     3c2:	68 2f       	mov	r22, r24
     3c4:	7d 2d       	mov	r23, r13
     3c6:	8e 2d       	mov	r24, r14
     3c8:	9f 2d       	mov	r25, r15
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	df 90       	pop	r13
     3d0:	cf 90       	pop	r12
     3d2:	08 95       	ret

000003d4 <getDigits>:
     3d4:	cf 92       	push	r12
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	6b 01       	movw	r12, r22
     3de:	7c 01       	movw	r14, r24
     3e0:	6f ef       	ldi	r22, 0xFF	; 255
     3e2:	64 0f       	add	r22, r20
     3e4:	8a e0       	ldi	r24, 0x0A	; 10
     3e6:	cc df       	rcall	.-104    	; 0x380 <getPow>
     3e8:	9b 01       	movw	r18, r22
     3ea:	ac 01       	movw	r20, r24
     3ec:	c7 01       	movw	r24, r14
     3ee:	b6 01       	movw	r22, r12
     3f0:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     3f4:	ca 01       	movw	r24, r20
     3f6:	b9 01       	movw	r22, r18
     3f8:	2a e0       	ldi	r18, 0x0A	; 10
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	0e 94 2c 22 	call	0x4458	; 0x4458 <__udivmodsi4>
     404:	80 e3       	ldi	r24, 0x30	; 48
     406:	86 0f       	add	r24, r22
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <lcd_print>:
     412:	cf 92       	push	r12
     414:	df 92       	push	r13
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	69 01       	movw	r12, r18
     420:	7a 01       	movw	r14, r20
     422:	88 23       	and	r24, r24
     424:	11 f0       	breq	.+4      	; 0x42a <lcd_print+0x18>
     426:	61 11       	cpse	r22, r1
     428:	02 c0       	rjmp	.+4      	; 0x42e <lcd_print+0x1c>
     42a:	a7 df       	rcall	.-178    	; 0x37a <lcd_home>
     42c:	01 c0       	rjmp	.+2      	; 0x430 <lcd_print+0x1e>
     42e:	7c df       	rcall	.-264    	; 0x328 <lcd_cursor>
     430:	0b 30       	cpi	r16, 0x0B	; 11
     432:	11 05       	cpc	r17, r1
     434:	1c f0       	brlt	.+6      	; 0x43c <lcd_print+0x2a>
     436:	88 e5       	ldi	r24, 0x58	; 88
     438:	4e df       	rcall	.-356    	; 0x2d6 <lcd_wr_char>
     43a:	09 c0       	rjmp	.+18     	; 0x44e <lcd_print+0x3c>
     43c:	00 23       	and	r16, r16
     43e:	39 f0       	breq	.+14     	; 0x44e <lcd_print+0x3c>
     440:	40 2f       	mov	r20, r16
     442:	c7 01       	movw	r24, r14
     444:	b6 01       	movw	r22, r12
     446:	c6 df       	rcall	.-116    	; 0x3d4 <getDigits>
     448:	46 df       	rcall	.-372    	; 0x2d6 <lcd_wr_char>
     44a:	01 50       	subi	r16, 0x01	; 1
     44c:	c9 f7       	brne	.-14     	; 0x440 <lcd_print+0x2e>
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	df 90       	pop	r13
     458:	cf 90       	pop	r12
     45a:	08 95       	ret

0000045c <adc_pin_config>:
     45c:	10 ba       	out	0x10, r1	; 16
     45e:	11 ba       	out	0x11, r1	; 17
     460:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     464:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     468:	08 95       	ret

0000046a <adc_init>:
     46a:	ea e7       	ldi	r30, 0x7A	; 122
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	10 82       	st	Z, r1
     470:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     474:	80 e2       	ldi	r24, 0x20	; 32
     476:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     47a:	80 e8       	ldi	r24, 0x80	; 128
     47c:	80 bf       	out	0x30, r24	; 48
     47e:	86 e8       	ldi	r24, 0x86	; 134
     480:	80 83       	st	Z, r24
     482:	08 95       	ret

00000484 <timer5_init>:
     484:	e1 e2       	ldi	r30, 0x21	; 33
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	10 82       	st	Z, r1
     48a:	8f ef       	ldi	r24, 0xFF	; 255
     48c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     496:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     49a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     49e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     4a2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     4a6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     4aa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
     4ae:	89 ea       	ldi	r24, 0xA9	; 169
     4b0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     4b4:	8b e0       	ldi	r24, 0x0B	; 11
     4b6:	80 83       	st	Z, r24
     4b8:	08 95       	ret

000004ba <motion_set>:
     4ba:	92 b1       	in	r25, 0x02	; 2
     4bc:	90 7f       	andi	r25, 0xF0	; 240
     4be:	8f 70       	andi	r24, 0x0F	; 15
     4c0:	98 2b       	or	r25, r24
     4c2:	92 b9       	out	0x02, r25	; 2
     4c4:	08 95       	ret

000004c6 <forward>:
     4c6:	86 e0       	ldi	r24, 0x06	; 6
     4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <motion_set>
     4ca:	08 95       	ret

000004cc <stop>:
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	f5 cf       	rjmp	.-22     	; 0x4ba <motion_set>
     4d0:	08 95       	ret

000004d2 <left>:
     4d2:	88 ec       	ldi	r24, 0xC8	; 200
     4d4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     4d8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	ed cf       	rjmp	.-38     	; 0x4ba <motion_set>
     4e0:	08 95       	ret

000004e2 <right>:
     4e2:	88 ec       	ldi	r24, 0xC8	; 200
     4e4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     4e8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	e5 cf       	rjmp	.-54     	; 0x4ba <motion_set>
     4f0:	08 95       	ret

000004f2 <ADC_Conversion>:
     4f2:	88 30       	cpi	r24, 0x08	; 8
     4f4:	18 f0       	brcs	.+6      	; 0x4fc <ADC_Conversion+0xa>
     4f6:	98 e0       	ldi	r25, 0x08	; 8
     4f8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     4fc:	87 70       	andi	r24, 0x07	; 7
     4fe:	80 6e       	ori	r24, 0xE0	; 224
     500:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     504:	ea e7       	ldi	r30, 0x7A	; 122
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	80 64       	ori	r24, 0x40	; 64
     50c:	80 83       	st	Z, r24
     50e:	80 81       	ld	r24, Z
     510:	84 ff       	sbrs	r24, 4
     512:	fd cf       	rjmp	.-6      	; 0x50e <ADC_Conversion+0x1c>
     514:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     518:	ea e7       	ldi	r30, 0x7A	; 122
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	90 81       	ld	r25, Z
     51e:	90 61       	ori	r25, 0x10	; 16
     520:	90 83       	st	Z, r25
     522:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     526:	08 95       	ret

00000528 <print_sensor>:
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	d8 2f       	mov	r29, r24
     52e:	c6 2f       	mov	r28, r22
     530:	84 2f       	mov	r24, r20
     532:	df df       	rcall	.-66     	; 0x4f2 <ADC_Conversion>
     534:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <ADC_Value>
     538:	48 2f       	mov	r20, r24
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	6c 2f       	mov	r22, r28
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	23 e0       	ldi	r18, 0x03	; 3
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	8d 2f       	mov	r24, r29
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	64 df       	rcall	.-312    	; 0x412 <lcd_print>
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <buzzer_on>:
     550:	14 9a       	sbi	0x02, 4	; 2
     552:	08 95       	ret

00000554 <buzzer_off>:
     554:	14 98       	cbi	0x02, 4	; 2
     556:	08 95       	ret

00000558 <buzz_blink>:
     558:	fb df       	rcall	.-10     	; 0x550 <buzzer_on>
     55a:	68 e8       	ldi	r22, 0x88	; 136
     55c:	73 e1       	ldi	r23, 0x13	; 19
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	f4 dd       	rcall	.-1048   	; 0x14c <delay>
     564:	f7 df       	rcall	.-18     	; 0x554 <buzzer_off>
     566:	68 e8       	ldi	r22, 0x88	; 136
     568:	73 e1       	ldi	r23, 0x13	; 19
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	ee cd       	rjmp	.-1060   	; 0x14c <delay>
     570:	08 95       	ret

00000572 <motion_pin_config>:
     572:	81 b1       	in	r24, 0x01	; 1
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	81 b9       	out	0x01, r24	; 1
     578:	82 b1       	in	r24, 0x02	; 2
     57a:	80 7f       	andi	r24, 0xF0	; 240
     57c:	82 b9       	out	0x02, r24	; 2
     57e:	ea e0       	ldi	r30, 0x0A	; 10
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	80 81       	ld	r24, Z
     584:	88 61       	ori	r24, 0x18	; 24
     586:	80 83       	st	Z, r24
     588:	eb e0       	ldi	r30, 0x0B	; 11
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	80 81       	ld	r24, Z
     58e:	88 61       	ori	r24, 0x18	; 24
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <port_init>:
     594:	00 de       	rcall	.-1024   	; 0x196 <color_sensor_pin_config>
     596:	06 de       	rcall	.-1012   	; 0x1a4 <color_sensor_pin_interrupt_init>
     598:	5b de       	rcall	.-842    	; 0x250 <lcd_port_config>
     59a:	60 df       	rcall	.-320    	; 0x45c <adc_pin_config>
     59c:	ea df       	rcall	.-44     	; 0x572 <motion_pin_config>
     59e:	f5 dd       	rcall	.-1046   	; 0x18a <rgb_port_config>
     5a0:	20 de       	rcall	.-960    	; 0x1e2 <servo1_pin_config>
     5a2:	22 ce       	rjmp	.-956    	; 0x1e8 <servo2_pin_config>
     5a4:	08 95       	ret

000005a6 <init_devices>:
     5a6:	f8 94       	cli
     5a8:	f5 df       	rcall	.-22     	; 0x594 <port_init>
     5aa:	1e de       	rcall	.-964    	; 0x1e8 <servo2_pin_config>
     5ac:	1a de       	rcall	.-972    	; 0x1e2 <servo1_pin_config>
     5ae:	5d df       	rcall	.-326    	; 0x46a <adc_init>
     5b0:	69 df       	rcall	.-302    	; 0x484 <timer5_init>
     5b2:	1d de       	rcall	.-966    	; 0x1ee <timer3_init>
     5b4:	78 94       	sei
     5b6:	08 95       	ret

000005b8 <blackline_data>:
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	9b df       	rcall	.-202    	; 0x4f2 <ADC_Conversion>
     5bc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Left_white_line>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	97 df       	rcall	.-210    	; 0x4f2 <ADC_Conversion>
     5c4:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <Center_white_line>
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	93 df       	rcall	.-218    	; 0x4f2 <ADC_Conversion>
     5cc:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Right_white_line>
     5d0:	43 e0       	ldi	r20, 0x03	; 3
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	a8 df       	rcall	.-176    	; 0x528 <print_sensor>
     5d8:	42 e0       	ldi	r20, 0x02	; 2
     5da:	65 e0       	ldi	r22, 0x05	; 5
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	a4 df       	rcall	.-184    	; 0x528 <print_sensor>
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	69 e0       	ldi	r22, 0x09	; 9
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	a0 cf       	rjmp	.-192    	; 0x528 <print_sensor>
     5e8:	08 95       	ret

000005ea <blackline>:
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	e0 df       	rcall	.-64     	; 0x5b8 <blackline_data>
     5f8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
     5fc:	87 39       	cpi	r24, 0x97	; 151
     5fe:	e8 f1       	brcs	.+122    	; 0x67a <blackline+0x90>
     600:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
     604:	96 39       	cpi	r25, 0x96	; 150
     606:	c8 f5       	brcc	.+114    	; 0x67a <blackline+0x90>
     608:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
     60c:	96 39       	cpi	r25, 0x96	; 150
     60e:	a8 f5       	brcc	.+106    	; 0x67a <blackline+0x90>
     610:	0f 2e       	mov	r0, r31
     612:	f8 e2       	ldi	r31, 0x28	; 40
     614:	ef 2e       	mov	r14, r31
     616:	ff 24       	eor	r15, r15
     618:	f3 94       	inc	r15
     61a:	f0 2d       	mov	r31, r0
     61c:	0a e2       	ldi	r16, 0x2A	; 42
     61e:	11 e0       	ldi	r17, 0x01	; 1
     620:	c8 ec       	ldi	r28, 0xC8	; 200
     622:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
     626:	86 39       	cpi	r24, 0x96	; 150
     628:	50 f4       	brcc	.+20     	; 0x63e <blackline+0x54>
     62a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
     62e:	97 39       	cpi	r25, 0x97	; 151
     630:	30 f0       	brcs	.+12     	; 0x63e <blackline+0x54>
     632:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
     636:	96 39       	cpi	r25, 0x96	; 150
     638:	08 f0       	brcs	.+2      	; 0x63c <blackline+0x52>
     63a:	87 c0       	rjmp	.+270    	; 0x74a <blackline+0x160>
     63c:	9a c0       	rjmp	.+308    	; 0x772 <blackline+0x188>
     63e:	87 39       	cpi	r24, 0x97	; 151
     640:	08 f4       	brcc	.+2      	; 0x644 <blackline+0x5a>
     642:	87 c0       	rjmp	.+270    	; 0x752 <blackline+0x168>
     644:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
     648:	97 39       	cpi	r25, 0x97	; 151
     64a:	08 f0       	brcs	.+2      	; 0x64e <blackline+0x64>
     64c:	92 c0       	rjmp	.+292    	; 0x772 <blackline+0x188>
     64e:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
     652:	97 39       	cpi	r25, 0x97	; 151
     654:	30 f0       	brcs	.+12     	; 0x662 <blackline+0x78>
     656:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
     65a:	87 39       	cpi	r24, 0x97	; 151
     65c:	08 f4       	brcc	.+2      	; 0x660 <blackline+0x76>
     65e:	5e c0       	rjmp	.+188    	; 0x71c <blackline+0x132>
     660:	88 c0       	rjmp	.+272    	; 0x772 <blackline+0x188>
     662:	87 39       	cpi	r24, 0x97	; 151
     664:	08 f4       	brcc	.+2      	; 0x668 <blackline+0x7e>
     666:	5a c0       	rjmp	.+180    	; 0x71c <blackline+0x132>
     668:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
     66c:	87 39       	cpi	r24, 0x97	; 151
     66e:	08 f4       	brcc	.+2      	; 0x672 <blackline+0x88>
     670:	55 c0       	rjmp	.+170    	; 0x71c <blackline+0x132>
     672:	97 39       	cpi	r25, 0x97	; 151
     674:	08 f4       	brcc	.+2      	; 0x678 <blackline+0x8e>
     676:	52 c0       	rjmp	.+164    	; 0x71c <blackline+0x132>
     678:	7c c0       	rjmp	.+248    	; 0x772 <blackline+0x188>
     67a:	86 39       	cpi	r24, 0x96	; 150
     67c:	08 f0       	brcs	.+2      	; 0x680 <blackline+0x96>
     67e:	47 c0       	rjmp	.+142    	; 0x70e <blackline+0x124>
     680:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
     684:	87 39       	cpi	r24, 0x97	; 151
     686:	60 f0       	brcs	.+24     	; 0x6a0 <blackline+0xb6>
     688:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
     68c:	96 39       	cpi	r25, 0x96	; 150
     68e:	40 f4       	brcc	.+16     	; 0x6a0 <blackline+0xb6>
     690:	93 df       	rcall	.-218    	; 0x5b8 <blackline_data>
     692:	19 df       	rcall	.-462    	; 0x4c6 <forward>
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     69a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     69e:	69 c0       	rjmp	.+210    	; 0x772 <blackline+0x188>
     6a0:	86 39       	cpi	r24, 0x96	; 150
     6a2:	a8 f5       	brcc	.+106    	; 0x70e <blackline+0x124>
     6a4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
     6a8:	87 39       	cpi	r24, 0x97	; 151
     6aa:	88 f1       	brcs	.+98     	; 0x70e <blackline+0x124>
     6ac:	0f 2e       	mov	r0, r31
     6ae:	f8 e2       	ldi	r31, 0x28	; 40
     6b0:	ef 2e       	mov	r14, r31
     6b2:	ff 24       	eor	r15, r15
     6b4:	f3 94       	inc	r15
     6b6:	f0 2d       	mov	r31, r0
     6b8:	1c ed       	ldi	r17, 0xDC	; 220
     6ba:	ca e2       	ldi	r28, 0x2A	; 42
     6bc:	d1 e0       	ldi	r29, 0x01	; 1
     6be:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
     6c2:	86 39       	cpi	r24, 0x96	; 150
     6c4:	50 f4       	brcc	.+20     	; 0x6da <blackline+0xf0>
     6c6:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
     6ca:	97 39       	cpi	r25, 0x97	; 151
     6cc:	30 f0       	brcs	.+12     	; 0x6da <blackline+0xf0>
     6ce:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
     6d2:	96 39       	cpi	r25, 0x96	; 150
     6d4:	08 f0       	brcs	.+2      	; 0x6d8 <blackline+0xee>
     6d6:	43 c0       	rjmp	.+134    	; 0x75e <blackline+0x174>
     6d8:	4c c0       	rjmp	.+152    	; 0x772 <blackline+0x188>
     6da:	87 39       	cpi	r24, 0x97	; 151
     6dc:	08 f4       	brcc	.+2      	; 0x6e0 <blackline+0xf6>
     6de:	43 c0       	rjmp	.+134    	; 0x766 <blackline+0x17c>
     6e0:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
     6e4:	97 39       	cpi	r25, 0x97	; 151
     6e6:	08 f0       	brcs	.+2      	; 0x6ea <blackline+0x100>
     6e8:	44 c0       	rjmp	.+136    	; 0x772 <blackline+0x188>
     6ea:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
     6ee:	97 39       	cpi	r25, 0x97	; 151
     6f0:	28 f0       	brcs	.+10     	; 0x6fc <blackline+0x112>
     6f2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
     6f6:	87 39       	cpi	r24, 0x97	; 151
     6f8:	e8 f0       	brcs	.+58     	; 0x734 <blackline+0x14a>
     6fa:	3b c0       	rjmp	.+118    	; 0x772 <blackline+0x188>
     6fc:	87 39       	cpi	r24, 0x97	; 151
     6fe:	d0 f0       	brcs	.+52     	; 0x734 <blackline+0x14a>
     700:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
     704:	87 39       	cpi	r24, 0x97	; 151
     706:	b0 f0       	brcs	.+44     	; 0x734 <blackline+0x14a>
     708:	97 39       	cpi	r25, 0x97	; 151
     70a:	a0 f0       	brcs	.+40     	; 0x734 <blackline+0x14a>
     70c:	32 c0       	rjmp	.+100    	; 0x772 <blackline+0x188>
     70e:	db de       	rcall	.-586    	; 0x4c6 <forward>
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     716:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     71a:	2b c0       	rjmp	.+86     	; 0x772 <blackline+0x188>
     71c:	4d df       	rcall	.-358    	; 0x5b8 <blackline_data>
     71e:	d3 de       	rcall	.-602    	; 0x4c6 <forward>
     720:	f7 01       	movw	r30, r14
     722:	10 82       	st	Z, r1
     724:	f8 01       	movw	r30, r16
     726:	c0 83       	st	Z, r28
     728:	6e e1       	ldi	r22, 0x1E	; 30
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0d dd       	rcall	.-1510   	; 0x14c <delay>
     732:	77 cf       	rjmp	.-274    	; 0x622 <blackline+0x38>
     734:	41 df       	rcall	.-382    	; 0x5b8 <blackline_data>
     736:	c7 de       	rcall	.-626    	; 0x4c6 <forward>
     738:	f7 01       	movw	r30, r14
     73a:	10 83       	st	Z, r17
     73c:	18 82       	st	Y, r1
     73e:	6e e1       	ldi	r22, 0x1E	; 30
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 dd       	rcall	.-1532   	; 0x14c <delay>
     748:	ba cf       	rjmp	.-140    	; 0x6be <blackline+0xd4>
     74a:	87 39       	cpi	r24, 0x97	; 151
     74c:	08 f4       	brcc	.+2      	; 0x750 <blackline+0x166>
     74e:	7f cf       	rjmp	.-258    	; 0x64e <blackline+0x64>
     750:	10 c0       	rjmp	.+32     	; 0x772 <blackline+0x188>
     752:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
     756:	87 39       	cpi	r24, 0x97	; 151
     758:	08 f0       	brcs	.+2      	; 0x75c <blackline+0x172>
     75a:	7d cf       	rjmp	.-262    	; 0x656 <blackline+0x6c>
     75c:	df cf       	rjmp	.-66     	; 0x71c <blackline+0x132>
     75e:	87 39       	cpi	r24, 0x97	; 151
     760:	08 f4       	brcc	.+2      	; 0x764 <blackline+0x17a>
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <blackline+0x100>
     764:	06 c0       	rjmp	.+12     	; 0x772 <blackline+0x188>
     766:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
     76a:	87 39       	cpi	r24, 0x97	; 151
     76c:	08 f0       	brcs	.+2      	; 0x770 <blackline+0x186>
     76e:	c1 cf       	rjmp	.-126    	; 0x6f2 <blackline+0x108>
     770:	e1 cf       	rjmp	.-62     	; 0x734 <blackline+0x14a>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	08 95       	ret

00000784 <back_turn>:
     784:	ae de       	rcall	.-676    	; 0x4e2 <right>
     786:	68 e0       	ldi	r22, 0x08	; 8
     788:	77 e0       	ldi	r23, 0x07	; 7
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	de dc       	rcall	.-1604   	; 0x14c <delay>
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	af de       	rcall	.-674    	; 0x4f2 <ADC_Conversion>
     794:	86 39       	cpi	r24, 0x96	; 150
     796:	e0 f3       	brcs	.-8      	; 0x790 <back_turn+0xc>
     798:	99 ce       	rjmp	.-718    	; 0x4cc <stop>
     79a:	08 95       	ret

0000079c <initialize>:
     79c:	eb e7       	ldi	r30, 0x7B	; 123
     79e:	f2 e0       	ldi	r31, 0x02	; 2
     7a0:	2b ec       	ldi	r18, 0xCB	; 203
     7a2:	32 e0       	ldi	r19, 0x02	; 2
     7a4:	89 e1       	ldi	r24, 0x19	; 25
     7a6:	9c ef       	ldi	r25, 0xFC	; 252
     7a8:	81 93       	st	Z+, r24
     7aa:	91 93       	st	Z+, r25
     7ac:	e2 17       	cp	r30, r18
     7ae:	f3 07       	cpc	r31, r19
     7b0:	d9 f7       	brne	.-10     	; 0x7a8 <initialize+0xc>
     7b2:	ee e1       	ldi	r30, 0x1E	; 30
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	26 e4       	ldi	r18, 0x46	; 70
     7b8:	33 e0       	ldi	r19, 0x03	; 3
     7ba:	89 e1       	ldi	r24, 0x19	; 25
     7bc:	9c ef       	ldi	r25, 0xFC	; 252
     7be:	81 93       	st	Z+, r24
     7c0:	91 93       	st	Z+, r25
     7c2:	e2 17       	cp	r30, r18
     7c4:	f3 07       	cpc	r31, r19
     7c6:	d9 f7       	brne	.-10     	; 0x7be <initialize+0x22>
     7c8:	08 95       	ret

000007ca <push>:
     7ca:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <path>
     7ce:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <path+0x1>
     7d2:	29 31       	cpi	r18, 0x19	; 25
     7d4:	3c 4f       	sbci	r19, 0xFC	; 252
     7d6:	51 f0       	breq	.+20     	; 0x7ec <push+0x22>
     7d8:	ed e7       	ldi	r30, 0x7D	; 125
     7da:	f2 e0       	ldi	r31, 0x02	; 2
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	41 91       	ld	r20, Z+
     7e2:	51 91       	ld	r21, Z+
     7e4:	49 31       	cpi	r20, 0x19	; 25
     7e6:	5c 4f       	sbci	r21, 0xFC	; 252
     7e8:	59 f4       	brne	.+22     	; 0x800 <push+0x36>
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <push+0x26>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	f9 01       	movw	r30, r18
     7f6:	e5 58       	subi	r30, 0x85	; 133
     7f8:	fd 4f       	sbci	r31, 0xFD	; 253
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
     7fe:	08 95       	ret
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	28 32       	cpi	r18, 0x28	; 40
     806:	31 05       	cpc	r19, r1
     808:	59 f7       	brne	.-42     	; 0x7e0 <push+0x16>
     80a:	08 95       	ret

0000080c <pushp>:
     80c:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <bot>
     810:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <bot+0x1>
     814:	29 31       	cpi	r18, 0x19	; 25
     816:	3c 4f       	sbci	r19, 0xFC	; 252
     818:	51 f0       	breq	.+20     	; 0x82e <pushp+0x22>
     81a:	e0 e2       	ldi	r30, 0x20	; 32
     81c:	f3 e0       	ldi	r31, 0x03	; 3
     81e:	21 e0       	ldi	r18, 0x01	; 1
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	41 91       	ld	r20, Z+
     824:	51 91       	ld	r21, Z+
     826:	49 31       	cpi	r20, 0x19	; 25
     828:	5c 4f       	sbci	r21, 0xFC	; 252
     82a:	59 f4       	brne	.+22     	; 0x842 <pushp+0x36>
     82c:	02 c0       	rjmp	.+4      	; 0x832 <pushp+0x26>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	f9 01       	movw	r30, r18
     838:	e2 5e       	subi	r30, 0xE2	; 226
     83a:	fc 4f       	sbci	r31, 0xFC	; 252
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	80 83       	st	Z, r24
     840:	08 95       	ret
     842:	2f 5f       	subi	r18, 0xFF	; 255
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	24 31       	cpi	r18, 0x14	; 20
     848:	31 05       	cpc	r19, r1
     84a:	59 f7       	brne	.-42     	; 0x822 <pushp+0x16>
     84c:	08 95       	ret

0000084e <minDistance>:
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	db 01       	movw	r26, r22
     854:	fc 01       	movw	r30, r24
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	4f ef       	ldi	r20, 0xFF	; 255
     85c:	5f e7       	ldi	r21, 0x7F	; 127
     85e:	8d 91       	ld	r24, X+
     860:	81 11       	cpse	r24, r1
     862:	08 c0       	rjmp	.+16     	; 0x874 <minDistance+0x26>
     864:	80 81       	ld	r24, Z
     866:	91 81       	ldd	r25, Z+1	; 0x01
     868:	48 17       	cp	r20, r24
     86a:	59 07       	cpc	r21, r25
     86c:	1c f0       	brlt	.+6      	; 0x874 <minDistance+0x26>
     86e:	d2 2f       	mov	r29, r18
     870:	c3 2f       	mov	r28, r19
     872:	ac 01       	movw	r20, r24
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	32 96       	adiw	r30, 0x02	; 2
     87a:	28 32       	cpi	r18, 0x28	; 40
     87c:	31 05       	cpc	r19, r1
     87e:	79 f7       	brne	.-34     	; 0x85e <minDistance+0x10>
     880:	8d 2f       	mov	r24, r29
     882:	9c 2f       	mov	r25, r28
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <printPath>:
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	fb 01       	movw	r30, r22
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	e8 0f       	add	r30, r24
     896:	f9 1f       	adc	r31, r25
     898:	20 81       	ld	r18, Z
     89a:	31 81       	ldd	r19, Z+1	; 0x01
     89c:	2f 3f       	cpi	r18, 0xFF	; 255
     89e:	4f ef       	ldi	r20, 0xFF	; 255
     8a0:	34 07       	cpc	r19, r20
     8a2:	89 f0       	breq	.+34     	; 0x8c6 <printPath+0x3c>
     8a4:	eb 01       	movw	r28, r22
     8a6:	b9 01       	movw	r22, r18
     8a8:	f0 df       	rcall	.-32     	; 0x88a <printPath>
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	8f e2       	ldi	r24, 0x2F	; 47
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	9f 93       	push	r25
     8b4:	8f 93       	push	r24
     8b6:	0e 94 9c 22 	call	0x4538	; 0x4538 <printf>
     8ba:	ce 01       	movw	r24, r28
     8bc:	86 df       	rcall	.-244    	; 0x7ca <push>
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <printSolution>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ea 01       	movw	r28, r20
     8d6:	3f 93       	push	r19
     8d8:	2f 93       	push	r18
     8da:	f8 01       	movw	r30, r16
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	81 81       	ldd	r24, Z+1	; 0x01
     8e6:	8f 93       	push	r24
     8e8:	80 81       	ld	r24, Z
     8ea:	8f 93       	push	r24
     8ec:	1f 93       	push	r17
     8ee:	0f 93       	push	r16
     8f0:	3f 93       	push	r19
     8f2:	2f 93       	push	r18
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	0e 94 9c 22 	call	0x4538	; 0x4538 <printf>
     900:	b8 01       	movw	r22, r16
     902:	ce 01       	movw	r24, r28
     904:	c2 df       	rcall	.-124    	; 0x88a <printPath>
     906:	8d b7       	in	r24, 0x3d	; 61
     908:	9e b7       	in	r25, 0x3e	; 62
     90a:	0a 96       	adiw	r24, 0x0a	; 10
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	9e bf       	out	0x3e, r25	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	8d bf       	out	0x3d, r24	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <dijkstra>:
     920:	2f 92       	push	r2
     922:	3f 92       	push	r3
     924:	4f 92       	push	r4
     926:	5f 92       	push	r5
     928:	6f 92       	push	r6
     92a:	7f 92       	push	r7
     92c:	8f 92       	push	r8
     92e:	9f 92       	push	r9
     930:	af 92       	push	r10
     932:	bf 92       	push	r11
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	cc 5c       	subi	r28, 0xCC	; 204
     94a:	d1 09       	sbc	r29, r1
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	4c 01       	movw	r8, r24
     958:	1b 01       	movw	r2, r22
     95a:	c7 53       	subi	r28, 0x37	; 55
     95c:	df 4f       	sbci	r29, 0xFF	; 255
     95e:	59 83       	std	Y+1, r21	; 0x01
     960:	48 83       	st	Y, r20
     962:	c9 5c       	subi	r28, 0xC9	; 201
     964:	d0 40       	sbci	r29, 0x00	; 0
     966:	2e 01       	movw	r4, r28
     968:	21 e5       	ldi	r18, 0x51	; 81
     96a:	42 0e       	add	r4, r18
     96c:	51 1c       	adc	r5, r1
     96e:	92 01       	movw	r18, r4
     970:	d2 01       	movw	r26, r4
     972:	fe 01       	movw	r30, r28
     974:	31 96       	adiw	r30, 0x01	; 1
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	9f e7       	ldi	r25, 0x7F	; 127
     97a:	81 93       	st	Z+, r24
     97c:	91 93       	st	Z+, r25
     97e:	1d 92       	st	X+, r1
     980:	e2 17       	cp	r30, r18
     982:	f3 07       	cpc	r31, r19
     984:	d1 f7       	brne	.-12     	; 0x97a <dijkstra+0x5a>
     986:	c1 01       	movw	r24, r2
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	e9 e7       	ldi	r30, 0x79	; 121
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ec 0f       	add	r30, r28
     992:	fd 1f       	adc	r31, r29
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	2f ef       	ldi	r18, 0xFF	; 255
     99a:	3f ef       	ldi	r19, 0xFF	; 255
     99c:	31 83       	std	Z+1, r19	; 0x01
     99e:	20 83       	st	Z, r18
     9a0:	fe 01       	movw	r30, r28
     9a2:	e8 0f       	add	r30, r24
     9a4:	f9 1f       	adc	r31, r25
     9a6:	12 82       	std	Z+2, r1	; 0x02
     9a8:	11 82       	std	Z+1, r1	; 0x01
     9aa:	0f 2e       	mov	r0, r31
     9ac:	f7 e2       	ldi	r31, 0x27	; 39
     9ae:	af 2e       	mov	r10, r31
     9b0:	b1 2c       	mov	r11, r1
     9b2:	f0 2d       	mov	r31, r0
     9b4:	77 24       	eor	r7, r7
     9b6:	73 94       	inc	r7
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f0 e5       	ldi	r31, 0x50	; 80
     9bc:	6f 2e       	mov	r6, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	01 e5       	ldi	r16, 0x51	; 81
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	0c 0f       	add	r16, r28
     9c6:	1d 1f       	adc	r17, r29
     9c8:	08 5d       	subi	r16, 0xD8	; 216
     9ca:	1f 4f       	sbci	r17, 0xFF	; 255
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5a       	subi	r22, 0xAF	; 175
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	3b df       	rcall	.-394    	; 0x84e <minDistance>
     9d8:	e1 e5       	ldi	r30, 0x51	; 81
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	ec 0f       	add	r30, r28
     9de:	fd 1f       	adc	r31, r29
     9e0:	e8 0f       	add	r30, r24
     9e2:	f9 1f       	adc	r31, r25
     9e4:	70 82       	st	Z, r7
     9e6:	68 9e       	mul	r6, r24
     9e8:	d0 01       	movw	r26, r0
     9ea:	69 9e       	mul	r6, r25
     9ec:	b0 0d       	add	r27, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	bd 01       	movw	r22, r26
     9f2:	68 0d       	add	r22, r8
     9f4:	79 1d       	adc	r23, r9
     9f6:	c5 53       	subi	r28, 0x35	; 53
     9f8:	df 4f       	sbci	r29, 0xFF	; 255
     9fa:	79 83       	std	Y+1, r23	; 0x01
     9fc:	68 83       	st	Y, r22
     9fe:	cb 5c       	subi	r28, 0xCB	; 203
     a00:	d0 40       	sbci	r29, 0x00	; 0
     a02:	ae 01       	movw	r20, r28
     a04:	47 58       	subi	r20, 0x87	; 135
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	9e 01       	movw	r18, r28
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	f2 01       	movw	r30, r4
     a10:	7c 01       	movw	r14, r24
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	e2 0e       	add	r14, r18
     a18:	f3 1e       	adc	r15, r19
     a1a:	61 91       	ld	r22, Z+
     a1c:	61 11       	cpse	r22, r1
     a1e:	1c c0       	rjmp	.+56     	; 0xa58 <dijkstra+0x138>
     a20:	c5 53       	subi	r28, 0x35	; 53
     a22:	df 4f       	sbci	r29, 0xFF	; 255
     a24:	a8 81       	ld	r26, Y
     a26:	b9 81       	ldd	r27, Y+1	; 0x01
     a28:	cb 5c       	subi	r28, 0xCB	; 203
     a2a:	d0 40       	sbci	r29, 0x00	; 0
     a2c:	6d 91       	ld	r22, X+
     a2e:	7c 91       	ld	r23, X
     a30:	61 15       	cp	r22, r1
     a32:	71 05       	cpc	r23, r1
     a34:	89 f0       	breq	.+34     	; 0xa58 <dijkstra+0x138>
     a36:	d7 01       	movw	r26, r14
     a38:	cd 90       	ld	r12, X+
     a3a:	dc 90       	ld	r13, X
     a3c:	6c 0d       	add	r22, r12
     a3e:	7d 1d       	adc	r23, r13
     a40:	d9 01       	movw	r26, r18
     a42:	cd 90       	ld	r12, X+
     a44:	dc 90       	ld	r13, X
     a46:	6c 15       	cp	r22, r12
     a48:	7d 05       	cpc	r23, r13
     a4a:	34 f4       	brge	.+12     	; 0xa58 <dijkstra+0x138>
     a4c:	da 01       	movw	r26, r20
     a4e:	8d 93       	st	X+, r24
     a50:	9c 93       	st	X, r25
     a52:	d9 01       	movw	r26, r18
     a54:	6d 93       	st	X+, r22
     a56:	7c 93       	st	X, r23
     a58:	c5 53       	subi	r28, 0x35	; 53
     a5a:	df 4f       	sbci	r29, 0xFF	; 255
     a5c:	68 81       	ld	r22, Y
     a5e:	79 81       	ldd	r23, Y+1	; 0x01
     a60:	cb 5c       	subi	r28, 0xCB	; 203
     a62:	d0 40       	sbci	r29, 0x00	; 0
     a64:	6e 5f       	subi	r22, 0xFE	; 254
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	c5 53       	subi	r28, 0x35	; 53
     a6a:	df 4f       	sbci	r29, 0xFF	; 255
     a6c:	79 83       	std	Y+1, r23	; 0x01
     a6e:	68 83       	st	Y, r22
     a70:	cb 5c       	subi	r28, 0xCB	; 203
     a72:	d0 40       	sbci	r29, 0x00	; 0
     a74:	2e 5f       	subi	r18, 0xFE	; 254
     a76:	3f 4f       	sbci	r19, 0xFF	; 255
     a78:	4e 5f       	subi	r20, 0xFE	; 254
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	e0 17       	cp	r30, r16
     a7e:	f1 07       	cpc	r31, r17
     a80:	61 f6       	brne	.-104    	; 0xa1a <dijkstra+0xfa>
     a82:	71 e0       	ldi	r23, 0x01	; 1
     a84:	a7 1a       	sub	r10, r23
     a86:	b1 08       	sbc	r11, r1
     a88:	09 f0       	breq	.+2      	; 0xa8c <dijkstra+0x16c>
     a8a:	a0 cf       	rjmp	.-192    	; 0x9cc <dijkstra+0xac>
     a8c:	c7 53       	subi	r28, 0x37	; 55
     a8e:	df 4f       	sbci	r29, 0xFF	; 255
     a90:	08 81       	ld	r16, Y
     a92:	19 81       	ldd	r17, Y+1	; 0x01
     a94:	c9 5c       	subi	r28, 0xC9	; 201
     a96:	d0 40       	sbci	r29, 0x00	; 0
     a98:	91 01       	movw	r18, r2
     a9a:	ae 01       	movw	r20, r28
     a9c:	47 58       	subi	r20, 0x87	; 135
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	68 e2       	ldi	r22, 0x28	; 40
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	11 df       	rcall	.-478    	; 0x8cc <printSolution>
     aaa:	c4 53       	subi	r28, 0x34	; 52
     aac:	df 4f       	sbci	r29, 0xFF	; 255
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	7f 90       	pop	r7
     ad2:	6f 90       	pop	r6
     ad4:	5f 90       	pop	r5
     ad6:	4f 90       	pop	r4
     ad8:	3f 90       	pop	r3
     ada:	2f 90       	pop	r2
     adc:	08 95       	ret

00000ade <find_path>:
     ade:	2f 92       	push	r2
     ae0:	3f 92       	push	r3
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	ca 58       	subi	r28, 0x8A	; 138
     b08:	dc 40       	sbci	r29, 0x0C	; 12
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 57       	subi	r28, 0x7F	; 127
     b16:	d3 4f       	sbci	r29, 0xF3	; 243
     b18:	99 83       	std	Y+1, r25	; 0x01
     b1a:	88 83       	st	Y, r24
     b1c:	c1 58       	subi	r28, 0x81	; 129
     b1e:	dc 40       	sbci	r29, 0x0C	; 12
     b20:	c7 57       	subi	r28, 0x77	; 119
     b22:	d3 4f       	sbci	r29, 0xF3	; 243
     b24:	79 83       	std	Y+1, r23	; 0x01
     b26:	68 83       	st	Y, r22
     b28:	c9 58       	subi	r28, 0x89	; 137
     b2a:	dc 40       	sbci	r29, 0x0C	; 12
     b2c:	cd 57       	subi	r28, 0x7D	; 125
     b2e:	d3 4f       	sbci	r29, 0xF3	; 243
     b30:	59 83       	std	Y+1, r21	; 0x01
     b32:	48 83       	st	Y, r20
     b34:	c3 58       	subi	r28, 0x83	; 131
     b36:	dc 40       	sbci	r29, 0x0C	; 12
     b38:	cb 57       	subi	r28, 0x7B	; 123
     b3a:	d3 4f       	sbci	r29, 0xF3	; 243
     b3c:	39 83       	std	Y+1, r19	; 0x01
     b3e:	28 83       	st	Y, r18
     b40:	c5 58       	subi	r28, 0x85	; 133
     b42:	dc 40       	sbci	r29, 0x0C	; 12
     b44:	28 01       	movw	r4, r16
     b46:	37 01       	movw	r6, r14
     b48:	c9 57       	subi	r28, 0x79	; 121
     b4a:	d3 4f       	sbci	r29, 0xF3	; 243
     b4c:	d9 82       	std	Y+1, r13	; 0x01
     b4e:	c8 82       	st	Y, r12
     b50:	c7 58       	subi	r28, 0x87	; 135
     b52:	dc 40       	sbci	r29, 0x0C	; 12
     b54:	15 01       	movw	r2, r10
     b56:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <pushvarible>
     b5a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <pushvarible+0x1>
     b5e:	18 16       	cp	r1, r24
     b60:	19 06       	cpc	r1, r25
     b62:	2c f4       	brge	.+10     	; 0xb6e <find_path+0x90>
     b64:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <pass+0xc>
     b68:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <pass+0xd>
     b6c:	2e de       	rcall	.-932    	; 0x7ca <push>
     b6e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <pushvarible>
     b72:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <pushvarible+0x1>
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <pushvarible+0x1>
     b7c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <pushvarible>
     b80:	cf 57       	subi	r28, 0x7F	; 127
     b82:	d3 4f       	sbci	r29, 0xF3	; 243
     b84:	88 81       	ld	r24, Y
     b86:	99 81       	ldd	r25, Y+1	; 0x01
     b88:	c1 58       	subi	r28, 0x81	; 129
     b8a:	dc 40       	sbci	r29, 0x0C	; 12
     b8c:	1e de       	rcall	.-964    	; 0x7ca <push>
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	20 e8       	ldi	r18, 0x80	; 128
     b94:	3c e0       	ldi	r19, 0x0C	; 12
     b96:	fc 01       	movw	r30, r24
     b98:	a9 01       	movw	r20, r18
     b9a:	11 92       	st	Z+, r1
     b9c:	41 50       	subi	r20, 0x01	; 1
     b9e:	50 40       	sbci	r21, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <find_path+0xbc>
     ba2:	4e e1       	ldi	r20, 0x1E	; 30
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	5c 83       	std	Y+4, r21	; 0x04
     ba8:	4b 83       	std	Y+3, r20	; 0x03
     baa:	0f 2e       	mov	r0, r31
     bac:	f9 e3       	ldi	r31, 0x39	; 57
     bae:	af 2e       	mov	r10, r31
     bb0:	b1 2c       	mov	r11, r1
     bb2:	f0 2d       	mov	r31, r0
     bb4:	bc 8e       	std	Y+28, r11	; 0x1c
     bb6:	ab 8e       	std	Y+27, r10	; 0x1b
     bb8:	2d e0       	ldi	r18, 0x0D	; 13
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3a af       	std	Y+58, r19	; 0x3a
     bbe:	29 af       	std	Y+57, r18	; 0x39
     bc0:	63 96       	adiw	r28, 0x13	; 19
     bc2:	5f af       	std	Y+63, r21	; 0x3f
     bc4:	4e af       	std	Y+62, r20	; 0x3e
     bc6:	63 97       	sbiw	r28, 0x13	; 19
     bc8:	e6 e1       	ldi	r30, 0x16	; 22
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	67 96       	adiw	r28, 0x17	; 23
     bce:	ff af       	std	Y+63, r31	; 0x3f
     bd0:	ee af       	std	Y+62, r30	; 0x3e
     bd2:	67 97       	sbiw	r28, 0x17	; 23
     bd4:	00 e3       	ldi	r16, 0x30	; 48
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	ab 96       	adiw	r28, 0x2b	; 43
     bda:	1f af       	std	Y+63, r17	; 0x3f
     bdc:	0e af       	std	Y+62, r16	; 0x3e
     bde:	ab 97       	sbiw	r28, 0x2b	; 43
     be0:	c5 57       	subi	r28, 0x75	; 117
     be2:	df 4f       	sbci	r29, 0xFF	; 255
     be4:	39 83       	std	Y+1, r19	; 0x01
     be6:	28 83       	st	Y, r18
     be8:	cb 58       	subi	r28, 0x8B	; 139
     bea:	d0 40       	sbci	r29, 0x00	; 0
     bec:	cd 55       	subi	r28, 0x5D	; 93
     bee:	df 4f       	sbci	r29, 0xFF	; 255
     bf0:	f9 83       	std	Y+1, r31	; 0x01
     bf2:	e8 83       	st	Y, r30
     bf4:	c3 5a       	subi	r28, 0xA3	; 163
     bf6:	d0 40       	sbci	r29, 0x00	; 0
     bf8:	64 e1       	ldi	r22, 0x14	; 20
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	c9 55       	subi	r28, 0x59	; 89
     bfe:	df 4f       	sbci	r29, 0xFF	; 255
     c00:	79 83       	std	Y+1, r23	; 0x01
     c02:	68 83       	st	Y, r22
     c04:	c7 5a       	subi	r28, 0xA7	; 167
     c06:	d0 40       	sbci	r29, 0x00	; 0
     c08:	c3 52       	subi	r28, 0x23	; 35
     c0a:	df 4f       	sbci	r29, 0xFF	; 255
     c0c:	39 83       	std	Y+1, r19	; 0x01
     c0e:	28 83       	st	Y, r18
     c10:	cd 5d       	subi	r28, 0xDD	; 221
     c12:	d0 40       	sbci	r29, 0x00	; 0
     c14:	cb 50       	subi	r28, 0x0B	; 11
     c16:	df 4f       	sbci	r29, 0xFF	; 255
     c18:	79 83       	std	Y+1, r23	; 0x01
     c1a:	68 83       	st	Y, r22
     c1c:	c5 5f       	subi	r28, 0xF5	; 245
     c1e:	d0 40       	sbci	r29, 0x00	; 0
     c20:	c7 50       	subi	r28, 0x07	; 7
     c22:	df 4f       	sbci	r29, 0xFF	; 255
     c24:	79 83       	std	Y+1, r23	; 0x01
     c26:	68 83       	st	Y, r22
     c28:	c9 5f       	subi	r28, 0xF9	; 249
     c2a:	d0 40       	sbci	r29, 0x00	; 0
     c2c:	0f 2e       	mov	r0, r31
     c2e:	f4 e3       	ldi	r31, 0x34	; 52
     c30:	cf 2e       	mov	r12, r31
     c32:	d1 2c       	mov	r13, r1
     c34:	f0 2d       	mov	r31, r0
     c36:	cb 5f       	subi	r28, 0xFB	; 251
     c38:	de 4f       	sbci	r29, 0xFE	; 254
     c3a:	d9 82       	std	Y+1, r13	; 0x01
     c3c:	c8 82       	st	Y, r12
     c3e:	c5 50       	subi	r28, 0x05	; 5
     c40:	d1 40       	sbci	r29, 0x01	; 1
     c42:	c9 5b       	subi	r28, 0xB9	; 185
     c44:	de 4f       	sbci	r29, 0xFE	; 254
     c46:	79 83       	std	Y+1, r23	; 0x01
     c48:	68 83       	st	Y, r22
     c4a:	c7 54       	subi	r28, 0x47	; 71
     c4c:	d1 40       	sbci	r29, 0x01	; 1
     c4e:	c5 5b       	subi	r28, 0xB5	; 181
     c50:	de 4f       	sbci	r29, 0xFE	; 254
     c52:	f9 83       	std	Y+1, r31	; 0x01
     c54:	e8 83       	st	Y, r30
     c56:	cb 54       	subi	r28, 0x4B	; 75
     c58:	d1 40       	sbci	r29, 0x01	; 1
     c5a:	c1 58       	subi	r28, 0x81	; 129
     c5c:	de 4f       	sbci	r29, 0xFE	; 254
     c5e:	39 83       	std	Y+1, r19	; 0x01
     c60:	28 83       	st	Y, r18
     c62:	cf 57       	subi	r28, 0x7F	; 127
     c64:	d1 40       	sbci	r29, 0x01	; 1
     c66:	c7 56       	subi	r28, 0x67	; 103
     c68:	de 4f       	sbci	r29, 0xFE	; 254
     c6a:	f9 83       	std	Y+1, r31	; 0x01
     c6c:	e8 83       	st	Y, r30
     c6e:	c9 59       	subi	r28, 0x99	; 153
     c70:	d1 40       	sbci	r29, 0x01	; 1
     c72:	c3 56       	subi	r28, 0x63	; 99
     c74:	de 4f       	sbci	r29, 0xFE	; 254
     c76:	59 83       	std	Y+1, r21	; 0x01
     c78:	48 83       	st	Y, r20
     c7a:	cd 59       	subi	r28, 0x9D	; 157
     c7c:	d1 40       	sbci	r29, 0x01	; 1
     c7e:	cf 55       	subi	r28, 0x5F	; 95
     c80:	de 4f       	sbci	r29, 0xFE	; 254
     c82:	19 83       	std	Y+1, r17	; 0x01
     c84:	08 83       	st	Y, r16
     c86:	c1 5a       	subi	r28, 0xA1	; 161
     c88:	d1 40       	sbci	r29, 0x01	; 1
     c8a:	cf 52       	subi	r28, 0x2F	; 47
     c8c:	de 4f       	sbci	r29, 0xFE	; 254
     c8e:	39 83       	std	Y+1, r19	; 0x01
     c90:	28 83       	st	Y, r18
     c92:	c1 5d       	subi	r28, 0xD1	; 209
     c94:	d1 40       	sbci	r29, 0x01	; 1
     c96:	c5 51       	subi	r28, 0x15	; 21
     c98:	de 4f       	sbci	r29, 0xFE	; 254
     c9a:	59 83       	std	Y+1, r21	; 0x01
     c9c:	48 83       	st	Y, r20
     c9e:	cb 5e       	subi	r28, 0xEB	; 235
     ca0:	d1 40       	sbci	r29, 0x01	; 1
     ca2:	c1 51       	subi	r28, 0x11	; 17
     ca4:	de 4f       	sbci	r29, 0xFE	; 254
     ca6:	b9 82       	std	Y+1, r11	; 0x01
     ca8:	a8 82       	st	Y, r10
     caa:	cf 5e       	subi	r28, 0xEF	; 239
     cac:	d1 40       	sbci	r29, 0x01	; 1
     cae:	cd 5d       	subi	r28, 0xDD	; 221
     cb0:	dd 4f       	sbci	r29, 0xFD	; 253
     cb2:	39 83       	std	Y+1, r19	; 0x01
     cb4:	28 83       	st	Y, r18
     cb6:	c3 52       	subi	r28, 0x23	; 35
     cb8:	d2 40       	sbci	r29, 0x02	; 2
     cba:	c3 5c       	subi	r28, 0xC3	; 195
     cbc:	dd 4f       	sbci	r29, 0xFD	; 253
     cbe:	b9 82       	std	Y+1, r11	; 0x01
     cc0:	a8 82       	st	Y, r10
     cc2:	cd 53       	subi	r28, 0x3D	; 61
     cc4:	d2 40       	sbci	r29, 0x02	; 2
     cc6:	e1 e2       	ldi	r30, 0x21	; 33
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	cf 5b       	subi	r28, 0xBF	; 191
     ccc:	dd 4f       	sbci	r29, 0xFD	; 253
     cce:	f9 83       	std	Y+1, r31	; 0x01
     cd0:	e8 83       	st	Y, r30
     cd2:	c1 54       	subi	r28, 0x41	; 65
     cd4:	d2 40       	sbci	r29, 0x02	; 2
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f8 e2       	ldi	r31, 0x28	; 40
     cda:	8f 2e       	mov	r8, r31
     cdc:	91 2c       	mov	r9, r1
     cde:	f0 2d       	mov	r31, r0
     ce0:	c7 5a       	subi	r28, 0xA7	; 167
     ce2:	dd 4f       	sbci	r29, 0xFD	; 253
     ce4:	99 82       	std	Y+1, r9	; 0x01
     ce6:	88 82       	st	Y, r8
     ce8:	c9 55       	subi	r28, 0x59	; 89
     cea:	d2 40       	sbci	r29, 0x02	; 2
     cec:	c5 57       	subi	r28, 0x75	; 117
     cee:	dd 4f       	sbci	r29, 0xFD	; 253
     cf0:	19 83       	std	Y+1, r17	; 0x01
     cf2:	08 83       	st	Y, r16
     cf4:	cb 58       	subi	r28, 0x8B	; 139
     cf6:	d2 40       	sbci	r29, 0x02	; 2
     cf8:	c1 57       	subi	r28, 0x71	; 113
     cfa:	dd 4f       	sbci	r29, 0xFD	; 253
     cfc:	f9 83       	std	Y+1, r31	; 0x01
     cfe:	e8 83       	st	Y, r30
     d00:	cf 58       	subi	r28, 0x8F	; 143
     d02:	d2 40       	sbci	r29, 0x02	; 2
     d04:	aa e1       	ldi	r26, 0x1A	; 26
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	cd 56       	subi	r28, 0x6D	; 109
     d0a:	dd 4f       	sbci	r29, 0xFD	; 253
     d0c:	b9 83       	std	Y+1, r27	; 0x01
     d0e:	a8 83       	st	Y, r26
     d10:	c3 59       	subi	r28, 0x93	; 147
     d12:	d2 40       	sbci	r29, 0x02	; 2
     d14:	cf 51       	subi	r28, 0x1F	; 31
     d16:	dd 4f       	sbci	r29, 0xFD	; 253
     d18:	b9 83       	std	Y+1, r27	; 0x01
     d1a:	a8 83       	st	Y, r26
     d1c:	c1 5e       	subi	r28, 0xE1	; 225
     d1e:	d2 40       	sbci	r29, 0x02	; 2
     d20:	0f 2e       	mov	r0, r31
     d22:	fd e1       	ldi	r31, 0x1D	; 29
     d24:	ef 2e       	mov	r14, r31
     d26:	f1 2c       	mov	r15, r1
     d28:	f0 2d       	mov	r31, r0
     d2a:	cb 51       	subi	r28, 0x1B	; 27
     d2c:	dd 4f       	sbci	r29, 0xFD	; 253
     d2e:	f9 82       	std	Y+1, r15	; 0x01
     d30:	e8 82       	st	Y, r14
     d32:	c5 5e       	subi	r28, 0xE5	; 229
     d34:	d2 40       	sbci	r29, 0x02	; 2
     d36:	41 e1       	ldi	r20, 0x11	; 17
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	cb 50       	subi	r28, 0x0B	; 11
     d3c:	dd 4f       	sbci	r29, 0xFD	; 253
     d3e:	59 83       	std	Y+1, r21	; 0x01
     d40:	48 83       	st	Y, r20
     d42:	c5 5f       	subi	r28, 0xF5	; 245
     d44:	d2 40       	sbci	r29, 0x02	; 2
     d46:	c9 5d       	subi	r28, 0xD9	; 217
     d48:	dc 4f       	sbci	r29, 0xFC	; 252
     d4a:	d9 82       	std	Y+1, r13	; 0x01
     d4c:	c8 82       	st	Y, r12
     d4e:	c7 52       	subi	r28, 0x27	; 39
     d50:	d3 40       	sbci	r29, 0x03	; 3
     d52:	cd 5c       	subi	r28, 0xCD	; 205
     d54:	dc 4f       	sbci	r29, 0xFC	; 252
     d56:	f9 82       	std	Y+1, r15	; 0x01
     d58:	e8 82       	st	Y, r14
     d5a:	c3 53       	subi	r28, 0x33	; 51
     d5c:	d3 40       	sbci	r29, 0x03	; 3
     d5e:	c9 5c       	subi	r28, 0xC9	; 201
     d60:	dc 4f       	sbci	r29, 0xFC	; 252
     d62:	f9 82       	std	Y+1, r15	; 0x01
     d64:	e8 82       	st	Y, r14
     d66:	c7 53       	subi	r28, 0x37	; 55
     d68:	d3 40       	sbci	r29, 0x03	; 3
     d6a:	0f 2e       	mov	r0, r31
     d6c:	f9 e1       	ldi	r31, 0x19	; 25
     d6e:	cf 2e       	mov	r12, r31
     d70:	d1 2c       	mov	r13, r1
     d72:	f0 2d       	mov	r31, r0
     d74:	c9 5a       	subi	r28, 0xA9	; 169
     d76:	dc 4f       	sbci	r29, 0xFC	; 252
     d78:	d9 82       	std	Y+1, r13	; 0x01
     d7a:	c8 82       	st	Y, r12
     d7c:	c7 55       	subi	r28, 0x57	; 87
     d7e:	d3 40       	sbci	r29, 0x03	; 3
     d80:	cb 57       	subi	r28, 0x7B	; 123
     d82:	dc 4f       	sbci	r29, 0xFC	; 252
     d84:	f9 82       	std	Y+1, r15	; 0x01
     d86:	e8 82       	st	Y, r14
     d88:	c5 58       	subi	r28, 0x85	; 133
     d8a:	d3 40       	sbci	r29, 0x03	; 3
     d8c:	c7 57       	subi	r28, 0x77	; 119
     d8e:	dc 4f       	sbci	r29, 0xFC	; 252
     d90:	b9 83       	std	Y+1, r27	; 0x01
     d92:	a8 83       	st	Y, r26
     d94:	c9 58       	subi	r28, 0x89	; 137
     d96:	d3 40       	sbci	r29, 0x03	; 3
     d98:	cf 56       	subi	r28, 0x6F	; 111
     d9a:	dc 4f       	sbci	r29, 0xFC	; 252
     d9c:	59 83       	std	Y+1, r21	; 0x01
     d9e:	48 83       	st	Y, r20
     da0:	c1 59       	subi	r28, 0x91	; 145
     da2:	d3 40       	sbci	r29, 0x03	; 3
     da4:	cd 53       	subi	r28, 0x3D	; 61
     da6:	dc 4f       	sbci	r29, 0xFC	; 252
     da8:	19 83       	std	Y+1, r17	; 0x01
     daa:	08 83       	st	Y, r16
     dac:	c3 5c       	subi	r28, 0xC3	; 195
     dae:	d3 40       	sbci	r29, 0x03	; 3
     db0:	c9 52       	subi	r28, 0x29	; 41
     db2:	dc 4f       	sbci	r29, 0xFC	; 252
     db4:	b9 83       	std	Y+1, r27	; 0x01
     db6:	a8 83       	st	Y, r26
     db8:	c7 5d       	subi	r28, 0xD7	; 215
     dba:	d3 40       	sbci	r29, 0x03	; 3
     dbc:	c5 52       	subi	r28, 0x25	; 37
     dbe:	dc 4f       	sbci	r29, 0xFC	; 252
     dc0:	f9 83       	std	Y+1, r31	; 0x01
     dc2:	e8 83       	st	Y, r30
     dc4:	cb 5d       	subi	r28, 0xDB	; 219
     dc6:	d3 40       	sbci	r29, 0x03	; 3
     dc8:	cf 5e       	subi	r28, 0xEF	; 239
     dca:	db 4f       	sbci	r29, 0xFB	; 251
     dcc:	b9 82       	std	Y+1, r11	; 0x01
     dce:	a8 82       	st	Y, r10
     dd0:	c1 51       	subi	r28, 0x11	; 17
     dd2:	d4 40       	sbci	r29, 0x04	; 4
     dd4:	c7 5d       	subi	r28, 0xD7	; 215
     dd6:	db 4f       	sbci	r29, 0xFB	; 251
     dd8:	f9 83       	std	Y+1, r31	; 0x01
     dda:	e8 83       	st	Y, r30
     ddc:	c9 52       	subi	r28, 0x29	; 41
     dde:	d4 40       	sbci	r29, 0x04	; 4
     de0:	c3 5d       	subi	r28, 0xD3	; 211
     de2:	db 4f       	sbci	r29, 0xFB	; 251
     de4:	99 82       	std	Y+1, r9	; 0x01
     de6:	88 82       	st	Y, r8
     de8:	cd 52       	subi	r28, 0x2D	; 45
     dea:	d4 40       	sbci	r29, 0x04	; 4
     dec:	c5 58       	subi	r28, 0x85	; 133
     dee:	db 4f       	sbci	r29, 0xFB	; 251
     df0:	99 82       	std	Y+1, r9	; 0x01
     df2:	88 82       	st	Y, r8
     df4:	cb 57       	subi	r28, 0x7B	; 123
     df6:	d4 40       	sbci	r29, 0x04	; 4
     df8:	a7 e1       	ldi	r26, 0x17	; 23
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	c1 58       	subi	r28, 0x81	; 129
     dfe:	db 4f       	sbci	r29, 0xFB	; 251
     e00:	b9 83       	std	Y+1, r27	; 0x01
     e02:	a8 83       	st	Y, r26
     e04:	cf 57       	subi	r28, 0x7F	; 127
     e06:	d4 40       	sbci	r29, 0x04	; 4
     e08:	c3 57       	subi	r28, 0x73	; 115
     e0a:	db 4f       	sbci	r29, 0xFB	; 251
     e0c:	59 83       	std	Y+1, r21	; 0x01
     e0e:	48 83       	st	Y, r20
     e10:	cd 58       	subi	r28, 0x8D	; 141
     e12:	d4 40       	sbci	r29, 0x04	; 4
     e14:	c3 53       	subi	r28, 0x33	; 51
     e16:	db 4f       	sbci	r29, 0xFB	; 251
     e18:	b9 83       	std	Y+1, r27	; 0x01
     e1a:	a8 83       	st	Y, r26
     e1c:	cd 5c       	subi	r28, 0xCD	; 205
     e1e:	d4 40       	sbci	r29, 0x04	; 4
     e20:	cf 52       	subi	r28, 0x2F	; 47
     e22:	db 4f       	sbci	r29, 0xFB	; 251
     e24:	79 83       	std	Y+1, r23	; 0x01
     e26:	68 83       	st	Y, r22
     e28:	c1 5d       	subi	r28, 0xD1	; 209
     e2a:	d4 40       	sbci	r29, 0x04	; 4
     e2c:	c9 50       	subi	r28, 0x09	; 9
     e2e:	db 4f       	sbci	r29, 0xFB	; 251
     e30:	39 83       	std	Y+1, r19	; 0x01
     e32:	28 83       	st	Y, r18
     e34:	c7 5f       	subi	r28, 0xF7	; 247
     e36:	d4 40       	sbci	r29, 0x04	; 4
     e38:	c9 5e       	subi	r28, 0xE9	; 233
     e3a:	da 4f       	sbci	r29, 0xFA	; 250
     e3c:	59 83       	std	Y+1, r21	; 0x01
     e3e:	48 83       	st	Y, r20
     e40:	c7 51       	subi	r28, 0x17	; 23
     e42:	d5 40       	sbci	r29, 0x05	; 5
     e44:	c1 5e       	subi	r28, 0xE1	; 225
     e46:	da 4f       	sbci	r29, 0xFA	; 250
     e48:	79 83       	std	Y+1, r23	; 0x01
     e4a:	68 83       	st	Y, r22
     e4c:	cf 51       	subi	r28, 0x1F	; 31
     e4e:	d5 40       	sbci	r29, 0x05	; 5
     e50:	02 e3       	ldi	r16, 0x32	; 50
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	cd 5d       	subi	r28, 0xDD	; 221
     e56:	da 4f       	sbci	r29, 0xFA	; 250
     e58:	19 83       	std	Y+1, r17	; 0x01
     e5a:	08 83       	st	Y, r16
     e5c:	c3 52       	subi	r28, 0x23	; 35
     e5e:	d5 40       	sbci	r29, 0x05	; 5
     e60:	cf 58       	subi	r28, 0x8F	; 143
     e62:	da 4f       	sbci	r29, 0xFA	; 250
     e64:	19 83       	std	Y+1, r17	; 0x01
     e66:	08 83       	st	Y, r16
     e68:	c1 57       	subi	r28, 0x71	; 113
     e6a:	d5 40       	sbci	r29, 0x05	; 5
     e6c:	cb 58       	subi	r28, 0x8B	; 139
     e6e:	da 4f       	sbci	r29, 0xFA	; 250
     e70:	19 83       	std	Y+1, r17	; 0x01
     e72:	08 83       	st	Y, r16
     e74:	c5 57       	subi	r28, 0x75	; 117
     e76:	d5 40       	sbci	r29, 0x05	; 5
     e78:	e5 e2       	ldi	r30, 0x25	; 37
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	c1 58       	subi	r28, 0x81	; 129
     e7e:	da 4f       	sbci	r29, 0xFA	; 250
     e80:	f9 83       	std	Y+1, r31	; 0x01
     e82:	e8 83       	st	Y, r30
     e84:	cf 57       	subi	r28, 0x7F	; 127
     e86:	d5 40       	sbci	r29, 0x05	; 5
     e88:	cd 54       	subi	r28, 0x4D	; 77
     e8a:	da 4f       	sbci	r29, 0xFA	; 250
     e8c:	59 83       	std	Y+1, r21	; 0x01
     e8e:	48 83       	st	Y, r20
     e90:	c3 5b       	subi	r28, 0xB3	; 179
     e92:	d5 40       	sbci	r29, 0x05	; 5
     e94:	cd 53       	subi	r28, 0x3D	; 61
     e96:	da 4f       	sbci	r29, 0xFA	; 250
     e98:	19 83       	std	Y+1, r17	; 0x01
     e9a:	08 83       	st	Y, r16
     e9c:	c3 5c       	subi	r28, 0xC3	; 195
     e9e:	d5 40       	sbci	r29, 0x05	; 5
     ea0:	c9 53       	subi	r28, 0x39	; 57
     ea2:	da 4f       	sbci	r29, 0xFA	; 250
     ea4:	79 83       	std	Y+1, r23	; 0x01
     ea6:	68 83       	st	Y, r22
     ea8:	c7 5c       	subi	r28, 0xC7	; 199
     eaa:	d5 40       	sbci	r29, 0x05	; 5
     eac:	cb 5e       	subi	r28, 0xEB	; 235
     eae:	d9 4f       	sbci	r29, 0xF9	; 249
     eb0:	79 83       	std	Y+1, r23	; 0x01
     eb2:	68 83       	st	Y, r22
     eb4:	c5 51       	subi	r28, 0x15	; 21
     eb6:	d6 40       	sbci	r29, 0x06	; 6
     eb8:	c7 5e       	subi	r28, 0xE7	; 231
     eba:	d9 4f       	sbci	r29, 0xF9	; 249
     ebc:	b9 83       	std	Y+1, r27	; 0x01
     ebe:	a8 83       	st	Y, r26
     ec0:	c9 51       	subi	r28, 0x19	; 25
     ec2:	d6 40       	sbci	r29, 0x06	; 6
     ec4:	c7 5c       	subi	r28, 0xC7	; 199
     ec6:	d9 4f       	sbci	r29, 0xF9	; 249
     ec8:	39 83       	std	Y+1, r19	; 0x01
     eca:	28 83       	st	Y, r18
     ecc:	c9 53       	subi	r28, 0x39	; 57
     ece:	d6 40       	sbci	r29, 0x06	; 6
     ed0:	c1 5b       	subi	r28, 0xB1	; 177
     ed2:	d9 4f       	sbci	r29, 0xF9	; 249
     ed4:	99 82       	std	Y+1, r9	; 0x01
     ed6:	88 82       	st	Y, r8
     ed8:	cf 54       	subi	r28, 0x4F	; 79
     eda:	d6 40       	sbci	r29, 0x06	; 6
     edc:	c9 59       	subi	r28, 0x99	; 153
     ede:	d9 4f       	sbci	r29, 0xF9	; 249
     ee0:	b9 83       	std	Y+1, r27	; 0x01
     ee2:	a8 83       	st	Y, r26
     ee4:	c7 56       	subi	r28, 0x67	; 103
     ee6:	d6 40       	sbci	r29, 0x06	; 6
     ee8:	c5 59       	subi	r28, 0x95	; 149
     eea:	d9 4f       	sbci	r29, 0xF9	; 249
     eec:	59 83       	std	Y+1, r21	; 0x01
     eee:	48 83       	st	Y, r20
     ef0:	cb 56       	subi	r28, 0x6B	; 107
     ef2:	d6 40       	sbci	r29, 0x06	; 6
     ef4:	c7 54       	subi	r28, 0x47	; 71
     ef6:	d9 4f       	sbci	r29, 0xF9	; 249
     ef8:	59 83       	std	Y+1, r21	; 0x01
     efa:	48 83       	st	Y, r20
     efc:	c9 5b       	subi	r28, 0xB9	; 185
     efe:	d6 40       	sbci	r29, 0x06	; 6
     f00:	c5 52       	subi	r28, 0x25	; 37
     f02:	d9 4f       	sbci	r29, 0xF9	; 249
     f04:	39 83       	std	Y+1, r19	; 0x01
     f06:	28 83       	st	Y, r18
     f08:	cb 5d       	subi	r28, 0xDB	; 219
     f0a:	d6 40       	sbci	r29, 0x06	; 6
     f0c:	c3 50       	subi	r28, 0x03	; 3
     f0e:	d9 4f       	sbci	r29, 0xF9	; 249
     f10:	59 83       	std	Y+1, r21	; 0x01
     f12:	48 83       	st	Y, r20
     f14:	cd 5f       	subi	r28, 0xFD	; 253
     f16:	d6 40       	sbci	r29, 0x06	; 6
     f18:	cb 5d       	subi	r28, 0xDB	; 219
     f1a:	d8 4f       	sbci	r29, 0xF8	; 248
     f1c:	39 83       	std	Y+1, r19	; 0x01
     f1e:	28 83       	st	Y, r18
     f20:	c5 52       	subi	r28, 0x25	; 37
     f22:	d7 40       	sbci	r29, 0x07	; 7
     f24:	cd 5a       	subi	r28, 0xAD	; 173
     f26:	d8 4f       	sbci	r29, 0xF8	; 248
     f28:	f9 83       	std	Y+1, r31	; 0x01
     f2a:	e8 83       	st	Y, r30
     f2c:	c3 55       	subi	r28, 0x53	; 83
     f2e:	d7 40       	sbci	r29, 0x07	; 7
     f30:	cf 59       	subi	r28, 0x9F	; 159
     f32:	d8 4f       	sbci	r29, 0xF8	; 248
     f34:	f9 83       	std	Y+1, r31	; 0x01
     f36:	e8 83       	st	Y, r30
     f38:	c1 56       	subi	r28, 0x61	; 97
     f3a:	d7 40       	sbci	r29, 0x07	; 7
     f3c:	c1 55       	subi	r28, 0x51	; 81
     f3e:	d8 4f       	sbci	r29, 0xF8	; 248
     f40:	f9 83       	std	Y+1, r31	; 0x01
     f42:	e8 83       	st	Y, r30
     f44:	cf 5a       	subi	r28, 0xAF	; 175
     f46:	d7 40       	sbci	r29, 0x07	; 7
     f48:	4c e3       	ldi	r20, 0x3C	; 60
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	cd 54       	subi	r28, 0x4D	; 77
     f4e:	d8 4f       	sbci	r29, 0xF8	; 248
     f50:	59 83       	std	Y+1, r21	; 0x01
     f52:	48 83       	st	Y, r20
     f54:	c3 5b       	subi	r28, 0xB3	; 179
     f56:	d7 40       	sbci	r29, 0x07	; 7
     f58:	cb 54       	subi	r28, 0x4B	; 75
     f5a:	d8 4f       	sbci	r29, 0xF8	; 248
     f5c:	59 83       	std	Y+1, r21	; 0x01
     f5e:	48 83       	st	Y, r20
     f60:	c5 5b       	subi	r28, 0xB5	; 181
     f62:	d7 40       	sbci	r29, 0x07	; 7
     f64:	cf 5f       	subi	r28, 0xFF	; 255
     f66:	d7 4f       	sbci	r29, 0xF7	; 247
     f68:	59 83       	std	Y+1, r21	; 0x01
     f6a:	48 83       	st	Y, r20
     f6c:	c1 50       	subi	r28, 0x01	; 1
     f6e:	d8 40       	sbci	r29, 0x08	; 8
     f70:	c3 5e       	subi	r28, 0xE3	; 227
     f72:	d7 4f       	sbci	r29, 0xF7	; 247
     f74:	39 83       	std	Y+1, r19	; 0x01
     f76:	28 83       	st	Y, r18
     f78:	cd 51       	subi	r28, 0x1D	; 29
     f7a:	d8 40       	sbci	r29, 0x08	; 8
     f7c:	cf 5a       	subi	r28, 0xAF	; 175
     f7e:	d7 4f       	sbci	r29, 0xF7	; 247
     f80:	59 83       	std	Y+1, r21	; 0x01
     f82:	48 83       	st	Y, r20
     f84:	c1 55       	subi	r28, 0x51	; 81
     f86:	d8 40       	sbci	r29, 0x08	; 8
     f88:	c1 59       	subi	r28, 0x91	; 145
     f8a:	d7 4f       	sbci	r29, 0xF7	; 247
     f8c:	39 83       	std	Y+1, r19	; 0x01
     f8e:	28 83       	st	Y, r18
     f90:	cf 56       	subi	r28, 0x6F	; 111
     f92:	d8 40       	sbci	r29, 0x08	; 8
     f94:	cb 57       	subi	r28, 0x7B	; 123
     f96:	d7 4f       	sbci	r29, 0xF7	; 247
     f98:	d9 82       	std	Y+1, r13	; 0x01
     f9a:	c8 82       	st	Y, r12
     f9c:	c5 58       	subi	r28, 0x85	; 133
     f9e:	d8 40       	sbci	r29, 0x08	; 8
     fa0:	cf 53       	subi	r28, 0x3F	; 63
     fa2:	d7 4f       	sbci	r29, 0xF7	; 247
     fa4:	39 83       	std	Y+1, r19	; 0x01
     fa6:	28 83       	st	Y, r18
     fa8:	c1 5c       	subi	r28, 0xC1	; 193
     faa:	d8 40       	sbci	r29, 0x08	; 8
     fac:	cd 5e       	subi	r28, 0xED	; 237
     fae:	d6 4f       	sbci	r29, 0xF6	; 246
     fb0:	39 83       	std	Y+1, r19	; 0x01
     fb2:	28 83       	st	Y, r18
     fb4:	c3 51       	subi	r28, 0x13	; 19
     fb6:	d9 40       	sbci	r29, 0x09	; 9
     fb8:	cb 59       	subi	r28, 0x9B	; 155
     fba:	d6 4f       	sbci	r29, 0xF6	; 246
     fbc:	39 83       	std	Y+1, r19	; 0x01
     fbe:	28 83       	st	Y, r18
     fc0:	c5 56       	subi	r28, 0x65	; 101
     fc2:	d9 40       	sbci	r29, 0x09	; 9
     fc4:	c7 54       	subi	r28, 0x47	; 71
     fc6:	d6 4f       	sbci	r29, 0xF6	; 246
     fc8:	39 83       	std	Y+1, r19	; 0x01
     fca:	28 83       	st	Y, r18
     fcc:	c9 5b       	subi	r28, 0xB9	; 185
     fce:	d9 40       	sbci	r29, 0x09	; 9
     fd0:	c5 5f       	subi	r28, 0xF5	; 245
     fd2:	d5 4f       	sbci	r29, 0xF5	; 245
     fd4:	39 83       	std	Y+1, r19	; 0x01
     fd6:	28 83       	st	Y, r18
     fd8:	cb 50       	subi	r28, 0x0B	; 11
     fda:	da 40       	sbci	r29, 0x0A	; 10
     fdc:	c3 5a       	subi	r28, 0xA3	; 163
     fde:	d5 4f       	sbci	r29, 0xF5	; 245
     fe0:	39 83       	std	Y+1, r19	; 0x01
     fe2:	28 83       	st	Y, r18
     fe4:	cd 55       	subi	r28, 0x5D	; 93
     fe6:	da 40       	sbci	r29, 0x0A	; 10
     fe8:	c3 53       	subi	r28, 0x33	; 51
     fea:	d5 4f       	sbci	r29, 0xF5	; 245
     fec:	39 83       	std	Y+1, r19	; 0x01
     fee:	28 83       	st	Y, r18
     ff0:	cd 5c       	subi	r28, 0xCD	; 205
     ff2:	da 40       	sbci	r29, 0x0A	; 10
     ff4:	c1 5f       	subi	r28, 0xF1	; 241
     ff6:	d4 4f       	sbci	r29, 0xF4	; 244
     ff8:	39 83       	std	Y+1, r19	; 0x01
     ffa:	28 83       	st	Y, r18
     ffc:	cf 50       	subi	r28, 0x0F	; 15
     ffe:	db 40       	sbci	r29, 0x0B	; 11
    1000:	c9 59       	subi	r28, 0x99	; 153
    1002:	d4 4f       	sbci	r29, 0xF4	; 244
    1004:	39 83       	std	Y+1, r19	; 0x01
    1006:	28 83       	st	Y, r18
    1008:	c7 56       	subi	r28, 0x67	; 103
    100a:	db 40       	sbci	r29, 0x0B	; 11
    100c:	c5 54       	subi	r28, 0x45	; 69
    100e:	d4 4f       	sbci	r29, 0xF4	; 244
    1010:	39 83       	std	Y+1, r19	; 0x01
    1012:	28 83       	st	Y, r18
    1014:	cb 5b       	subi	r28, 0xBB	; 187
    1016:	db 40       	sbci	r29, 0x0B	; 11
    1018:	cd 5e       	subi	r28, 0xED	; 237
    101a:	d3 4f       	sbci	r29, 0xF3	; 243
    101c:	39 83       	std	Y+1, r19	; 0x01
    101e:	28 83       	st	Y, r18
    1020:	c3 51       	subi	r28, 0x13	; 19
    1022:	dc 40       	sbci	r29, 0x0C	; 12
    1024:	cb 59       	subi	r28, 0x9B	; 155
    1026:	d3 4f       	sbci	r29, 0xF3	; 243
    1028:	39 83       	std	Y+1, r19	; 0x01
    102a:	28 83       	st	Y, r18
    102c:	c5 56       	subi	r28, 0x65	; 101
    102e:	dc 40       	sbci	r29, 0x0C	; 12
    1030:	28 e2       	ldi	r18, 0x28	; 40
    1032:	cd 57       	subi	r28, 0x7D	; 125
    1034:	d3 4f       	sbci	r29, 0xF3	; 243
    1036:	48 81       	ld	r20, Y
    1038:	59 81       	ldd	r21, Y+1	; 0x01
    103a:	c3 58       	subi	r28, 0x83	; 131
    103c:	dc 40       	sbci	r29, 0x0C	; 12
    103e:	24 9f       	mul	r18, r20
    1040:	f0 01       	movw	r30, r0
    1042:	25 9f       	mul	r18, r21
    1044:	f0 0d       	add	r31, r0
    1046:	11 24       	eor	r1, r1
    1048:	cb 57       	subi	r28, 0x7B	; 123
    104a:	d3 4f       	sbci	r29, 0xF3	; 243
    104c:	48 81       	ld	r20, Y
    104e:	59 81       	ldd	r21, Y+1	; 0x01
    1050:	c5 58       	subi	r28, 0x85	; 133
    1052:	dc 40       	sbci	r29, 0x0C	; 12
    1054:	e4 0f       	add	r30, r20
    1056:	f5 1f       	adc	r31, r21
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	11 82       	std	Z+1, r1	; 0x01
    1062:	10 82       	st	Z, r1
    1064:	24 9f       	mul	r18, r20
    1066:	f0 01       	movw	r30, r0
    1068:	25 9f       	mul	r18, r21
    106a:	f0 0d       	add	r31, r0
    106c:	11 24       	eor	r1, r1
    106e:	cd 57       	subi	r28, 0x7D	; 125
    1070:	d3 4f       	sbci	r29, 0xF3	; 243
    1072:	48 81       	ld	r20, Y
    1074:	59 81       	ldd	r21, Y+1	; 0x01
    1076:	c3 58       	subi	r28, 0x83	; 131
    1078:	dc 40       	sbci	r29, 0x0C	; 12
    107a:	e4 0f       	add	r30, r20
    107c:	f5 1f       	adc	r31, r21
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	e8 0f       	add	r30, r24
    1084:	f9 1f       	adc	r31, r25
    1086:	11 82       	std	Z+1, r1	; 0x01
    1088:	10 82       	st	Z, r1
    108a:	24 9d       	mul	r18, r4
    108c:	f0 01       	movw	r30, r0
    108e:	25 9d       	mul	r18, r5
    1090:	f0 0d       	add	r31, r0
    1092:	11 24       	eor	r1, r1
    1094:	e6 0d       	add	r30, r6
    1096:	f7 1d       	adc	r31, r7
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	e8 0f       	add	r30, r24
    109e:	f9 1f       	adc	r31, r25
    10a0:	11 82       	std	Z+1, r1	; 0x01
    10a2:	10 82       	st	Z, r1
    10a4:	26 9d       	mul	r18, r6
    10a6:	f0 01       	movw	r30, r0
    10a8:	27 9d       	mul	r18, r7
    10aa:	f0 0d       	add	r31, r0
    10ac:	11 24       	eor	r1, r1
    10ae:	e4 0d       	add	r30, r4
    10b0:	f5 1d       	adc	r31, r5
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	e8 0f       	add	r30, r24
    10b8:	f9 1f       	adc	r31, r25
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	10 82       	st	Z, r1
    10be:	c9 57       	subi	r28, 0x79	; 121
    10c0:	d3 4f       	sbci	r29, 0xF3	; 243
    10c2:	48 81       	ld	r20, Y
    10c4:	59 81       	ldd	r21, Y+1	; 0x01
    10c6:	c7 58       	subi	r28, 0x87	; 135
    10c8:	dc 40       	sbci	r29, 0x0C	; 12
    10ca:	24 9f       	mul	r18, r20
    10cc:	f0 01       	movw	r30, r0
    10ce:	25 9f       	mul	r18, r21
    10d0:	f0 0d       	add	r31, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	e2 0d       	add	r30, r2
    10d6:	f3 1d       	adc	r31, r3
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	11 82       	std	Z+1, r1	; 0x01
    10e2:	10 82       	st	Z, r1
    10e4:	22 9d       	mul	r18, r2
    10e6:	f0 01       	movw	r30, r0
    10e8:	23 9d       	mul	r18, r3
    10ea:	f0 0d       	add	r31, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	e4 0f       	add	r30, r20
    10f0:	f5 1f       	adc	r31, r21
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	e8 0f       	add	r30, r24
    10f8:	f9 1f       	adc	r31, r25
    10fa:	11 82       	std	Z+1, r1	; 0x01
    10fc:	10 82       	st	Z, r1
    10fe:	c7 57       	subi	r28, 0x77	; 119
    1100:	d3 4f       	sbci	r29, 0xF3	; 243
    1102:	48 81       	ld	r20, Y
    1104:	59 81       	ldd	r21, Y+1	; 0x01
    1106:	c9 58       	subi	r28, 0x89	; 137
    1108:	dc 40       	sbci	r29, 0x0C	; 12
    110a:	cf 57       	subi	r28, 0x7F	; 127
    110c:	d3 4f       	sbci	r29, 0xF3	; 243
    110e:	68 81       	ld	r22, Y
    1110:	79 81       	ldd	r23, Y+1	; 0x01
    1112:	c1 58       	subi	r28, 0x81	; 129
    1114:	dc 40       	sbci	r29, 0x0C	; 12
    1116:	04 dc       	rcall	.-2040   	; 0x920 <dijkstra>
    1118:	c6 57       	subi	r28, 0x76	; 118
    111a:	d3 4f       	sbci	r29, 0xF3	; 243
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	7f 90       	pop	r7
    1140:	6f 90       	pop	r6
    1142:	5f 90       	pop	r5
    1144:	4f 90       	pop	r4
    1146:	3f 90       	pop	r3
    1148:	2f 90       	pop	r2
    114a:	08 95       	ret

0000114c <find_size_of_bot>:
    114c:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <sizebot+0x1>
    1150:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <sizebot>
    1154:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <bot>
    1158:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <bot+0x1>
    115c:	89 31       	cpi	r24, 0x19	; 25
    115e:	9c 4f       	sbci	r25, 0xFC	; 252
    1160:	f1 f4       	brne	.+60     	; 0x119e <find_size_of_bot+0x52>
    1162:	0c c0       	rjmp	.+24     	; 0x117c <find_size_of_bot+0x30>
    1164:	58 2f       	mov	r21, r24
    1166:	49 2f       	mov	r20, r25
    1168:	21 91       	ld	r18, Z+
    116a:	31 91       	ld	r19, Z+
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	29 31       	cpi	r18, 0x19	; 25
    1170:	3c 4f       	sbci	r19, 0xFC	; 252
    1172:	c1 f7       	brne	.-16     	; 0x1164 <find_size_of_bot+0x18>
    1174:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <sizebot>
    1178:	40 93 73 02 	sts	0x0273, r20	; 0x800273 <sizebot+0x1>
    117c:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <sizebot+0x1>
    1180:	8f 93       	push	r24
    1182:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <sizebot>
    1186:	8f 93       	push	r24
    1188:	83 e3       	ldi	r24, 0x33	; 51
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	0e 94 9c 22 	call	0x4538	; 0x4538 <printf>
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	08 95       	ret
    119e:	e0 e2       	ldi	r30, 0x20	; 32
    11a0:	f3 e0       	ldi	r31, 0x03	; 3
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	de cf       	rjmp	.-68     	; 0x1164 <find_size_of_bot+0x18>

000011a8 <find_size_of_path>:
    11a8:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <sizepath+0x1>
    11ac:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <sizepath>
    11b0:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <path>
    11b4:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <path+0x1>
    11b8:	89 31       	cpi	r24, 0x19	; 25
    11ba:	9c 4f       	sbci	r25, 0xFC	; 252
    11bc:	21 f5       	brne	.+72     	; 0x1206 <find_size_of_path+0x5e>
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <find_size_of_path+0x3c>
    11c0:	21 91       	ld	r18, Z+
    11c2:	31 91       	ld	r19, Z+
    11c4:	29 31       	cpi	r18, 0x19	; 25
    11c6:	3c 4f       	sbci	r19, 0xFC	; 252
    11c8:	29 f4       	brne	.+10     	; 0x11d4 <find_size_of_path+0x2c>
    11ca:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <sizepath+0x1>
    11ce:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <sizepath>
    11d2:	08 c0       	rjmp	.+16     	; 0x11e4 <find_size_of_path+0x3c>
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	e4 17       	cp	r30, r20
    11d8:	f5 07       	cpc	r31, r21
    11da:	91 f7       	brne	.-28     	; 0x11c0 <find_size_of_path+0x18>
    11dc:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <sizepath+0x1>
    11e0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <sizepath>
    11e4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <sizepath+0x1>
    11e8:	8f 93       	push	r24
    11ea:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <sizepath>
    11ee:	8f 93       	push	r24
    11f0:	83 e4       	ldi	r24, 0x43	; 67
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	0e 94 9c 22 	call	0x4538	; 0x4538 <printf>
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	08 95       	ret
    1206:	ed e7       	ldi	r30, 0x7D	; 125
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	4b ec       	ldi	r20, 0xCB	; 203
    120c:	52 e0       	ldi	r21, 0x02	; 2
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	d6 cf       	rjmp	.-84     	; 0x11c0 <find_size_of_path+0x18>

00001214 <pick>:
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	0f 2e       	mov	r0, r31
    1226:	fb e9       	ldi	r31, 0x9B	; 155
    1228:	cf 2e       	mov	r12, r31
    122a:	d1 2c       	mov	r13, r1
    122c:	f0 2d       	mov	r31, r0
    122e:	f6 01       	movw	r30, r12
    1230:	10 82       	st	Z, r1
    1232:	0f 2e       	mov	r0, r31
    1234:	fa e9       	ldi	r31, 0x9A	; 154
    1236:	ef 2e       	mov	r14, r31
    1238:	f1 2c       	mov	r15, r1
    123a:	f0 2d       	mov	r31, r0
    123c:	83 e4       	ldi	r24, 0x43	; 67
    123e:	f7 01       	movw	r30, r14
    1240:	80 83       	st	Z, r24
    1242:	ff ef       	ldi	r31, 0xFF	; 255
    1244:	28 e0       	ldi	r18, 0x08	; 8
    1246:	3d e3       	ldi	r19, 0x3D	; 61
    1248:	f1 50       	subi	r31, 0x01	; 1
    124a:	20 40       	sbci	r18, 0x00	; 0
    124c:	30 40       	sbci	r19, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <pick+0x34>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <pick+0x3e>
    1252:	00 00       	nop
    1254:	0e 94 1a 01 	call	0x234	; 0x234 <servo_1_free>
    1258:	0d e9       	ldi	r16, 0x9D	; 157
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	f8 01       	movw	r30, r16
    125e:	10 82       	st	Z, r1
    1260:	cc e9       	ldi	r28, 0x9C	; 156
    1262:	d0 e0       	ldi	r29, 0x00	; 0
    1264:	83 e5       	ldi	r24, 0x53	; 83
    1266:	88 83       	st	Y, r24
    1268:	ff ef       	ldi	r31, 0xFF	; 255
    126a:	28 e0       	ldi	r18, 0x08	; 8
    126c:	3d e3       	ldi	r19, 0x3D	; 61
    126e:	f1 50       	subi	r31, 0x01	; 1
    1270:	20 40       	sbci	r18, 0x00	; 0
    1272:	30 40       	sbci	r19, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <pick+0x5a>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <pick+0x64>
    1278:	00 00       	nop
    127a:	0e 94 21 01 	call	0x242	; 0x242 <servo_2_free>
    127e:	f6 01       	movw	r30, r12
    1280:	10 82       	st	Z, r1
    1282:	83 e2       	ldi	r24, 0x23	; 35
    1284:	f7 01       	movw	r30, r14
    1286:	80 83       	st	Z, r24
    1288:	ff ef       	ldi	r31, 0xFF	; 255
    128a:	28 e0       	ldi	r18, 0x08	; 8
    128c:	3d e3       	ldi	r19, 0x3D	; 61
    128e:	f1 50       	subi	r31, 0x01	; 1
    1290:	20 40       	sbci	r18, 0x00	; 0
    1292:	30 40       	sbci	r19, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <pick+0x7a>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <pick+0x84>
    1298:	00 00       	nop
    129a:	f8 01       	movw	r30, r16
    129c:	10 82       	st	Z, r1
    129e:	88 83       	st	Y, r24
    12a0:	ff ef       	ldi	r31, 0xFF	; 255
    12a2:	28 e0       	ldi	r18, 0x08	; 8
    12a4:	3d e3       	ldi	r19, 0x3D	; 61
    12a6:	f1 50       	subi	r31, 0x01	; 1
    12a8:	20 40       	sbci	r18, 0x00	; 0
    12aa:	30 40       	sbci	r19, 0x00	; 0
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <pick+0x92>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <pick+0x9c>
    12b0:	00 00       	nop
    12b2:	0e 94 21 01 	call	0x242	; 0x242 <servo_2_free>
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	08 95       	ret

000012c8 <place>:
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	0d e9       	ldi	r16, 0x9D	; 157
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	f8 01       	movw	r30, r16
    12de:	10 82       	st	Z, r1
    12e0:	0f 2e       	mov	r0, r31
    12e2:	fc e9       	ldi	r31, 0x9C	; 156
    12e4:	cf 2e       	mov	r12, r31
    12e6:	d1 2c       	mov	r13, r1
    12e8:	f0 2d       	mov	r31, r0
    12ea:	83 e5       	ldi	r24, 0x53	; 83
    12ec:	f6 01       	movw	r30, r12
    12ee:	80 83       	st	Z, r24
    12f0:	ff ef       	ldi	r31, 0xFF	; 255
    12f2:	28 e0       	ldi	r18, 0x08	; 8
    12f4:	8d e3       	ldi	r24, 0x3D	; 61
    12f6:	f1 50       	subi	r31, 0x01	; 1
    12f8:	20 40       	sbci	r18, 0x00	; 0
    12fa:	80 40       	sbci	r24, 0x00	; 0
    12fc:	e1 f7       	brne	.-8      	; 0x12f6 <place+0x2e>
    12fe:	00 c0       	rjmp	.+0      	; 0x1300 <place+0x38>
    1300:	00 00       	nop
    1302:	0e 94 21 01 	call	0x242	; 0x242 <servo_2_free>
    1306:	0f 2e       	mov	r0, r31
    1308:	fb e9       	ldi	r31, 0x9B	; 155
    130a:	ef 2e       	mov	r14, r31
    130c:	f1 2c       	mov	r15, r1
    130e:	f0 2d       	mov	r31, r0
    1310:	f7 01       	movw	r30, r14
    1312:	10 82       	st	Z, r1
    1314:	ca e9       	ldi	r28, 0x9A	; 154
    1316:	d0 e0       	ldi	r29, 0x00	; 0
    1318:	83 e4       	ldi	r24, 0x43	; 67
    131a:	88 83       	st	Y, r24
    131c:	ff ef       	ldi	r31, 0xFF	; 255
    131e:	28 e0       	ldi	r18, 0x08	; 8
    1320:	8d e3       	ldi	r24, 0x3D	; 61
    1322:	f1 50       	subi	r31, 0x01	; 1
    1324:	20 40       	sbci	r18, 0x00	; 0
    1326:	80 40       	sbci	r24, 0x00	; 0
    1328:	e1 f7       	brne	.-8      	; 0x1322 <place+0x5a>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <place+0x64>
    132c:	00 00       	nop
    132e:	0e 94 1a 01 	call	0x234	; 0x234 <servo_1_free>
    1332:	f8 01       	movw	r30, r16
    1334:	10 82       	st	Z, r1
    1336:	13 e2       	ldi	r17, 0x23	; 35
    1338:	f6 01       	movw	r30, r12
    133a:	10 83       	st	Z, r17
    133c:	ff ef       	ldi	r31, 0xFF	; 255
    133e:	28 e0       	ldi	r18, 0x08	; 8
    1340:	8d e3       	ldi	r24, 0x3D	; 61
    1342:	f1 50       	subi	r31, 0x01	; 1
    1344:	20 40       	sbci	r18, 0x00	; 0
    1346:	80 40       	sbci	r24, 0x00	; 0
    1348:	e1 f7       	brne	.-8      	; 0x1342 <place+0x7a>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <place+0x84>
    134c:	00 00       	nop
    134e:	0e 94 21 01 	call	0x242	; 0x242 <servo_2_free>
    1352:	f7 01       	movw	r30, r14
    1354:	10 82       	st	Z, r1
    1356:	18 83       	st	Y, r17
    1358:	ff ef       	ldi	r31, 0xFF	; 255
    135a:	28 e0       	ldi	r18, 0x08	; 8
    135c:	8d e3       	ldi	r24, 0x3D	; 61
    135e:	f1 50       	subi	r31, 0x01	; 1
    1360:	20 40       	sbci	r18, 0x00	; 0
    1362:	80 40       	sbci	r24, 0x00	; 0
    1364:	e1 f7       	brne	.-8      	; 0x135e <place+0x96>
    1366:	00 c0       	rjmp	.+0      	; 0x1368 <place+0xa0>
    1368:	00 00       	nop
    136a:	0e 94 1a 01 	call	0x234	; 0x234 <servo_1_free>
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	08 95       	ret

00001380 <check_obstacle>:
		
}

// to detect the obstacle using sharp sensor & follow another path
int check_obstacle()
	{
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	1f 92       	push	r1
    138e:	1f 92       	push	r1
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
		sharp = ADC_Conversion(8);
    1394:	88 e0       	ldi	r24, 0x08	; 8
    1396:	ad d8       	rcall	.-3750   	; 0x4f2 <ADC_Conversion>
    1398:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <sharp>
		print_sensor(1,1,8);
    139c:	48 e0       	ldi	r20, 0x08	; 8
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	c2 d8       	rcall	.-3708   	; 0x528 <print_sensor>
		
		if(sharp >= 250)
    13a4:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <sharp>
    13a8:	8a 3f       	cpi	r24, 0xFA	; 250
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <check_obstacle+0x2e>
			{
				stop();
    13ac:	c2 c0       	rjmp	.+388    	; 0x1532 <check_obstacle+0x1b2>
    13ae:	8e d8       	rcall	.-3812   	; 0x4cc <stop>
				delay(100);
    13b0:	64 e6       	ldi	r22, 0x64	; 100
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				buzzer_on();
    13bc:	c9 d8       	rcall	.-3694   	; 0x550 <buzzer_on>
				delay(500);
    13be:	64 ef       	ldi	r22, 0xF4	; 244
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				buzzer_off();
    13ca:	c4 d8       	rcall	.-3704   	; 0x554 <buzzer_off>
				obstacle++;
    13cc:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <obstacle>
    13d0:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <obstacle+0x1>
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <obstacle+0x1>
    13da:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <obstacle>
				char str1[2] = {0};
    13de:	1a 82       	std	Y+2, r1	; 0x02
    13e0:	19 82       	std	Y+1, r1	; 0x01
				itoa(obstacle, str1 ,10);
    13e2:	4a e0       	ldi	r20, 0x0A	; 10
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	be 01       	movw	r22, r28
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	0e 94 6f 22 	call	0x44de	; 0x44de <itoa>
				lcd_cursor(2,1);
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
				lcd_string(str1);
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_string>
				back_turn();
    1400:	c1 d9       	rcall	.-3198   	; 0x784 <back_turn>
				
				if (obstacle == 1)
    1402:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <obstacle>
    1406:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <obstacle+0x1>
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	91 05       	cpc	r25, r1
    140e:	e1 f5       	brne	.+120    	; 0x1488 <check_obstacle+0x108>
				{
					lcd_cursor(1,5);
    1410:	65 e0       	ldi	r22, 0x05	; 5
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
					lcd_string("ob1_detect");
    1418:	84 e5       	ldi	r24, 0x54	; 84
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_string>
					 pass[0] = path[(bot_index)+1];
    1420:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
    1424:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x1>
    1428:	fc 01       	movw	r30, r24
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	e3 58       	subi	r30, 0x83	; 131
    1430:	fd 4f       	sbci	r31, 0xFD	; 253
    1432:	40 81       	ld	r20, Z
    1434:	51 81       	ldd	r21, Z+1	; 0x01
    1436:	0f 2e       	mov	r0, r31
    1438:	ff ec       	ldi	r31, 0xCF	; 207
    143a:	ef 2e       	mov	r14, r31
    143c:	f2 e0       	ldi	r31, 0x02	; 2
    143e:	ff 2e       	mov	r15, r31
    1440:	f0 2d       	mov	r31, r0
    1442:	f7 01       	movw	r30, r14
    1444:	51 83       	std	Z+1, r21	; 0x01
    1446:	40 83       	st	Z, r20
					 pass[1] = path[(bot_index)];
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	fc 01       	movw	r30, r24
    144e:	e5 58       	subi	r30, 0x85	; 133
    1450:	fd 4f       	sbci	r31, 0xFD	; 253
    1452:	20 81       	ld	r18, Z
    1454:	31 81       	ldd	r19, Z+1	; 0x01
    1456:	f7 01       	movw	r30, r14
    1458:	33 83       	std	Z+3, r19	; 0x03
    145a:	22 83       	std	Z+2, r18	; 0x02
					 pass[6] = path[(bot_index)+1];
    145c:	55 87       	std	Z+13, r21	; 0x0d
    145e:	44 87       	std	Z+12, r20	; 0x0c
					 lcd_print(2,15,pass[1],2);
    1460:	03 2e       	mov	r0, r19
    1462:	00 0c       	add	r0, r0
    1464:	44 0b       	sbc	r20, r20
    1466:	55 0b       	sbc	r21, r21
    1468:	02 e0       	ldi	r16, 0x02	; 2
    146a:	10 e0       	ldi	r17, 0x00	; 0
    146c:	6f e0       	ldi	r22, 0x0F	; 15
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
					followpath (pass[1], destination1);
    1474:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <destination1>
    1478:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <destination1+0x1>
    147c:	f7 01       	movw	r30, r14
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <followpath>
					return(0);
    1486:	52 c0       	rjmp	.+164    	; 0x152c <check_obstacle+0x1ac>
				}
				if (obstacle == 2)
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	91 05       	cpc	r25, r1
    148c:	39 f5       	brne	.+78     	; 0x14dc <check_obstacle+0x15c>
				{
					 pass[2] = path[(bot_index)+1];
    148e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
    1492:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x1>
    1496:	fc 01       	movw	r30, r24
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	e3 58       	subi	r30, 0x83	; 131
    149e:	fd 4f       	sbci	r31, 0xFD	; 253
    14a0:	20 81       	ld	r18, Z
    14a2:	31 81       	ldd	r19, Z+1	; 0x01
    14a4:	af ec       	ldi	r26, 0xCF	; 207
    14a6:	b2 e0       	ldi	r27, 0x02	; 2
    14a8:	15 96       	adiw	r26, 0x05	; 5
    14aa:	3c 93       	st	X, r19
    14ac:	2e 93       	st	-X, r18
    14ae:	14 97       	sbiw	r26, 0x04	; 4
					 pass[3] = path[(bot_index)];
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	fc 01       	movw	r30, r24
    14b6:	e5 58       	subi	r30, 0x85	; 133
    14b8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	17 96       	adiw	r26, 0x07	; 7
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	16 97       	sbiw	r26, 0x06	; 6
					 pass[6] = path[(bot_index)+1];
    14c6:	1d 96       	adiw	r26, 0x0d	; 13
    14c8:	3c 93       	st	X, r19
    14ca:	2e 93       	st	-X, r18
    14cc:	1c 97       	sbiw	r26, 0x0c	; 12
					followpath(pass[3], destination1);
    14ce:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <destination1>
    14d2:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <destination1+0x1>
    14d6:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <followpath>
 					return(0);
    14da:	28 c0       	rjmp	.+80     	; 0x152c <check_obstacle+0x1ac>
				}

				if (obstacle == 3)
    14dc:	03 97       	sbiw	r24, 0x03	; 3
    14de:	49 f5       	brne	.+82     	; 0x1532 <check_obstacle+0x1b2>
				{ 
					pass[4] = path[(bot_index)+1];
    14e0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
    14e4:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x1>
    14e8:	fc 01       	movw	r30, r24
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	e3 58       	subi	r30, 0x83	; 131
    14f0:	fd 4f       	sbci	r31, 0xFD	; 253
    14f2:	20 81       	ld	r18, Z
    14f4:	31 81       	ldd	r19, Z+1	; 0x01
    14f6:	af ec       	ldi	r26, 0xCF	; 207
    14f8:	b2 e0       	ldi	r27, 0x02	; 2
    14fa:	19 96       	adiw	r26, 0x09	; 9
    14fc:	3c 93       	st	X, r19
    14fe:	2e 93       	st	-X, r18
    1500:	18 97       	sbiw	r26, 0x08	; 8
					pass[5] = path[(bot_index)];
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	fc 01       	movw	r30, r24
    1508:	e5 58       	subi	r30, 0x85	; 133
    150a:	fd 4f       	sbci	r31, 0xFD	; 253
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	1b 96       	adiw	r26, 0x0b	; 11
    1512:	9c 93       	st	X, r25
    1514:	8e 93       	st	-X, r24
    1516:	1a 97       	sbiw	r26, 0x0a	; 10
					pass[6] = path[(bot_index)+1];
    1518:	1d 96       	adiw	r26, 0x0d	; 13
    151a:	3c 93       	st	X, r19
    151c:	2e 93       	st	-X, r18
    151e:	1c 97       	sbiw	r26, 0x0c	; 12
					followpath(pass[5], destination1);
    1520:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <destination1>
    1524:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <destination1+0x1>
    1528:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <followpath>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <check_obstacle+0x1b2>
					return(0);
				}
			}

	}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	08 95       	ret

00001544 <blackline_lifting>:
}



int blackline_lifting()
{
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29

	{
		blackline_data();
    1550:	33 d8       	rcall	.-3994   	; 0x5b8 <blackline_data>
		
	if(Left_white_line > 0x96 &&  Center_white_line <0x96 && Right_white_line <0x96)
    1552:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    1556:	87 39       	cpi	r24, 0x97	; 151
    1558:	e8 f1       	brcs	.+122    	; 0x15d4 <blackline_lifting+0x90>
    155a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
    155e:	96 39       	cpi	r25, 0x96	; 150
    1560:	c8 f5       	brcc	.+114    	; 0x15d4 <blackline_lifting+0x90>
    1562:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
    1566:	96 39       	cpi	r25, 0x96	; 150
    1568:	a8 f5       	brcc	.+106    	; 0x15d4 <blackline_lifting+0x90>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    156a:	0f 2e       	mov	r0, r31
    156c:	f8 e2       	ldi	r31, 0x28	; 40
    156e:	ef 2e       	mov	r14, r31
    1570:	ff 24       	eor	r15, r15
    1572:	f3 94       	inc	r15
    1574:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1576:	0a e2       	ldi	r16, 0x2A	; 42
    1578:	11 e0       	ldi	r17, 0x01	; 1
    157a:	c2 e8       	ldi	r28, 0x82	; 130
	{
		blackline_data();
		
	if(Left_white_line > 0x96 &&  Center_white_line <0x96 && Right_white_line <0x96)
		{
			while(((Left_white_line < 0x96 &&  Center_white_line >0x96 && Right_white_line <0x96)||(Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 ))!=1)
    157c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    1580:	86 39       	cpi	r24, 0x96	; 150
    1582:	50 f4       	brcc	.+20     	; 0x1598 <blackline_lifting+0x54>
    1584:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
    1588:	97 39       	cpi	r25, 0x97	; 151
    158a:	30 f0       	brcs	.+12     	; 0x1598 <blackline_lifting+0x54>
    158c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
    1590:	96 39       	cpi	r25, 0x96	; 150
    1592:	08 f0       	brcs	.+2      	; 0x1596 <blackline_lifting+0x52>
    1594:	90 c0       	rjmp	.+288    	; 0x16b6 <blackline_lifting+0x172>
    1596:	a3 c0       	rjmp	.+326    	; 0x16de <blackline_lifting+0x19a>
    1598:	87 39       	cpi	r24, 0x97	; 151
    159a:	08 f4       	brcc	.+2      	; 0x159e <blackline_lifting+0x5a>
    159c:	90 c0       	rjmp	.+288    	; 0x16be <blackline_lifting+0x17a>
    159e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
    15a2:	97 39       	cpi	r25, 0x97	; 151
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <blackline_lifting+0x64>
    15a6:	9b c0       	rjmp	.+310    	; 0x16de <blackline_lifting+0x19a>
    15a8:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
    15ac:	97 39       	cpi	r25, 0x97	; 151
    15ae:	30 f0       	brcs	.+12     	; 0x15bc <blackline_lifting+0x78>
    15b0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    15b4:	87 39       	cpi	r24, 0x97	; 151
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <blackline_lifting+0x76>
    15b8:	61 c0       	rjmp	.+194    	; 0x167c <blackline_lifting+0x138>
    15ba:	91 c0       	rjmp	.+290    	; 0x16de <blackline_lifting+0x19a>
    15bc:	87 39       	cpi	r24, 0x97	; 151
    15be:	08 f4       	brcc	.+2      	; 0x15c2 <blackline_lifting+0x7e>
    15c0:	5d c0       	rjmp	.+186    	; 0x167c <blackline_lifting+0x138>
    15c2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    15c6:	87 39       	cpi	r24, 0x97	; 151
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <blackline_lifting+0x88>
    15ca:	58 c0       	rjmp	.+176    	; 0x167c <blackline_lifting+0x138>
    15cc:	97 39       	cpi	r25, 0x97	; 151
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <blackline_lifting+0x8e>
    15d0:	55 c0       	rjmp	.+170    	; 0x167c <blackline_lifting+0x138>
    15d2:	85 c0       	rjmp	.+266    	; 0x16de <blackline_lifting+0x19a>
				}

		}


	 else if(Left_white_line<0x96 && Center_white_line > 0x96 && Right_white_line <0x96)
    15d4:	86 39       	cpi	r24, 0x96	; 150
    15d6:	08 f0       	brcs	.+2      	; 0x15da <blackline_lifting+0x96>
    15d8:	49 c0       	rjmp	.+146    	; 0x166c <blackline_lifting+0x128>
    15da:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    15de:	87 39       	cpi	r24, 0x97	; 151
    15e0:	70 f0       	brcs	.+28     	; 0x15fe <blackline_lifting+0xba>
    15e2:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
    15e6:	96 39       	cpi	r25, 0x96	; 150
    15e8:	50 f4       	brcc	.+20     	; 0x15fe <blackline_lifting+0xba>
		{
			blackline_data();
    15ea:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			//lcd_cursor(2,1);
			//lcd_string("forward");
			
			forward();
    15ee:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15f2:	82 e8       	ldi	r24, 0x82	; 130
    15f4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    15f8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    15fc:	70 c0       	rjmp	.+224    	; 0x16de <blackline_lifting+0x19a>
			
			forward();
			velocity(130,130);
		}

	 else if(Left_white_line< 0x96 && Center_white_line <0x96 && Right_white_line >0x96)
    15fe:	86 39       	cpi	r24, 0x96	; 150
    1600:	a8 f5       	brcc	.+106    	; 0x166c <blackline_lifting+0x128>
    1602:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    1606:	87 39       	cpi	r24, 0x97	; 151
    1608:	88 f1       	brcs	.+98     	; 0x166c <blackline_lifting+0x128>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    160a:	0f 2e       	mov	r0, r31
    160c:	f8 e2       	ldi	r31, 0x28	; 40
    160e:	ef 2e       	mov	r14, r31
    1610:	ff 24       	eor	r15, r15
    1612:	f3 94       	inc	r15
    1614:	f0 2d       	mov	r31, r0
    1616:	12 e8       	ldi	r17, 0x82	; 130
	OCR5BL = (unsigned char)right_motor;
    1618:	ca e2       	ldi	r28, 0x2A	; 42
    161a:	d1 e0       	ldi	r29, 0x01	; 1
			velocity(130,130);
		}

	 else if(Left_white_line< 0x96 && Center_white_line <0x96 && Right_white_line >0x96)
		{
			while(((Left_white_line < 0x96 &&  Center_white_line >0x96 && Right_white_line <0x96)||(Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 ))!=1)
    161c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    1620:	86 39       	cpi	r24, 0x96	; 150
    1622:	50 f4       	brcc	.+20     	; 0x1638 <blackline_lifting+0xf4>
    1624:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
    1628:	97 39       	cpi	r25, 0x97	; 151
    162a:	30 f0       	brcs	.+12     	; 0x1638 <blackline_lifting+0xf4>
    162c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
    1630:	96 39       	cpi	r25, 0x96	; 150
    1632:	08 f0       	brcs	.+2      	; 0x1636 <blackline_lifting+0xf2>
    1634:	4a c0       	rjmp	.+148    	; 0x16ca <blackline_lifting+0x186>
    1636:	53 c0       	rjmp	.+166    	; 0x16de <blackline_lifting+0x19a>
    1638:	87 39       	cpi	r24, 0x97	; 151
    163a:	08 f4       	brcc	.+2      	; 0x163e <blackline_lifting+0xfa>
    163c:	4a c0       	rjmp	.+148    	; 0x16d2 <blackline_lifting+0x18e>
    163e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Center_white_line>
    1642:	97 39       	cpi	r25, 0x97	; 151
    1644:	08 f0       	brcs	.+2      	; 0x1648 <blackline_lifting+0x104>
    1646:	4b c0       	rjmp	.+150    	; 0x16de <blackline_lifting+0x19a>
    1648:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Right_white_line>
    164c:	97 39       	cpi	r25, 0x97	; 151
    164e:	28 f0       	brcs	.+10     	; 0x165a <blackline_lifting+0x116>
    1650:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    1654:	87 39       	cpi	r24, 0x97	; 151
    1656:	08 f1       	brcs	.+66     	; 0x169a <blackline_lifting+0x156>
    1658:	42 c0       	rjmp	.+132    	; 0x16de <blackline_lifting+0x19a>
    165a:	87 39       	cpi	r24, 0x97	; 151
    165c:	f0 f0       	brcs	.+60     	; 0x169a <blackline_lifting+0x156>
    165e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    1662:	87 39       	cpi	r24, 0x97	; 151
    1664:	d0 f0       	brcs	.+52     	; 0x169a <blackline_lifting+0x156>
    1666:	97 39       	cpi	r25, 0x97	; 151
    1668:	c0 f0       	brcs	.+48     	; 0x169a <blackline_lifting+0x156>
    166a:	39 c0       	rjmp	.+114    	; 0x16de <blackline_lifting+0x19a>
	}
	 else
		{
			
			
			forward();
    166c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1670:	82 e8       	ldi	r24, 0x82	; 130
    1672:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1676:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    167a:	31 c0       	rjmp	.+98     	; 0x16de <blackline_lifting+0x19a>
		
	if(Left_white_line > 0x96 &&  Center_white_line <0x96 && Right_white_line <0x96)
		{
			while(((Left_white_line < 0x96 &&  Center_white_line >0x96 && Right_white_line <0x96)||(Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 ))!=1)
				{	
					blackline_data();
    167c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
//					lcd_cursor(2,1);
	//				lcd_string("left turn");
					
					forward();
    1680:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1684:	f7 01       	movw	r30, r14
    1686:	10 82       	st	Z, r1
	OCR5BL = (unsigned char)right_motor;
    1688:	f8 01       	movw	r30, r16
    168a:	c0 83       	st	Z, r28
//					lcd_cursor(2,1);
	//				lcd_string("left turn");
					
					forward();
					velocity(0,130);
					delay(30);
    168c:	6e e1       	ldi	r22, 0x1E	; 30
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
    1698:	71 cf       	rjmp	.-286    	; 0x157c <blackline_lifting+0x38>

	 else if(Left_white_line< 0x96 && Center_white_line <0x96 && Right_white_line >0x96)
		{
			while(((Left_white_line < 0x96 &&  Center_white_line >0x96 && Right_white_line <0x96)||(Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 ))!=1)
				{
					blackline_data();
    169a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				//	lcd_cursor(2,1);
					//lcd_string("right turn");
					
					forward();
    169e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    16a2:	f7 01       	movw	r30, r14
    16a4:	10 83       	st	Z, r17
	OCR5BL = (unsigned char)right_motor;
    16a6:	18 82       	st	Y, r1
				//	lcd_cursor(2,1);
					//lcd_string("right turn");
					
					forward();
					velocity(130,0);
					delay(30);
    16a8:	6e e1       	ldi	r22, 0x1E	; 30
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
    16b4:	b3 cf       	rjmp	.-154    	; 0x161c <blackline_lifting+0xd8>
	{
		blackline_data();
		
	if(Left_white_line > 0x96 &&  Center_white_line <0x96 && Right_white_line <0x96)
		{
			while(((Left_white_line < 0x96 &&  Center_white_line >0x96 && Right_white_line <0x96)||(Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 ))!=1)
    16b6:	87 39       	cpi	r24, 0x97	; 151
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <blackline_lifting+0x178>
    16ba:	76 cf       	rjmp	.-276    	; 0x15a8 <blackline_lifting+0x64>
    16bc:	10 c0       	rjmp	.+32     	; 0x16de <blackline_lifting+0x19a>
    16be:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    16c2:	87 39       	cpi	r24, 0x97	; 151
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <blackline_lifting+0x184>
    16c6:	74 cf       	rjmp	.-280    	; 0x15b0 <blackline_lifting+0x6c>
    16c8:	d9 cf       	rjmp	.-78     	; 0x167c <blackline_lifting+0x138>
			velocity(130,130);
		}

	 else if(Left_white_line< 0x96 && Center_white_line <0x96 && Right_white_line >0x96)
		{
			while(((Left_white_line < 0x96 &&  Center_white_line >0x96 && Right_white_line <0x96)||(Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 ))!=1)
    16ca:	87 39       	cpi	r24, 0x97	; 151
    16cc:	08 f4       	brcc	.+2      	; 0x16d0 <blackline_lifting+0x18c>
    16ce:	bc cf       	rjmp	.-136    	; 0x1648 <blackline_lifting+0x104>
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <blackline_lifting+0x19a>
    16d2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    16d6:	87 39       	cpi	r24, 0x97	; 151
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <blackline_lifting+0x198>
    16da:	ba cf       	rjmp	.-140    	; 0x1650 <blackline_lifting+0x10c>
    16dc:	de cf       	rjmp	.-68     	; 0x169a <blackline_lifting+0x156>
			forward();
			velocity(130,130);
           //lcd_cursor(2,1);
             //lcd_string("defoult");
		}
  check_obstacle();
    16de:	50 de       	rcall	.-864    	; 0x1380 <check_obstacle>
	
	
	}
}
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	08 95       	ret

000016f2 <check_condition>:
int check_condition (int pre_node, int curr_node, int next_node)

{
  int f = 1, l = 2, r = 3,b=4,sl=5 ,sr=6,sf=7,bb=8, bf=9,lf=10,ll=11,rx=12,lx=13,lsl=14,lr=15,lr1=16 , ll1 = 17,lr2 = 18;
  
   if (pre_node == 0 && curr_node == 1 && next_node == 2)
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	d1 f4       	brne	.+52     	; 0x172a <check_condition+0x38>
    16f6:	61 30       	cpi	r22, 0x01	; 1
    16f8:	71 05       	cpc	r23, r1
    16fa:	51 f4       	brne	.+20     	; 0x1710 <check_condition+0x1e>
    16fc:	42 30       	cpi	r20, 0x02	; 2
    16fe:	51 05       	cpc	r21, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <check_condition+0x12>
    1702:	14 c7       	rjmp	.+3624   	; 0x252c <__stack+0x32d>
   {
	   return (f);
   }
   else if (pre_node == 0 && curr_node == 1 && next_node == 12)
    1704:	4c 30       	cpi	r20, 0x0C	; 12
    1706:	51 05       	cpc	r21, r1
    1708:	11 f0       	breq	.+4      	; 0x170e <check_condition+0x1c>
    170a:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <__stack+0x86b>
    170e:	11 c7       	rjmp	.+3618   	; 0x2532 <__stack+0x333>
   {
	   return (l);
   }
   else if (pre_node == 0 && curr_node == 13 && next_node == 12)
    1710:	6d 30       	cpi	r22, 0x0D	; 13
    1712:	71 05       	cpc	r23, r1
    1714:	09 f0       	breq	.+2      	; 0x1718 <check_condition+0x26>
    1716:	17 c5       	rjmp	.+2606   	; 0x2146 <check_condition+0xa54>
    1718:	4c 30       	cpi	r20, 0x0C	; 12
    171a:	51 05       	cpc	r21, r1
    171c:	09 f4       	brne	.+2      	; 0x1720 <check_condition+0x2e>
    171e:	0c c7       	rjmp	.+3608   	; 0x2538 <__stack+0x339>
   {
	   return (r);
   }
   else if (pre_node == 0 && curr_node == 13 && next_node == 14)
    1720:	4e 30       	cpi	r20, 0x0E	; 14
    1722:	51 05       	cpc	r21, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <check_condition+0x36>
    1726:	01 c7       	rjmp	.+3586   	; 0x252a <__stack+0x32b>
    1728:	0a c7       	rjmp	.+3604   	; 0x253e <__stack+0x33f>
   else if (pre_node == 0 && curr_node == 1 && next_node == 29)
   {
	   return (sr);
   }
   //1
   else if (pre_node == 1 && curr_node == 0 && next_node == 13)
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	11 f5       	brne	.+68     	; 0x1774 <check_condition+0x82>
    1730:	61 15       	cp	r22, r1
    1732:	71 05       	cpc	r23, r1
    1734:	31 f4       	brne	.+12     	; 0x1742 <check_condition+0x50>
    1736:	4d 30       	cpi	r20, 0x0D	; 13
    1738:	51 05       	cpc	r21, r1
    173a:	11 f0       	breq	.+4      	; 0x1740 <check_condition+0x4e>
    173c:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__stack+0x873>
    1740:	01 c7       	rjmp	.+3586   	; 0x2544 <__stack+0x345>
   {
	   return (r);
   }
   else if (pre_node == 1 && curr_node == 2 && next_node == 3)
    1742:	62 30       	cpi	r22, 0x02	; 2
    1744:	71 05       	cpc	r23, r1
    1746:	21 f4       	brne	.+8      	; 0x1750 <check_condition+0x5e>
    1748:	43 30       	cpi	r20, 0x03	; 3
    174a:	51 05       	cpc	r21, r1
    174c:	71 f4       	brne	.+28     	; 0x176a <check_condition+0x78>
    174e:	fd c6       	rjmp	.+3578   	; 0x254a <__stack+0x34b>
   {
	   return (f);
   }
   else if (pre_node == 1 && curr_node == 12 && next_node == 13)
    1750:	6c 30       	cpi	r22, 0x0C	; 12
    1752:	71 05       	cpc	r23, r1
    1754:	09 f0       	breq	.+2      	; 0x1758 <check_condition+0x66>
    1756:	08 c5       	rjmp	.+2576   	; 0x2168 <check_condition+0xa76>
    1758:	4d 30       	cpi	r20, 0x0D	; 13
    175a:	51 05       	cpc	r21, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <check_condition+0x6e>
    175e:	f8 c6       	rjmp	.+3568   	; 0x2550 <__stack+0x351>
   {
	   return (l);
   }
   else if (pre_node == 1 && curr_node == 12 && next_node == 11)
    1760:	4b 30       	cpi	r20, 0x0B	; 11
    1762:	51 05       	cpc	r21, r1
    1764:	09 f0       	breq	.+2      	; 0x1768 <check_condition+0x76>
    1766:	e1 c6       	rjmp	.+3522   	; 0x252a <__stack+0x32b>
    1768:	f6 c6       	rjmp	.+3564   	; 0x2556 <__stack+0x357>
   }
   else if (pre_node == 1 && curr_node == 0 && next_node == 28)
   {
	   return (sl);
   }
   else if (pre_node == 1 && curr_node == 2 && next_node == 30)
    176a:	4e 31       	cpi	r20, 0x1E	; 30
    176c:	51 05       	cpc	r21, r1
    176e:	09 f0       	breq	.+2      	; 0x1772 <check_condition+0x80>
    1770:	dc c6       	rjmp	.+3512   	; 0x252a <__stack+0x32b>
    1772:	f4 c6       	rjmp	.+3560   	; 0x255c <__stack+0x35d>
   {
	   return (sr);
   }
   //2
   else if (pre_node == 2 && curr_node == 1 && next_node == 0)
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	d1 f4       	brne	.+52     	; 0x17ae <check_condition+0xbc>
    177a:	61 30       	cpi	r22, 0x01	; 1
    177c:	71 05       	cpc	r23, r1
    177e:	51 f4       	brne	.+20     	; 0x1794 <check_condition+0xa2>
    1780:	41 15       	cp	r20, r1
    1782:	51 05       	cpc	r21, r1
    1784:	09 f4       	brne	.+2      	; 0x1788 <check_condition+0x96>
    1786:	ed c6       	rjmp	.+3546   	; 0x2562 <__stack+0x363>
   {
	   return (f);
   }
   else if (pre_node == 2 && curr_node == 1 && next_node == 12)
    1788:	4c 30       	cpi	r20, 0x0C	; 12
    178a:	51 05       	cpc	r21, r1
    178c:	11 f0       	breq	.+4      	; 0x1792 <check_condition+0xa0>
    178e:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__stack+0x87b>
    1792:	ea c6       	rjmp	.+3540   	; 0x2568 <__stack+0x369>
   {
	   return (r);
   }
   else if (pre_node == 2 && curr_node == 3 && next_node == 4)
    1794:	63 30       	cpi	r22, 0x03	; 3
    1796:	71 05       	cpc	r23, r1
    1798:	09 f0       	breq	.+2      	; 0x179c <check_condition+0xaa>
    179a:	f8 c4       	rjmp	.+2544   	; 0x218c <check_condition+0xa9a>
    179c:	44 30       	cpi	r20, 0x04	; 4
    179e:	51 05       	cpc	r21, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <check_condition+0xb2>
    17a2:	e5 c6       	rjmp	.+3530   	; 0x256e <__stack+0x36f>
   {
	   return (f);
   }
   else if (pre_node == 2 && curr_node == 3 && next_node == 10)
    17a4:	4a 30       	cpi	r20, 0x0A	; 10
    17a6:	51 05       	cpc	r21, r1
    17a8:	09 f0       	breq	.+2      	; 0x17ac <check_condition+0xba>
    17aa:	bf c6       	rjmp	.+3454   	; 0x252a <__stack+0x32b>
    17ac:	e3 c6       	rjmp	.+3526   	; 0x2574 <__stack+0x375>
   else if (pre_node == 2 && curr_node == 1&& next_node == 29)
   {
	   return (sl);
   }
   //3
   else if (pre_node == 3 && curr_node == 2 && next_node == 1)
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	19 f5       	brne	.+70     	; 0x17fa <check_condition+0x108>
    17b4:	62 30       	cpi	r22, 0x02	; 2
    17b6:	71 05       	cpc	r23, r1
    17b8:	31 f4       	brne	.+12     	; 0x17c6 <check_condition+0xd4>
    17ba:	41 30       	cpi	r20, 0x01	; 1
    17bc:	51 05       	cpc	r21, r1
    17be:	11 f0       	breq	.+4      	; 0x17c4 <check_condition+0xd2>
    17c0:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__stack+0x883>
    17c4:	da c6       	rjmp	.+3508   	; 0x257a <__stack+0x37b>
   {
	   return (f);
   }
   else if (pre_node == 3 && curr_node == 4 && next_node == 5)
    17c6:	64 30       	cpi	r22, 0x04	; 4
    17c8:	71 05       	cpc	r23, r1
    17ca:	31 f4       	brne	.+12     	; 0x17d8 <check_condition+0xe6>
    17cc:	45 30       	cpi	r20, 0x05	; 5
    17ce:	51 05       	cpc	r21, r1
    17d0:	11 f0       	breq	.+4      	; 0x17d6 <check_condition+0xe4>
    17d2:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__stack+0x88b>
    17d6:	d4 c6       	rjmp	.+3496   	; 0x2580 <__stack+0x381>
   {
	   return (f);
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 11)
    17d8:	6a 30       	cpi	r22, 0x0A	; 10
    17da:	71 05       	cpc	r23, r1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <check_condition+0xee>
    17de:	e5 c4       	rjmp	.+2506   	; 0x21aa <check_condition+0xab8>
    17e0:	4b 30       	cpi	r20, 0x0B	; 11
    17e2:	51 05       	cpc	r21, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <check_condition+0xf6>
    17e6:	cf c6       	rjmp	.+3486   	; 0x2586 <__stack+0x387>
   {
	   return (l);
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 9)
    17e8:	49 30       	cpi	r20, 0x09	; 9
    17ea:	51 05       	cpc	r21, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <check_condition+0xfe>
    17ee:	ce c6       	rjmp	.+3484   	; 0x258c <__stack+0x38d>
   {
	   return (r);
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 27)
    17f0:	4b 31       	cpi	r20, 0x1B	; 27
    17f2:	51 05       	cpc	r21, r1
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <check_condition+0x106>
    17f6:	99 c6       	rjmp	.+3378   	; 0x252a <__stack+0x32b>
    17f8:	cc c6       	rjmp	.+3480   	; 0x2592 <__stack+0x393>
   else if (pre_node == 3 && curr_node == 4 && next_node == 31)
   {
	   return (sr);
   }
   //4
   else if (pre_node == 4 && curr_node == 3 && next_node == 2)
    17fa:	84 30       	cpi	r24, 0x04	; 4
    17fc:	91 05       	cpc	r25, r1
    17fe:	e9 f4       	brne	.+58     	; 0x183a <check_condition+0x148>
    1800:	63 30       	cpi	r22, 0x03	; 3
    1802:	71 05       	cpc	r23, r1
    1804:	49 f4       	brne	.+18     	; 0x1818 <check_condition+0x126>
    1806:	42 30       	cpi	r20, 0x02	; 2
    1808:	51 05       	cpc	r21, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <check_condition+0x11c>
    180c:	c5 c6       	rjmp	.+3466   	; 0x2598 <__stack+0x399>
   {
	   return (f);
   }
   else if (pre_node == 4 && curr_node == 3 && next_node == 10)
    180e:	4a 30       	cpi	r20, 0x0A	; 10
    1810:	51 05       	cpc	r21, r1
    1812:	09 f0       	breq	.+2      	; 0x1816 <check_condition+0x124>
    1814:	8a c6       	rjmp	.+3348   	; 0x252a <__stack+0x32b>
    1816:	c3 c6       	rjmp	.+3462   	; 0x259e <__stack+0x39f>
   {
	   return (r);
   }
   else if (pre_node == 4 && curr_node == 5 && next_node == 6)
    1818:	65 30       	cpi	r22, 0x05	; 5
    181a:	71 05       	cpc	r23, r1
    181c:	09 f0       	breq	.+2      	; 0x1820 <check_condition+0x12e>
    181e:	d3 c4       	rjmp	.+2470   	; 0x21c6 <check_condition+0xad4>
    1820:	46 30       	cpi	r20, 0x06	; 6
    1822:	51 05       	cpc	r21, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <check_condition+0x136>
    1826:	be c6       	rjmp	.+3452   	; 0x25a4 <__stack+0x3a5>
   {
	   return (f);
   }
   else if (pre_node == 4 && curr_node == 5 && next_node == 8)
    1828:	48 30       	cpi	r20, 0x08	; 8
    182a:	51 05       	cpc	r21, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <check_condition+0x13e>
    182e:	bd c6       	rjmp	.+3450   	; 0x25aa <__stack+0x3ab>
   {
	   return (l);
   }
   else if (pre_node == 4 && curr_node == 5 && next_node == 32)
    1830:	40 32       	cpi	r20, 0x20	; 32
    1832:	51 05       	cpc	r21, r1
    1834:	09 f0       	breq	.+2      	; 0x1838 <check_condition+0x146>
    1836:	79 c6       	rjmp	.+3314   	; 0x252a <__stack+0x32b>
    1838:	bb c6       	rjmp	.+3446   	; 0x25b0 <__stack+0x3b1>
    183a:	fa 01       	movw	r30, r20
   {
	   return (sr);
   }
   //5
   else if (pre_node == 5 && curr_node == 4 && next_node == 3)
    183c:	85 30       	cpi	r24, 0x05	; 5
    183e:	91 05       	cpc	r25, r1
    1840:	79 f5       	brne	.+94     	; 0x18a0 <check_condition+0x1ae>
    1842:	64 30       	cpi	r22, 0x04	; 4
    1844:	71 05       	cpc	r23, r1
    1846:	31 f4       	brne	.+12     	; 0x1854 <check_condition+0x162>
    1848:	43 30       	cpi	r20, 0x03	; 3
    184a:	51 05       	cpc	r21, r1
    184c:	11 f0       	breq	.+4      	; 0x1852 <check_condition+0x160>
    184e:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__stack+0x893>
    1852:	b1 c6       	rjmp	.+3426   	; 0x25b6 <__stack+0x3b7>
   {
	   return (f);
   }
   else if (pre_node == 5 && curr_node == 8 && next_node == 9)
    1854:	68 30       	cpi	r22, 0x08	; 8
    1856:	71 05       	cpc	r23, r1
    1858:	c9 f4       	brne	.+50     	; 0x188c <check_condition+0x19a>
    185a:	49 30       	cpi	r20, 0x09	; 9
    185c:	51 05       	cpc	r21, r1
    185e:	89 f4       	brne	.+34     	; 0x1882 <check_condition+0x190>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1866:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
	   return (f);
   }
   else if (pre_node == 5 && curr_node == 8 && next_node == 9)
   {
	   velocity(255,255);
	   forward();
    186a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	   delay(100);
    186e:	64 e6       	ldi	r22, 0x64	; 100
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	   return (l);
    187a:	22 e0       	ldi	r18, 0x02	; 2
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 5 && curr_node == 8 && next_node == 7)
    1882:	47 30       	cpi	r20, 0x07	; 7
    1884:	51 05       	cpc	r21, r1
    1886:	09 f0       	breq	.+2      	; 0x188a <check_condition+0x198>
    1888:	50 c6       	rjmp	.+3232   	; 0x252a <__stack+0x32b>
    188a:	98 c6       	rjmp	.+3376   	; 0x25bc <__stack+0x3bd>
   {
	   return (r);
   }
   else if (pre_node == 5 && curr_node == 6 && next_node == 7)
    188c:	66 30       	cpi	r22, 0x06	; 6
    188e:	71 05       	cpc	r23, r1
    1890:	09 f0       	breq	.+2      	; 0x1894 <check_condition+0x1a2>
    1892:	aa c4       	rjmp	.+2388   	; 0x21e8 <check_condition+0xaf6>
    1894:	47 30       	cpi	r20, 0x07	; 7
    1896:	51 05       	cpc	r21, r1
    1898:	11 f0       	breq	.+4      	; 0x189e <check_condition+0x1ac>
    189a:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__stack+0x89b>
    189e:	91 c6       	rjmp	.+3362   	; 0x25c2 <__stack+0x3c3>
   else if (pre_node == 5 && curr_node == 6 && next_node == 33)
   {
	   return (sr);
   }
   //6
   else if (pre_node == 6 && curr_node == 7 && next_node == 8)
    18a0:	86 30       	cpi	r24, 0x06	; 6
    18a2:	91 05       	cpc	r25, r1
    18a4:	e9 f4       	brne	.+58     	; 0x18e0 <check_condition+0x1ee>
    18a6:	67 30       	cpi	r22, 0x07	; 7
    18a8:	71 05       	cpc	r23, r1
    18aa:	49 f4       	brne	.+18     	; 0x18be <check_condition+0x1cc>
    18ac:	48 30       	cpi	r20, 0x08	; 8
    18ae:	51 05       	cpc	r21, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <check_condition+0x1c2>
    18b2:	8a c6       	rjmp	.+3348   	; 0x25c8 <__stack+0x3c9>
   {
	   return (l);
   }
   else if (pre_node == 6 && curr_node == 7 && next_node == 20)
    18b4:	44 31       	cpi	r20, 0x14	; 20
    18b6:	51 05       	cpc	r21, r1
    18b8:	09 f0       	breq	.+2      	; 0x18bc <check_condition+0x1ca>
    18ba:	37 c6       	rjmp	.+3182   	; 0x252a <__stack+0x32b>
    18bc:	88 c6       	rjmp	.+3344   	; 0x25ce <__stack+0x3cf>
   {
	   return (f);
   }
   else if (pre_node == 6 && curr_node == 5 && next_node == 8)
    18be:	65 30       	cpi	r22, 0x05	; 5
    18c0:	71 05       	cpc	r23, r1
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <check_condition+0x1d4>
    18c4:	a3 c4       	rjmp	.+2374   	; 0x220c <__stack+0xd>
    18c6:	48 30       	cpi	r20, 0x08	; 8
    18c8:	51 05       	cpc	r21, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <check_condition+0x1dc>
    18cc:	83 c6       	rjmp	.+3334   	; 0x25d4 <__stack+0x3d5>
   {
	   return (r);
   }
   else if (pre_node == 6 && curr_node == 5 && next_node == 4)
    18ce:	44 30       	cpi	r20, 0x04	; 4
    18d0:	51 05       	cpc	r21, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <check_condition+0x1e4>
    18d4:	82 c6       	rjmp	.+3332   	; 0x25da <__stack+0x3db>
   {
	   return (f);
   }
   else if (pre_node == 6 && curr_node == 5 && next_node == 32)
    18d6:	40 32       	cpi	r20, 0x20	; 32
    18d8:	51 05       	cpc	r21, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <check_condition+0x1ec>
    18dc:	26 c6       	rjmp	.+3148   	; 0x252a <__stack+0x32b>
    18de:	80 c6       	rjmp	.+3328   	; 0x25e0 <__stack+0x3e1>
   {
	   return (sl);
   }
   //7
   else if (pre_node == 7 && curr_node == 6 && next_node == 5)
    18e0:	87 30       	cpi	r24, 0x07	; 7
    18e2:	91 05       	cpc	r25, r1
    18e4:	11 f5       	brne	.+68     	; 0x192a <check_condition+0x238>
    18e6:	66 30       	cpi	r22, 0x06	; 6
    18e8:	71 05       	cpc	r23, r1
    18ea:	31 f4       	brne	.+12     	; 0x18f8 <check_condition+0x206>
    18ec:	45 30       	cpi	r20, 0x05	; 5
    18ee:	51 05       	cpc	r21, r1
    18f0:	11 f0       	breq	.+4      	; 0x18f6 <check_condition+0x204>
    18f2:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__stack+0x8a3>
    18f6:	77 c6       	rjmp	.+3310   	; 0x25e6 <__stack+0x3e7>
   {
	   return (r);
   }
   else if (pre_node == 7 && curr_node == 8 && next_node == 5)
    18f8:	68 30       	cpi	r22, 0x08	; 8
    18fa:	71 05       	cpc	r23, r1
    18fc:	49 f4       	brne	.+18     	; 0x1910 <check_condition+0x21e>
    18fe:	45 30       	cpi	r20, 0x05	; 5
    1900:	51 05       	cpc	r21, r1
    1902:	09 f4       	brne	.+2      	; 0x1906 <check_condition+0x214>
    1904:	73 c6       	rjmp	.+3302   	; 0x25ec <__stack+0x3ed>
   {
	   return (l);
   }
   else if (pre_node == 7 && curr_node == 8 && next_node == 9)
    1906:	49 30       	cpi	r20, 0x09	; 9
    1908:	51 05       	cpc	r21, r1
    190a:	09 f0       	breq	.+2      	; 0x190e <check_condition+0x21c>
    190c:	0e c6       	rjmp	.+3100   	; 0x252a <__stack+0x32b>
    190e:	71 c6       	rjmp	.+3298   	; 0x25f2 <__stack+0x3f3>
   {
	   return (r);
   }
   else if (pre_node == 7 && curr_node == 20 && next_node == 11)
    1910:	64 31       	cpi	r22, 0x14	; 20
    1912:	71 05       	cpc	r23, r1
    1914:	09 f0       	breq	.+2      	; 0x1918 <check_condition+0x226>
    1916:	88 c4       	rjmp	.+2320   	; 0x2228 <__stack+0x29>
    1918:	4b 30       	cpi	r20, 0x0B	; 11
    191a:	51 05       	cpc	r21, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <check_condition+0x22e>
    191e:	6c c6       	rjmp	.+3288   	; 0x25f8 <__stack+0x3f9>
   {
	   return (l);
   }
   else if (pre_node == 7 && curr_node == 20 && next_node == 21)
    1920:	45 31       	cpi	r20, 0x15	; 21
    1922:	51 05       	cpc	r21, r1
    1924:	09 f0       	breq	.+2      	; 0x1928 <check_condition+0x236>
    1926:	01 c6       	rjmp	.+3074   	; 0x252a <__stack+0x32b>
    1928:	6a c6       	rjmp	.+3284   	; 0x25fe <__stack+0x3ff>
   else if (pre_node == 7 && curr_node == 6 && next_node == 33)
   {
	   return (sf);
   }
   //8
   else if (pre_node == 8 && curr_node == 9 && next_node == 10)
    192a:	88 30       	cpi	r24, 0x08	; 8
    192c:	91 05       	cpc	r25, r1
    192e:	49 f5       	brne	.+82     	; 0x1982 <check_condition+0x290>
    1930:	69 30       	cpi	r22, 0x09	; 9
    1932:	71 05       	cpc	r23, r1
    1934:	49 f4       	brne	.+18     	; 0x1948 <check_condition+0x256>
    1936:	4a 30       	cpi	r20, 0x0A	; 10
    1938:	51 05       	cpc	r21, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <check_condition+0x24c>
    193c:	63 c6       	rjmp	.+3270   	; 0x2604 <__stack+0x405>
   {
	   return (l);
   }
   else if (pre_node == 8 && curr_node == 9 && next_node == 18)
    193e:	42 31       	cpi	r20, 0x12	; 18
    1940:	51 05       	cpc	r21, r1
    1942:	09 f0       	breq	.+2      	; 0x1946 <check_condition+0x254>
    1944:	f2 c5       	rjmp	.+3044   	; 0x252a <__stack+0x32b>
    1946:	61 c6       	rjmp	.+3266   	; 0x260a <__stack+0x40b>
   {
	   return (r);
   }
   else if (pre_node == 8 && curr_node == 7 && next_node == 20)
    1948:	67 30       	cpi	r22, 0x07	; 7
    194a:	71 05       	cpc	r23, r1
    194c:	49 f4       	brne	.+18     	; 0x1960 <check_condition+0x26e>
    194e:	44 31       	cpi	r20, 0x14	; 20
    1950:	51 05       	cpc	r21, r1
    1952:	09 f4       	brne	.+2      	; 0x1956 <check_condition+0x264>
    1954:	5d c6       	rjmp	.+3258   	; 0x2610 <__stack+0x411>
   {
	   return (lsl);
   }
   else if (pre_node == 8 && curr_node == 7 && next_node == 6)
    1956:	46 30       	cpi	r20, 0x06	; 6
    1958:	51 05       	cpc	r21, r1
    195a:	09 f0       	breq	.+2      	; 0x195e <check_condition+0x26c>
    195c:	e6 c5       	rjmp	.+3020   	; 0x252a <__stack+0x32b>
    195e:	5b c6       	rjmp	.+3254   	; 0x2616 <__stack+0x417>
   {
	   return (r);
   }
   else if (pre_node == 8 && curr_node == 5 && next_node == 4)
    1960:	65 30       	cpi	r22, 0x05	; 5
    1962:	71 05       	cpc	r23, r1
    1964:	09 f0       	breq	.+2      	; 0x1968 <check_condition+0x276>
    1966:	71 c4       	rjmp	.+2274   	; 0x224a <__stack+0x4b>
    1968:	44 30       	cpi	r20, 0x04	; 4
    196a:	51 05       	cpc	r21, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <check_condition+0x27e>
    196e:	56 c6       	rjmp	.+3244   	; 0x261c <__stack+0x41d>
   {
	   return (r);
   }
   else if (pre_node == 8 && curr_node == 5 && next_node == 6)
    1970:	46 30       	cpi	r20, 0x06	; 6
    1972:	51 05       	cpc	r21, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <check_condition+0x286>
    1976:	55 c6       	rjmp	.+3242   	; 0x2622 <__stack+0x423>
   {
	   return (l);
   }
   else if (pre_node == 8 && curr_node == 5 && next_node == 32)
    1978:	40 32       	cpi	r20, 0x20	; 32
    197a:	51 05       	cpc	r21, r1
    197c:	09 f0       	breq	.+2      	; 0x1980 <check_condition+0x28e>
    197e:	d5 c5       	rjmp	.+2986   	; 0x252a <__stack+0x32b>
    1980:	53 c6       	rjmp	.+3238   	; 0x2628 <__stack+0x429>
   {
	   return (sf);
   }
   else if (pre_node == 9 && curr_node == 8 && next_node == 5)
    1982:	89 30       	cpi	r24, 0x09	; 9
    1984:	91 05       	cpc	r25, r1
    1986:	09 f0       	breq	.+2      	; 0x198a <check_condition+0x298>
    1988:	63 c0       	rjmp	.+198    	; 0x1a50 <check_condition+0x35e>
    198a:	68 30       	cpi	r22, 0x08	; 8
    198c:	71 05       	cpc	r23, r1
    198e:	c9 f4       	brne	.+50     	; 0x19c2 <check_condition+0x2d0>
    1990:	45 30       	cpi	r20, 0x05	; 5
    1992:	51 05       	cpc	r21, r1
    1994:	89 f4       	brne	.+34     	; 0x19b8 <check_condition+0x2c6>
   {
	   forward();
    1996:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    199a:	86 e9       	ldi	r24, 0x96	; 150
    199c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    19a0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 9 && curr_node == 8 && next_node == 5)
   {
	   forward();
	   velocity(150,150);
	   delay(100);
    19a4:	64 e6       	ldi	r22, 0x64	; 100
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	   return (r);
    19b0:	23 e0       	ldi	r18, 0x03	; 3
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 9 && curr_node == 8 && next_node == 7)
    19b8:	47 30       	cpi	r20, 0x07	; 7
    19ba:	51 05       	cpc	r21, r1
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <check_condition+0x2ce>
    19be:	b5 c5       	rjmp	.+2922   	; 0x252a <__stack+0x32b>
    19c0:	36 c6       	rjmp	.+3180   	; 0x262e <__stack+0x42f>
   {
	   return (l);

   }
   else if (pre_node == 9 && curr_node == 10 && next_node == 11)
    19c2:	6a 30       	cpi	r22, 0x0A	; 10
    19c4:	71 05       	cpc	r23, r1
    19c6:	11 f5       	brne	.+68     	; 0x1a0c <check_condition+0x31a>
    19c8:	4b 30       	cpi	r20, 0x0B	; 11
    19ca:	51 05       	cpc	r21, r1
    19cc:	b1 f4       	brne	.+44     	; 0x19fa <check_condition+0x308>
   {
	    forward();
    19ce:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    19d2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    19d6:	86 e9       	ldi	r24, 0x96	; 150
    19d8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 9 && curr_node == 10 && next_node == 11)
   {
	    forward();
	    velocity(0,150);
delay(100);
    19dc:	64 e6       	ldi	r22, 0x64	; 100
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    19ee:	86 39       	cpi	r24, 0x96	; 150
    19f0:	d8 f3       	brcs	.-10     	; 0x19e8 <check_condition+0x2f6>
	   return (f);
    19f2:	21 e0       	ldi	r18, 0x01	; 1
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 9 && curr_node == 10 && next_node == 27)
    19fa:	4b 31       	cpi	r20, 0x1B	; 27
    19fc:	51 05       	cpc	r21, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <check_condition+0x310>
    1a00:	19 c6       	rjmp	.+3122   	; 0x2634 <__stack+0x435>
   {
	   return (r);
   }
   else if (pre_node == 9 && curr_node == 10 && next_node == 3)
    1a02:	43 30       	cpi	r20, 0x03	; 3
    1a04:	51 05       	cpc	r21, r1
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <check_condition+0x318>
    1a08:	90 c5       	rjmp	.+2848   	; 0x252a <__stack+0x32b>
    1a0a:	17 c6       	rjmp	.+3118   	; 0x263a <__stack+0x43b>
   {
	   return (l);
   }
   else if (pre_node == 9 && curr_node == 18 && next_node == 17)
    1a0c:	62 31       	cpi	r22, 0x12	; 18
    1a0e:	71 05       	cpc	r23, r1
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <check_condition+0x322>
    1a12:	28 c4       	rjmp	.+2128   	; 0x2264 <__stack+0x65>
    1a14:	41 31       	cpi	r20, 0x11	; 17
    1a16:	51 05       	cpc	r21, r1
    1a18:	b1 f4       	brne	.+44     	; 0x1a46 <check_condition+0x354>
   {
	    forward();
    1a1a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1a1e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1a22:	86 e9       	ldi	r24, 0x96	; 150
    1a24:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 9 && curr_node == 18 && next_node == 17)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1a28:	64 e6       	ldi	r22, 0x64	; 100
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1a3a:	86 39       	cpi	r24, 0x96	; 150
    1a3c:	d8 f3       	brcs	.-10     	; 0x1a34 <check_condition+0x342>
	   return (f);
    1a3e:	21 e0       	ldi	r18, 0x01	; 1
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 9 && curr_node == 18 && next_node == 19)
    1a46:	43 31       	cpi	r20, 0x13	; 19
    1a48:	51 05       	cpc	r21, r1
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <check_condition+0x35c>
    1a4c:	6e c5       	rjmp	.+2780   	; 0x252a <__stack+0x32b>
    1a4e:	f8 c5       	rjmp	.+3056   	; 0x2640 <__stack+0x441>
   {
	   return (r);
   }
   else if (pre_node == 10 && curr_node == 9 && next_node == 8)
    1a50:	8a 30       	cpi	r24, 0x0A	; 10
    1a52:	91 05       	cpc	r25, r1
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <check_condition+0x366>
    1a56:	4d c0       	rjmp	.+154    	; 0x1af2 <check_condition+0x400>
    1a58:	69 30       	cpi	r22, 0x09	; 9
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	e9 f4       	brne	.+58     	; 0x1a98 <check_condition+0x3a6>
    1a5e:	48 30       	cpi	r20, 0x08	; 8
    1a60:	51 05       	cpc	r21, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <check_condition+0x374>
    1a64:	f0 c5       	rjmp	.+3040   	; 0x2646 <__stack+0x447>
   {
	   return (r);
   }
   else if (pre_node == 10 && curr_node == 9 && next_node == 18)
    1a66:	42 31       	cpi	r20, 0x12	; 18
    1a68:	51 05       	cpc	r21, r1
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <check_condition+0x37c>
    1a6c:	5e c5       	rjmp	.+2748   	; 0x252a <__stack+0x32b>
   {
	    forward();
    1a6e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1a72:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1a76:	86 e9       	ldi	r24, 0x96	; 150
    1a78:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 10 && curr_node == 9 && next_node == 18)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1a7c:	64 e6       	ldi	r22, 0x64	; 100
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1a8e:	86 39       	cpi	r24, 0x96	; 150
    1a90:	d8 f3       	brcs	.-10     	; 0x1a88 <check_condition+0x396>
	   return (f);
    1a92:	21 e0       	ldi	r18, 0x01	; 1
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	e6 c7       	rjmp	.+4044   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 10 && curr_node == 3 && next_node == 2)
    1a98:	63 30       	cpi	r22, 0x03	; 3
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	49 f4       	brne	.+18     	; 0x1ab0 <check_condition+0x3be>
    1a9e:	42 30       	cpi	r20, 0x02	; 2
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <check_condition+0x3b4>
    1aa4:	d3 c5       	rjmp	.+2982   	; 0x264c <__stack+0x44d>
   {
	   return (r);
   }
   else if (pre_node == 10 && curr_node == 3 && next_node == 4)
    1aa6:	44 30       	cpi	r20, 0x04	; 4
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <check_condition+0x3bc>
    1aac:	3e c5       	rjmp	.+2684   	; 0x252a <__stack+0x32b>
    1aae:	d1 c5       	rjmp	.+2978   	; 0x2652 <__stack+0x453>
   {
	   return (l);
   }
   else if (pre_node == 10 && curr_node == 11 && next_node == 12)
    1ab0:	6b 30       	cpi	r22, 0x0B	; 11
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <check_condition+0x3c6>
    1ab6:	e4 c3       	rjmp	.+1992   	; 0x2280 <__stack+0x81>
    1ab8:	4c 30       	cpi	r20, 0x0C	; 12
    1aba:	51 05       	cpc	r21, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <check_condition+0x3ce>
    1abe:	cc c5       	rjmp	.+2968   	; 0x2658 <__stack+0x459>
   {
	   return (l);
   }
   else if (pre_node == 10 && curr_node == 11 && next_node == 16)
    1ac0:	40 31       	cpi	r20, 0x10	; 16
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <check_condition+0x3d6>
    1ac6:	31 c5       	rjmp	.+2658   	; 0x252a <__stack+0x32b>
   {
	    forward();
    1ac8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1acc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1ad0:	86 e9       	ldi	r24, 0x96	; 150
    1ad2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 10 && curr_node == 11 && next_node == 16)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1ad6:	64 e6       	ldi	r22, 0x64	; 100
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1ae8:	86 39       	cpi	r24, 0x96	; 150
    1aea:	d8 f3       	brcs	.-10     	; 0x1ae2 <check_condition+0x3f0>
	   return (f);
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	b9 c7       	rjmp	.+3954   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 11 && curr_node == 10 && next_node == 27)
    1af2:	8b 30       	cpi	r24, 0x0B	; 11
    1af4:	91 05       	cpc	r25, r1
    1af6:	e9 f5       	brne	.+122    	; 0x1b72 <check_condition+0x480>
    1af8:	6a 30       	cpi	r22, 0x0A	; 10
    1afa:	71 05       	cpc	r23, r1
    1afc:	69 f4       	brne	.+26     	; 0x1b18 <check_condition+0x426>
    1afe:	4b 31       	cpi	r20, 0x1B	; 27
    1b00:	51 05       	cpc	r21, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <check_condition+0x414>
    1b04:	ac c5       	rjmp	.+2904   	; 0x265e <__stack+0x45f>
   {
	   return (l);
   }
   else if (pre_node == 11 && curr_node == 10 && next_node == 3)
    1b06:	43 30       	cpi	r20, 0x03	; 3
    1b08:	51 05       	cpc	r21, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <check_condition+0x41c>
    1b0c:	ab c5       	rjmp	.+2902   	; 0x2664 <__stack+0x465>
   {
	   return (r);
   }
   else if (pre_node == 11 && curr_node == 10 && next_node == 9)
    1b0e:	49 30       	cpi	r20, 0x09	; 9
    1b10:	51 05       	cpc	r21, r1
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <check_condition+0x424>
    1b14:	0a c5       	rjmp	.+2580   	; 0x252a <__stack+0x32b>
    1b16:	a9 c5       	rjmp	.+2898   	; 0x266a <__stack+0x46b>
   {
	   return (f);
   }
   else if (pre_node == 11 && curr_node == 12 && next_node == 1)
    1b18:	6c 30       	cpi	r22, 0x0C	; 12
    1b1a:	71 05       	cpc	r23, r1
    1b1c:	49 f4       	brne	.+18     	; 0x1b30 <check_condition+0x43e>
    1b1e:	41 30       	cpi	r20, 0x01	; 1
    1b20:	51 05       	cpc	r21, r1
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <check_condition+0x434>
    1b24:	a5 c5       	rjmp	.+2890   	; 0x2670 <__stack+0x471>
   {
	   return (l);
   }
   else if (pre_node == 11 && curr_node == 12 && next_node == 13)
    1b26:	4d 30       	cpi	r20, 0x0D	; 13
    1b28:	51 05       	cpc	r21, r1
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <check_condition+0x43c>
    1b2c:	fe c4       	rjmp	.+2556   	; 0x252a <__stack+0x32b>
    1b2e:	a3 c5       	rjmp	.+2886   	; 0x2676 <__stack+0x477>
   {
	   return (f);
   }
   else if (pre_node == 11 && curr_node == 16 && next_node == 15)
    1b30:	60 31       	cpi	r22, 0x10	; 16
    1b32:	71 05       	cpc	r23, r1
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <check_condition+0x446>
    1b36:	ad c3       	rjmp	.+1882   	; 0x2292 <__stack+0x93>
    1b38:	4f 30       	cpi	r20, 0x0F	; 15
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <check_condition+0x44e>
    1b3e:	9e c5       	rjmp	.+2876   	; 0x267c <__stack+0x47d>
   {
	   return (l);
   }
   else if (pre_node == 11 && curr_node == 16 && next_node == 17)
    1b40:	41 31       	cpi	r20, 0x11	; 17
    1b42:	51 05       	cpc	r21, r1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <check_condition+0x456>
    1b46:	f1 c4       	rjmp	.+2530   	; 0x252a <__stack+0x32b>
   {
	    forward();
    1b48:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1b4c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1b50:	86 e9       	ldi	r24, 0x96	; 150
    1b52:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 11 && curr_node == 16 && next_node == 17)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1b56:	64 e6       	ldi	r22, 0x64	; 100
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1b68:	86 39       	cpi	r24, 0x96	; 150
    1b6a:	d8 f3       	brcs	.-10     	; 0x1b62 <check_condition+0x470>
	   return (f);
    1b6c:	21 e0       	ldi	r18, 0x01	; 1
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	79 c7       	rjmp	.+3826   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 12 && curr_node == 11 && next_node == 10)
    1b72:	8c 30       	cpi	r24, 0x0C	; 12
    1b74:	91 05       	cpc	r25, r1
    1b76:	19 f5       	brne	.+70     	; 0x1bbe <check_condition+0x4cc>
    1b78:	6b 30       	cpi	r22, 0x0B	; 11
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	49 f4       	brne	.+18     	; 0x1b90 <check_condition+0x49e>
    1b7e:	4a 30       	cpi	r20, 0x0A	; 10
    1b80:	51 05       	cpc	r21, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <check_condition+0x494>
    1b84:	7e c5       	rjmp	.+2812   	; 0x2682 <__stack+0x483>
   {
	   return (f);
   }

   else if (pre_node == 12 && curr_node == 11 && next_node == 16)
    1b86:	40 31       	cpi	r20, 0x10	; 16
    1b88:	51 05       	cpc	r21, r1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <check_condition+0x49c>
    1b8c:	ce c4       	rjmp	.+2460   	; 0x252a <__stack+0x32b>
    1b8e:	7c c5       	rjmp	.+2808   	; 0x2688 <__stack+0x489>
   {
	   return (l);
   }
   else if (pre_node == 12 && curr_node == 13 && next_node == 0)
    1b90:	6d 30       	cpi	r22, 0x0D	; 13
    1b92:	71 05       	cpc	r23, r1
    1b94:	21 f4       	brne	.+8      	; 0x1b9e <check_condition+0x4ac>
    1b96:	ef 2b       	or	r30, r31
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <check_condition+0x4aa>
    1b9a:	c7 c4       	rjmp	.+2446   	; 0x252a <__stack+0x32b>
    1b9c:	78 c5       	rjmp	.+2800   	; 0x268e <__stack+0x48f>
   {
	   return (l);
   }
   else if (pre_node == 12 && curr_node == 1 && next_node == 0)
    1b9e:	61 30       	cpi	r22, 0x01	; 1
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <check_condition+0x4b4>
    1ba4:	87 c3       	rjmp	.+1806   	; 0x22b4 <__stack+0xb5>
    1ba6:	ef 2b       	or	r30, r31
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <check_condition+0x4ba>
    1baa:	74 c5       	rjmp	.+2792   	; 0x2694 <__stack+0x495>
   {
	   return (r);
   }
   else if (pre_node == 12 && curr_node == 1 && next_node == 2)
    1bac:	42 30       	cpi	r20, 0x02	; 2
    1bae:	51 05       	cpc	r21, r1
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <check_condition+0x4c2>
    1bb2:	73 c5       	rjmp	.+2790   	; 0x269a <__stack+0x49b>
   {
	   return (l);
   }
   else if (pre_node == 12 && curr_node == 1 && next_node == 29)
    1bb4:	4d 31       	cpi	r20, 0x1D	; 29
    1bb6:	51 05       	cpc	r21, r1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <check_condition+0x4ca>
    1bba:	b7 c4       	rjmp	.+2414   	; 0x252a <__stack+0x32b>
    1bbc:	71 c5       	rjmp	.+2786   	; 0x26a0 <__stack+0x4a1>
   {
	   return (sf);
   }
   else if (pre_node == 13 && curr_node == 12 && next_node == 1)
    1bbe:	8d 30       	cpi	r24, 0x0D	; 13
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	09 f5       	brne	.+66     	; 0x1c06 <check_condition+0x514>
    1bc4:	6c 30       	cpi	r22, 0x0C	; 12
    1bc6:	71 05       	cpc	r23, r1
    1bc8:	49 f4       	brne	.+18     	; 0x1bdc <check_condition+0x4ea>
    1bca:	41 30       	cpi	r20, 0x01	; 1
    1bcc:	51 05       	cpc	r21, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <check_condition+0x4e0>
    1bd0:	6a c5       	rjmp	.+2772   	; 0x26a6 <__stack+0x4a7>
   {
	   return (r);
   }

   else if (pre_node == 13 && curr_node == 12 && next_node == 11)
    1bd2:	4b 30       	cpi	r20, 0x0B	; 11
    1bd4:	51 05       	cpc	r21, r1
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <check_condition+0x4e8>
    1bd8:	a8 c4       	rjmp	.+2384   	; 0x252a <__stack+0x32b>
    1bda:	68 c5       	rjmp	.+2768   	; 0x26ac <__stack+0x4ad>
   {
	   return (f);
   }
   else if (pre_node == 13 && curr_node == 0 && next_node == 1)
    1bdc:	61 15       	cp	r22, r1
    1bde:	71 05       	cpc	r23, r1
    1be0:	29 f4       	brne	.+10     	; 0x1bec <check_condition+0x4fa>
    1be2:	41 30       	cpi	r20, 0x01	; 1
    1be4:	51 05       	cpc	r21, r1
    1be6:	09 f0       	breq	.+2      	; 0x1bea <check_condition+0x4f8>
    1be8:	60 c7       	rjmp	.+3776   	; 0x2aaa <__stack+0x8ab>
    1bea:	63 c5       	rjmp	.+2758   	; 0x26b2 <__stack+0x4b3>
   {
	   return (l);
   }
   else if (pre_node == 13 && curr_node == 14 && next_node == 22)
    1bec:	6e 30       	cpi	r22, 0x0E	; 14
    1bee:	71 05       	cpc	r23, r1
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <check_condition+0x502>
    1bf2:	71 c3       	rjmp	.+1762   	; 0x22d6 <__stack+0xd7>
    1bf4:	46 31       	cpi	r20, 0x16	; 22
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <check_condition+0x50a>
    1bfa:	5e c5       	rjmp	.+2748   	; 0x26b8 <__stack+0x4b9>
   {
	   return (r);
   }
   else if (pre_node == 13 && curr_node == 14 && next_node == 15)
    1bfc:	4f 30       	cpi	r20, 0x0F	; 15
    1bfe:	51 05       	cpc	r21, r1
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <check_condition+0x512>
    1c02:	93 c4       	rjmp	.+2342   	; 0x252a <__stack+0x32b>
    1c04:	5c c5       	rjmp	.+2744   	; 0x26be <__stack+0x4bf>
   }
   else if (pre_node == 13 && curr_node == 0 && next_node == 28)
   {
	   return (sf);
   }
   else if (pre_node == 14 && curr_node == 15 && next_node == 16)
    1c06:	8e 30       	cpi	r24, 0x0E	; 14
    1c08:	91 05       	cpc	r25, r1
    1c0a:	e1 f4       	brne	.+56     	; 0x1c44 <check_condition+0x552>
    1c0c:	6f 30       	cpi	r22, 0x0F	; 15
    1c0e:	71 05       	cpc	r23, r1
    1c10:	29 f4       	brne	.+10     	; 0x1c1c <check_condition+0x52a>
    1c12:	40 31       	cpi	r20, 0x10	; 16
    1c14:	51 05       	cpc	r21, r1
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <check_condition+0x528>
    1c18:	4c c7       	rjmp	.+3736   	; 0x2ab2 <__stack+0x8b3>
    1c1a:	54 c5       	rjmp	.+2728   	; 0x26c4 <__stack+0x4c5>
   {
	   return (f);
   }
   else if (pre_node == 14 && curr_node == 13 && next_node == 12)
    1c1c:	6d 30       	cpi	r22, 0x0D	; 13
    1c1e:	71 05       	cpc	r23, r1
    1c20:	41 f4       	brne	.+16     	; 0x1c32 <check_condition+0x540>
    1c22:	4c 30       	cpi	r20, 0x0C	; 12
    1c24:	51 05       	cpc	r21, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <check_condition+0x538>
    1c28:	50 c5       	rjmp	.+2720   	; 0x26ca <__stack+0x4cb>
   {
	   return (l);
   }
   else if (pre_node == 14 && curr_node == 13 && next_node == 0)
    1c2a:	ef 2b       	or	r30, r31
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <check_condition+0x53e>
    1c2e:	7d c4       	rjmp	.+2298   	; 0x252a <__stack+0x32b>
    1c30:	4f c5       	rjmp	.+2718   	; 0x26d0 <__stack+0x4d1>
   {
	   return (f);
   }
   else if (pre_node == 14 && curr_node == 22 && next_node == 34)
    1c32:	66 31       	cpi	r22, 0x16	; 22
    1c34:	71 05       	cpc	r23, r1
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <check_condition+0x548>
    1c38:	5b c3       	rjmp	.+1718   	; 0x22f0 <__stack+0xf1>
    1c3a:	42 32       	cpi	r20, 0x22	; 34
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <check_condition+0x550>
    1c40:	74 c4       	rjmp	.+2280   	; 0x252a <__stack+0x32b>
    1c42:	49 c5       	rjmp	.+2706   	; 0x26d6 <__stack+0x4d7>
   }
   else if (pre_node == 14 && curr_node == 15 && next_node == 35)
   {
	   return (l);
   }
   else if (pre_node == 15 && curr_node == 14 && next_node == 13)
    1c44:	8f 30       	cpi	r24, 0x0F	; 15
    1c46:	91 05       	cpc	r25, r1
    1c48:	e9 f4       	brne	.+58     	; 0x1c84 <check_condition+0x592>
    1c4a:	6e 30       	cpi	r22, 0x0E	; 14
    1c4c:	71 05       	cpc	r23, r1
    1c4e:	49 f4       	brne	.+18     	; 0x1c62 <check_condition+0x570>
    1c50:	4d 30       	cpi	r20, 0x0D	; 13
    1c52:	51 05       	cpc	r21, r1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <check_condition+0x566>
    1c56:	42 c5       	rjmp	.+2692   	; 0x26dc <__stack+0x4dd>
   {
	   return (l);
   }
   else if (pre_node == 15 && curr_node == 14 && next_node == 22)
    1c58:	46 31       	cpi	r20, 0x16	; 22
    1c5a:	51 05       	cpc	r21, r1
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <check_condition+0x56e>
    1c5e:	65 c4       	rjmp	.+2250   	; 0x252a <__stack+0x32b>
    1c60:	40 c5       	rjmp	.+2688   	; 0x26e2 <__stack+0x4e3>
   {
	   return (r);
   }
   else if (pre_node == 15 && curr_node == 16 && next_node == 11)
    1c62:	60 31       	cpi	r22, 0x10	; 16
    1c64:	71 05       	cpc	r23, r1
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <check_condition+0x578>
    1c68:	51 c3       	rjmp	.+1698   	; 0x230c <__stack+0x10d>
    1c6a:	4b 30       	cpi	r20, 0x0B	; 11
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <check_condition+0x580>
    1c70:	3b c5       	rjmp	.+2678   	; 0x26e8 <__stack+0x4e9>
   {
	   return (r);
   }
   else if (pre_node == 15 && curr_node == 16 && next_node == 17)
    1c72:	41 31       	cpi	r20, 0x11	; 17
    1c74:	51 05       	cpc	r21, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <check_condition+0x588>
    1c78:	3a c5       	rjmp	.+2676   	; 0x26ee <__stack+0x4ef>
   {
	   return (l);
   }
   else if (pre_node == 15 && curr_node == 16 && next_node == 22)
    1c7a:	46 31       	cpi	r20, 0x16	; 22
    1c7c:	51 05       	cpc	r21, r1
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <check_condition+0x590>
    1c80:	54 c4       	rjmp	.+2216   	; 0x252a <__stack+0x32b>
    1c82:	38 c5       	rjmp	.+2672   	; 0x26f4 <__stack+0x4f5>
   {
	   return (r);
   }
   else if (pre_node == 16 && curr_node == 15 && next_node == 14)
    1c84:	80 31       	cpi	r24, 0x10	; 16
    1c86:	91 05       	cpc	r25, r1
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <check_condition+0x59a>
    1c8a:	49 c0       	rjmp	.+146    	; 0x1d1e <check_condition+0x62c>
    1c8c:	6f 30       	cpi	r22, 0x0F	; 15
    1c8e:	71 05       	cpc	r23, r1
    1c90:	29 f4       	brne	.+10     	; 0x1c9c <check_condition+0x5aa>
    1c92:	4e 30       	cpi	r20, 0x0E	; 14
    1c94:	51 05       	cpc	r21, r1
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <check_condition+0x5a8>
    1c98:	10 c7       	rjmp	.+3616   	; 0x2aba <__stack+0x8bb>
    1c9a:	2f c5       	rjmp	.+2654   	; 0x26fa <__stack+0x4fb>
   {
	   return (f);
   }
   else if (pre_node == 16 && curr_node == 11 && next_node == 12)
    1c9c:	6b 30       	cpi	r22, 0x0B	; 11
    1c9e:	71 05       	cpc	r23, r1
    1ca0:	e9 f4       	brne	.+58     	; 0x1cdc <check_condition+0x5ea>
    1ca2:	4c 30       	cpi	r20, 0x0C	; 12
    1ca4:	51 05       	cpc	r21, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <check_condition+0x5b8>
    1ca8:	2b c5       	rjmp	.+2646   	; 0x2700 <__stack+0x501>
   {
	   return (r);
   }
   else if (pre_node == 16 && curr_node == 11 && next_node == 10)
    1caa:	4a 30       	cpi	r20, 0x0A	; 10
    1cac:	51 05       	cpc	r21, r1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <check_condition+0x5c0>
    1cb0:	3c c4       	rjmp	.+2168   	; 0x252a <__stack+0x32b>
   {
	    forward();
    1cb2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1cb6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1cba:	86 e9       	ldi	r24, 0x96	; 150
    1cbc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 16 && curr_node == 11 && next_node == 10)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1cc0:	64 e6       	ldi	r22, 0x64	; 100
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1cd2:	86 39       	cpi	r24, 0x96	; 150
    1cd4:	d8 f3       	brcs	.-10     	; 0x1ccc <check_condition+0x5da>
	   return (f);
    1cd6:	21 e0       	ldi	r18, 0x01	; 1
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	c4 c6       	rjmp	.+3464   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 16 && curr_node == 17 && next_node == 23)
    1cdc:	61 31       	cpi	r22, 0x11	; 17
    1cde:	71 05       	cpc	r23, r1
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <check_condition+0x5f2>
    1ce2:	2f c3       	rjmp	.+1630   	; 0x2342 <__stack+0x143>
    1ce4:	47 31       	cpi	r20, 0x17	; 23
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <check_condition+0x5fa>
    1cea:	0d c5       	rjmp	.+2586   	; 0x2706 <__stack+0x507>
   {
	   return (ll);
   }
   else if (pre_node == 16 && curr_node == 17 && next_node == 18)
    1cec:	42 31       	cpi	r20, 0x12	; 18
    1cee:	51 05       	cpc	r21, r1
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <check_condition+0x602>
    1cf2:	1b c4       	rjmp	.+2102   	; 0x252a <__stack+0x32b>
   {
	    forward();
    1cf4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1cf8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1cfc:	86 e9       	ldi	r24, 0x96	; 150
    1cfe:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 16 && curr_node == 17 && next_node == 18)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1d02:	64 e6       	ldi	r22, 0x64	; 100
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1d14:	86 39       	cpi	r24, 0x96	; 150
    1d16:	d8 f3       	brcs	.-10     	; 0x1d0e <check_condition+0x61c>
	   return (f);
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	a3 c6       	rjmp	.+3398   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 16 && curr_node == 15 && next_node == 35)
   {
	   return (sr);
   }
   else if (pre_node == 17 && curr_node == 16 && next_node == 15)
    1d1e:	81 31       	cpi	r24, 0x11	; 17
    1d20:	91 05       	cpc	r25, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <check_condition+0x634>
    1d24:	49 c0       	rjmp	.+146    	; 0x1db8 <check_condition+0x6c6>
    1d26:	60 31       	cpi	r22, 0x10	; 16
    1d28:	71 05       	cpc	r23, r1
    1d2a:	e9 f4       	brne	.+58     	; 0x1d66 <check_condition+0x674>
    1d2c:	4f 30       	cpi	r20, 0x0F	; 15
    1d2e:	51 05       	cpc	r21, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <check_condition+0x642>
    1d32:	ec c4       	rjmp	.+2520   	; 0x270c <__stack+0x50d>
   {
	   return (r);
   }
   else if (pre_node == 17 && curr_node == 16 && next_node == 11)
    1d34:	4b 30       	cpi	r20, 0x0B	; 11
    1d36:	51 05       	cpc	r21, r1
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <check_condition+0x64a>
    1d3a:	f7 c3       	rjmp	.+2030   	; 0x252a <__stack+0x32b>
   {
	   forward();
    1d3c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1d40:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1d44:	86 e9       	ldi	r24, 0x96	; 150
    1d46:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 17 && curr_node == 16 && next_node == 11)
   {
	   forward();
	   velocity(0,150);
	   delay(100);
    1d4a:	64 e6       	ldi	r22, 0x64	; 100
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	  while(ADC_Conversion(2)<0x96);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1d5c:	86 39       	cpi	r24, 0x96	; 150
    1d5e:	d8 f3       	brcs	.-10     	; 0x1d56 <check_condition+0x664>
	   return (f);
    1d60:	21 e0       	ldi	r18, 0x01	; 1
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	7f c6       	rjmp	.+3326   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 17 && curr_node == 18 && next_node == 19)
    1d66:	62 31       	cpi	r22, 0x12	; 18
    1d68:	71 05       	cpc	r23, r1
    1d6a:	e9 f4       	brne	.+58     	; 0x1da6 <check_condition+0x6b4>
    1d6c:	43 31       	cpi	r20, 0x13	; 19
    1d6e:	51 05       	cpc	r21, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <check_condition+0x682>
    1d72:	cf c4       	rjmp	.+2462   	; 0x2712 <__stack+0x513>
   {
	   return (r);
   }
   else if (pre_node == 17 && curr_node == 18 && next_node == 9)
    1d74:	49 30       	cpi	r20, 0x09	; 9
    1d76:	51 05       	cpc	r21, r1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <check_condition+0x68a>
    1d7a:	d7 c3       	rjmp	.+1966   	; 0x252a <__stack+0x32b>
   {
	    forward();
    1d7c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1d80:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1d84:	86 e9       	ldi	r24, 0x96	; 150
    1d86:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 17 && curr_node == 18 && next_node == 9)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1d8a:	64 e6       	ldi	r22, 0x64	; 100
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1d9c:	86 39       	cpi	r24, 0x96	; 150
    1d9e:	d8 f3       	brcs	.-10     	; 0x1d96 <check_condition+0x6a4>
	   return (f);
    1da0:	21 e0       	ldi	r18, 0x01	; 1
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	5f c6       	rjmp	.+3262   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 17 && curr_node == 23 && next_node == 24)
    1da6:	67 31       	cpi	r22, 0x17	; 23
    1da8:	71 05       	cpc	r23, r1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <check_condition+0x6bc>
    1dac:	d7 c2       	rjmp	.+1454   	; 0x235c <__stack+0x15d>
    1dae:	48 31       	cpi	r20, 0x18	; 24
    1db0:	51 05       	cpc	r21, r1
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <check_condition+0x6c4>
    1db4:	ba c3       	rjmp	.+1908   	; 0x252a <__stack+0x32b>
    1db6:	b0 c4       	rjmp	.+2400   	; 0x2718 <__stack+0x519>
   {
	   return (lf);
   }
   else if (pre_node == 18 && curr_node == 19 && next_node == 20)
    1db8:	82 31       	cpi	r24, 0x12	; 18
    1dba:	91 05       	cpc	r25, r1
    1dbc:	a9 f5       	brne	.+106    	; 0x1e28 <check_condition+0x736>
    1dbe:	63 31       	cpi	r22, 0x13	; 19
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	29 f4       	brne	.+10     	; 0x1dce <check_condition+0x6dc>
    1dc4:	44 31       	cpi	r20, 0x14	; 20
    1dc6:	51 05       	cpc	r21, r1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <check_condition+0x6da>
    1dca:	7b c6       	rjmp	.+3318   	; 0x2ac2 <__stack+0x8c3>
    1dcc:	a8 c4       	rjmp	.+2384   	; 0x271e <__stack+0x51f>
   {
	   return (f);
   }
   else if (pre_node == 18 && curr_node == 9 && next_node == 10)
    1dce:	69 30       	cpi	r22, 0x09	; 9
    1dd0:	71 05       	cpc	r23, r1
    1dd2:	49 f4       	brne	.+18     	; 0x1de6 <check_condition+0x6f4>
    1dd4:	4a 30       	cpi	r20, 0x0A	; 10
    1dd6:	51 05       	cpc	r21, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <check_condition+0x6ea>
    1dda:	a4 c4       	rjmp	.+2376   	; 0x2724 <__stack+0x525>
   {
	   return (f);
   }
   else if (pre_node == 18 && curr_node == 9 && next_node == 8)
    1ddc:	48 30       	cpi	r20, 0x08	; 8
    1dde:	51 05       	cpc	r21, r1
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <check_condition+0x6f2>
    1de2:	a3 c3       	rjmp	.+1862   	; 0x252a <__stack+0x32b>
    1de4:	a2 c4       	rjmp	.+2372   	; 0x272a <__stack+0x52b>
   {
	   return (l);
   }
   else if (pre_node == 18 && curr_node == 17 && next_node == 16)
    1de6:	61 31       	cpi	r22, 0x11	; 17
    1de8:	71 05       	cpc	r23, r1
    1dea:	09 f0       	breq	.+2      	; 0x1dee <check_condition+0x6fc>
    1dec:	c5 c2       	rjmp	.+1418   	; 0x2378 <__stack+0x179>
    1dee:	40 31       	cpi	r20, 0x10	; 16
    1df0:	51 05       	cpc	r21, r1
    1df2:	a9 f4       	brne	.+42     	; 0x1e1e <check_condition+0x72c>
   {
	    forward();
    1df4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1df8:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5BL = (unsigned char)right_motor;
    1dfc:	86 e9       	ldi	r24, 0x96	; 150
    1dfe:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
   }
   else if (pre_node == 18 && curr_node == 17 && next_node == 16)
   {
	    forward();
	    velocity(0,150);
		delay(100);
    1e02:	64 e6       	ldi	r22, 0x64	; 100
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	    while(ADC_Conversion(2)<0x96);
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    1e14:	86 39       	cpi	r24, 0x96	; 150
    1e16:	d8 f3       	brcs	.-10     	; 0x1e0e <check_condition+0x71c>
	   return (l);
    1e18:	22 e0       	ldi	r18, 0x02	; 2
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	23 c6       	rjmp	.+3142   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 18 && curr_node == 17 && next_node == 23)
    1e1e:	47 31       	cpi	r20, 0x17	; 23
    1e20:	51 05       	cpc	r21, r1
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <check_condition+0x734>
    1e24:	82 c3       	rjmp	.+1796   	; 0x252a <__stack+0x32b>
    1e26:	84 c4       	rjmp	.+2312   	; 0x2730 <__stack+0x531>
   }
   else if (pre_node == 18 && curr_node == 19 && next_node == 36)
   {
	   return (sl);
   }
   else if (pre_node == 19 && curr_node == 20 && next_node == 21)
    1e28:	83 31       	cpi	r24, 0x13	; 19
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	c9 f4       	brne	.+50     	; 0x1e60 <check_condition+0x76e>
    1e2e:	64 31       	cpi	r22, 0x14	; 20
    1e30:	71 05       	cpc	r23, r1
    1e32:	49 f4       	brne	.+18     	; 0x1e46 <check_condition+0x754>
    1e34:	45 31       	cpi	r20, 0x15	; 21
    1e36:	51 05       	cpc	r21, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <check_condition+0x74a>
    1e3a:	7d c4       	rjmp	.+2298   	; 0x2736 <__stack+0x537>
   {
	   return (l);
   }
   else if (pre_node == 19 && curr_node == 20 && next_node == 7)
    1e3c:	47 30       	cpi	r20, 0x07	; 7
    1e3e:	51 05       	cpc	r21, r1
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <check_condition+0x752>
    1e42:	73 c3       	rjmp	.+1766   	; 0x252a <__stack+0x32b>
    1e44:	7b c4       	rjmp	.+2294   	; 0x273c <__stack+0x53d>
   {
	   return (r);
   }
   else if (pre_node == 19 && curr_node == 18 && next_node == 17)
    1e46:	62 31       	cpi	r22, 0x12	; 18
    1e48:	71 05       	cpc	r23, r1
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <check_condition+0x75c>
    1e4c:	a3 c2       	rjmp	.+1350   	; 0x2394 <__stack+0x195>
    1e4e:	41 31       	cpi	r20, 0x11	; 17
    1e50:	51 05       	cpc	r21, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <check_condition+0x764>
    1e54:	76 c4       	rjmp	.+2284   	; 0x2742 <__stack+0x543>
   {
	   return (l);
   }
   else if (pre_node == 19 && curr_node == 18 && next_node == 9)
    1e56:	49 30       	cpi	r20, 0x09	; 9
    1e58:	51 05       	cpc	r21, r1
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <check_condition+0x76c>
    1e5c:	66 c3       	rjmp	.+1740   	; 0x252a <__stack+0x32b>
    1e5e:	74 c4       	rjmp	.+2280   	; 0x2748 <__stack+0x549>
   {
	   return (l);
   }
   else if (pre_node == 20 && curr_node == 19 && next_node == 18)
    1e60:	84 31       	cpi	r24, 0x14	; 20
    1e62:	91 05       	cpc	r25, r1
    1e64:	e9 f4       	brne	.+58     	; 0x1ea0 <check_condition+0x7ae>
    1e66:	63 31       	cpi	r22, 0x13	; 19
    1e68:	71 05       	cpc	r23, r1
    1e6a:	29 f4       	brne	.+10     	; 0x1e76 <check_condition+0x784>
    1e6c:	42 31       	cpi	r20, 0x12	; 18
    1e6e:	51 05       	cpc	r21, r1
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <check_condition+0x782>
    1e72:	2b c6       	rjmp	.+3158   	; 0x2aca <__stack+0x8cb>
    1e74:	6c c4       	rjmp	.+2264   	; 0x274e <__stack+0x54f>
   {
	   return (f);
   }
   else if (pre_node == 20 && curr_node == 7 && next_node == 8)
    1e76:	67 30       	cpi	r22, 0x07	; 7
    1e78:	71 05       	cpc	r23, r1
    1e7a:	49 f4       	brne	.+18     	; 0x1e8e <check_condition+0x79c>
    1e7c:	48 30       	cpi	r20, 0x08	; 8
    1e7e:	51 05       	cpc	r21, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <check_condition+0x792>
    1e82:	68 c4       	rjmp	.+2256   	; 0x2754 <__stack+0x555>
   {
	   return (r);
   }
   else if (pre_node == 20 && curr_node == 7 && next_node == 6)
    1e84:	46 30       	cpi	r20, 0x06	; 6
    1e86:	51 05       	cpc	r21, r1
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <check_condition+0x79a>
    1e8a:	4f c3       	rjmp	.+1694   	; 0x252a <__stack+0x32b>
    1e8c:	66 c4       	rjmp	.+2252   	; 0x275a <__stack+0x55b>
   }
   else if (pre_node == 20 && curr_node == 19 && next_node == 36)
   {
	   return (r);
   }
   else if (pre_node == 20 && curr_node == 21 && next_node == 37)
    1e8e:	65 31       	cpi	r22, 0x15	; 21
    1e90:	71 05       	cpc	r23, r1
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <check_condition+0x7a4>
    1e94:	90 c2       	rjmp	.+1312   	; 0x23b6 <__stack+0x1b7>
    1e96:	45 32       	cpi	r20, 0x25	; 37
    1e98:	51 05       	cpc	r21, r1
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <check_condition+0x7ac>
    1e9c:	46 c3       	rjmp	.+1676   	; 0x252a <__stack+0x32b>
    1e9e:	60 c4       	rjmp	.+2240   	; 0x2760 <__stack+0x561>
   {
	   return (sf);
   }
   else if (pre_node == 21 && curr_node == 20 && next_node == 19)
    1ea0:	85 31       	cpi	r24, 0x15	; 21
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	e9 f4       	brne	.+58     	; 0x1ee0 <check_condition+0x7ee>
    1ea6:	64 31       	cpi	r22, 0x14	; 20
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <check_condition+0x7bc>
    1eac:	95 c2       	rjmp	.+1322   	; 0x23d8 <__stack+0x1d9>
    1eae:	43 31       	cpi	r20, 0x13	; 19
    1eb0:	51 05       	cpc	r21, r1
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <check_condition+0x7c4>
    1eb4:	58 c4       	rjmp	.+2224   	; 0x2766 <__stack+0x567>
   {
	   return (r);
   }
   else if (pre_node == 21 && curr_node == 20 && next_node == 7)
    1eb6:	47 30       	cpi	r20, 0x07	; 7
    1eb8:	51 05       	cpc	r21, r1
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <check_condition+0x7cc>
    1ebc:	36 c3       	rjmp	.+1644   	; 0x252a <__stack+0x32b>
   {
		blackline_data();
    1ebe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <check_condition+0x7d8>
		{
			blackline_data();
    1ec4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			blackline_lifting();
    1ec8:	3d db       	rcall	.-2438   	; 0x1544 <blackline_lifting>
	   return (r);
   }
   else if (pre_node == 21 && curr_node == 20 && next_node == 7)
   {
		blackline_data();
		while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    1eca:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    1ece:	87 39       	cpi	r24, 0x97	; 151
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <check_condition+0x7e2>
    1ed2:	ff c5       	rjmp	.+3070   	; 0x2ad2 <__stack+0x8d3>
    1ed4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    1ed8:	87 39       	cpi	r24, 0x97	; 151
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <check_condition+0x7ec>
    1edc:	00 c6       	rjmp	.+3072   	; 0x2ade <__stack+0x8df>
    1ede:	f2 cf       	rjmp	.-28     	; 0x1ec4 <check_condition+0x7d2>
			blackline_data();
			blackline_lifting();
		}
	   return (0);
   }
   else if (pre_node == 22 && curr_node == 14 && next_node == 13)
    1ee0:	86 31       	cpi	r24, 0x16	; 22
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	69 f4       	brne	.+26     	; 0x1f00 <check_condition+0x80e>
    1ee6:	6e 30       	cpi	r22, 0x0E	; 14
    1ee8:	71 05       	cpc	r23, r1
    1eea:	09 f0       	breq	.+2      	; 0x1eee <check_condition+0x7fc>
    1eec:	82 c2       	rjmp	.+1284   	; 0x23f2 <__stack+0x1f3>
    1eee:	4d 30       	cpi	r20, 0x0D	; 13
    1ef0:	51 05       	cpc	r21, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <check_condition+0x804>
    1ef4:	3b c4       	rjmp	.+2166   	; 0x276c <__stack+0x56d>
   {
	   return (f);
   }
   else if (pre_node == 22 && curr_node == 14 && next_node == 15)
    1ef6:	4f 30       	cpi	r20, 0x0F	; 15
    1ef8:	51 05       	cpc	r21, r1
    1efa:	09 f0       	breq	.+2      	; 0x1efe <check_condition+0x80c>
    1efc:	16 c3       	rjmp	.+1580   	; 0x252a <__stack+0x32b>
    1efe:	39 c4       	rjmp	.+2162   	; 0x2772 <__stack+0x573>
   {
	   return (l);
   }
   else if (pre_node == 23 && curr_node == 17 && next_node == 16)
    1f00:	87 31       	cpi	r24, 0x17	; 23
    1f02:	91 05       	cpc	r25, r1
    1f04:	c9 f4       	brne	.+50     	; 0x1f38 <check_condition+0x846>
    1f06:	61 31       	cpi	r22, 0x11	; 17
    1f08:	71 05       	cpc	r23, r1
    1f0a:	49 f4       	brne	.+18     	; 0x1f1e <check_condition+0x82c>
    1f0c:	40 31       	cpi	r20, 0x10	; 16
    1f0e:	51 05       	cpc	r21, r1
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <check_condition+0x822>
    1f12:	32 c4       	rjmp	.+2148   	; 0x2778 <__stack+0x579>
   {
	   return (r);
   }
   else if (pre_node == 23 && curr_node == 17 && next_node == 18)
    1f14:	42 31       	cpi	r20, 0x12	; 18
    1f16:	51 05       	cpc	r21, r1
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <check_condition+0x82a>
    1f1a:	07 c3       	rjmp	.+1550   	; 0x252a <__stack+0x32b>
    1f1c:	30 c4       	rjmp	.+2144   	; 0x277e <__stack+0x57f>
   {
	   return (l);
   }
   else if (pre_node == 23 && curr_node == 24 && next_node == 25)
    1f1e:	68 31       	cpi	r22, 0x18	; 24
    1f20:	71 05       	cpc	r23, r1
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <check_condition+0x834>
    1f24:	73 c2       	rjmp	.+1254   	; 0x240c <__stack+0x20d>
    1f26:	49 31       	cpi	r20, 0x19	; 25
    1f28:	51 05       	cpc	r21, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <check_condition+0x83c>
    1f2c:	2b c4       	rjmp	.+2134   	; 0x2784 <__stack+0x585>
   {
	   return (ll1);
   }
   else if (pre_node == 23 && curr_node == 24 && next_node == 26)
    1f2e:	4a 31       	cpi	r20, 0x1A	; 26
    1f30:	51 05       	cpc	r21, r1
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <check_condition+0x844>
    1f34:	fa c2       	rjmp	.+1524   	; 0x252a <__stack+0x32b>
    1f36:	29 c4       	rjmp	.+2130   	; 0x278a <__stack+0x58b>
   {
	   return (lr1);
   }
   else if (pre_node == 24 && curr_node == 23 && next_node == 17)
    1f38:	88 31       	cpi	r24, 0x18	; 24
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	c9 f4       	brne	.+50     	; 0x1f70 <check_condition+0x87e>
    1f3e:	67 31       	cpi	r22, 0x17	; 23
    1f40:	71 05       	cpc	r23, r1
    1f42:	29 f4       	brne	.+10     	; 0x1f4e <check_condition+0x85c>
    1f44:	41 31       	cpi	r20, 0x11	; 17
    1f46:	51 05       	cpc	r21, r1
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <check_condition+0x85a>
    1f4a:	ef c2       	rjmp	.+1502   	; 0x252a <__stack+0x32b>
    1f4c:	21 c4       	rjmp	.+2114   	; 0x2790 <__stack+0x591>
   {
	   return (f);
   }
   else if (pre_node == 24 && curr_node == 25 && next_node == 38)
    1f4e:	69 31       	cpi	r22, 0x19	; 25
    1f50:	71 05       	cpc	r23, r1
    1f52:	29 f4       	brne	.+10     	; 0x1f5e <check_condition+0x86c>
    1f54:	46 32       	cpi	r20, 0x26	; 38
    1f56:	51 05       	cpc	r21, r1
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <check_condition+0x86a>
    1f5a:	e7 c2       	rjmp	.+1486   	; 0x252a <__stack+0x32b>
    1f5c:	1c c4       	rjmp	.+2104   	; 0x2796 <__stack+0x597>
   {
	   return (sf);
   }
   else if (pre_node == 24 && curr_node == 26 && next_node == 39)
    1f5e:	6a 31       	cpi	r22, 0x1A	; 26
    1f60:	71 05       	cpc	r23, r1
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <check_condition+0x874>
    1f64:	60 c2       	rjmp	.+1216   	; 0x2426 <__stack+0x227>
    1f66:	47 32       	cpi	r20, 0x27	; 39
    1f68:	51 05       	cpc	r21, r1
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <check_condition+0x87c>
    1f6c:	de c2       	rjmp	.+1468   	; 0x252a <__stack+0x32b>
    1f6e:	16 c4       	rjmp	.+2092   	; 0x279c <__stack+0x59d>
   {
	   return (sf);
   }
   else if (pre_node == 25 && curr_node == 24 && next_node == 23)
    1f70:	89 31       	cpi	r24, 0x19	; 25
    1f72:	91 05       	cpc	r25, r1
    1f74:	49 f4       	brne	.+18     	; 0x1f88 <check_condition+0x896>
    1f76:	68 31       	cpi	r22, 0x18	; 24
    1f78:	71 05       	cpc	r23, r1
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <check_condition+0x88c>
    1f7c:	62 c2       	rjmp	.+1220   	; 0x2442 <__stack+0x243>
    1f7e:	47 31       	cpi	r20, 0x17	; 23
    1f80:	51 05       	cpc	r21, r1
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <check_condition+0x894>
    1f84:	d2 c2       	rjmp	.+1444   	; 0x252a <__stack+0x32b>
    1f86:	0d c4       	rjmp	.+2074   	; 0x27a2 <__stack+0x5a3>
   {
	   return (lr2);
   }
   else if (pre_node == 26 && curr_node == 24 && next_node == 23)
    1f88:	8a 31       	cpi	r24, 0x1A	; 26
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	49 f4       	brne	.+18     	; 0x1fa0 <check_condition+0x8ae>
    1f8e:	68 31       	cpi	r22, 0x18	; 24
    1f90:	71 05       	cpc	r23, r1
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <check_condition+0x8a4>
    1f94:	63 c2       	rjmp	.+1222   	; 0x245c <__stack+0x25d>
    1f96:	47 31       	cpi	r20, 0x17	; 23
    1f98:	51 05       	cpc	r21, r1
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <check_condition+0x8ac>
    1f9c:	c6 c2       	rjmp	.+1420   	; 0x252a <__stack+0x32b>
    1f9e:	04 c4       	rjmp	.+2056   	; 0x27a8 <__stack+0x5a9>
   {
	   return (ll);
   }
   else if (pre_node == 27 && curr_node == 10 && next_node == 3)
    1fa0:	8b 31       	cpi	r24, 0x1B	; 27
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	c9 f4       	brne	.+50     	; 0x1fd8 <check_condition+0x8e6>
    1fa6:	6a 30       	cpi	r22, 0x0A	; 10
    1fa8:	71 05       	cpc	r23, r1
    1faa:	69 f4       	brne	.+26     	; 0x1fc6 <check_condition+0x8d4>
    1fac:	43 30       	cpi	r20, 0x03	; 3
    1fae:	51 05       	cpc	r21, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <check_condition+0x8c2>
    1fb2:	fd c3       	rjmp	.+2042   	; 0x27ae <__stack+0x5af>
   {
	   return (f);
   }
   else if (pre_node == 27 && curr_node == 10 && next_node == 11)
    1fb4:	4b 30       	cpi	r20, 0x0B	; 11
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <check_condition+0x8ca>
    1fba:	fc c3       	rjmp	.+2040   	; 0x27b4 <__stack+0x5b5>
   {
	   return (r);
   }
   else if (pre_node == 27 && curr_node == 10 && next_node == 9)
    1fbc:	49 30       	cpi	r20, 0x09	; 9
    1fbe:	51 05       	cpc	r21, r1
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <check_condition+0x8d2>
    1fc2:	b3 c2       	rjmp	.+1382   	; 0x252a <__stack+0x32b>
    1fc4:	fa c3       	rjmp	.+2036   	; 0x27ba <__stack+0x5bb>
   {
	   return (l);
   }
   else if (pre_node == 27 && curr_node == 27 && next_node == 10)
    1fc6:	6b 31       	cpi	r22, 0x1B	; 27
    1fc8:	71 05       	cpc	r23, r1
    1fca:	09 f0       	breq	.+2      	; 0x1fce <check_condition+0x8dc>
    1fcc:	9d c2       	rjmp	.+1338   	; 0x2508 <__stack+0x309>
    1fce:	4a 30       	cpi	r20, 0x0A	; 10
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <check_condition+0x8e4>
    1fd4:	aa c2       	rjmp	.+1364   	; 0x252a <__stack+0x32b>
    1fd6:	f4 c3       	rjmp	.+2024   	; 0x27c0 <__stack+0x5c1>
   {
	   return (f);
   }

   else if (pre_node == 28 && curr_node == 0 && next_node == 13)
    1fd8:	8c 31       	cpi	r24, 0x1C	; 28
    1fda:	91 05       	cpc	r25, r1
    1fdc:	69 f4       	brne	.+26     	; 0x1ff8 <check_condition+0x906>
    1fde:	61 15       	cp	r22, r1
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <check_condition+0x8f4>
    1fe4:	48 c2       	rjmp	.+1168   	; 0x2476 <__stack+0x277>
    1fe6:	4d 30       	cpi	r20, 0x0D	; 13
    1fe8:	51 05       	cpc	r21, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <check_condition+0x8fc>
    1fec:	ec c3       	rjmp	.+2008   	; 0x27c6 <__stack+0x5c7>
   {
	   return (bf);
   }

   else if (pre_node == 28 && curr_node == 0 && next_node == 1)
    1fee:	41 30       	cpi	r20, 0x01	; 1
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <check_condition+0x904>
    1ff4:	92 c2       	rjmp	.+1316   	; 0x251a <__stack+0x31b>
    1ff6:	ea c3       	rjmp	.+2004   	; 0x27cc <__stack+0x5cd>
   {
	   return (lx);
   }
   else if (pre_node == 29 && curr_node == 1 && next_node == 0)
    1ff8:	8d 31       	cpi	r24, 0x1D	; 29
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	81 f4       	brne	.+32     	; 0x201e <check_condition+0x92c>
    1ffe:	61 30       	cpi	r22, 0x01	; 1
    2000:	71 05       	cpc	r23, r1
    2002:	09 f0       	breq	.+2      	; 0x2006 <check_condition+0x914>
    2004:	40 c2       	rjmp	.+1152   	; 0x2486 <__stack+0x287>
    2006:	ef 2b       	or	r30, r31
    2008:	09 f4       	brne	.+2      	; 0x200c <check_condition+0x91a>
    200a:	e3 c3       	rjmp	.+1990   	; 0x27d2 <__stack+0x5d3>
   {
	   return (rx);
   }
   else if (pre_node == 29 && curr_node == 1 && next_node == 2)
    200c:	42 30       	cpi	r20, 0x02	; 2
    200e:	51 05       	cpc	r21, r1
    2010:	09 f4       	brne	.+2      	; 0x2014 <check_condition+0x922>
    2012:	e2 c3       	rjmp	.+1988   	; 0x27d8 <__stack+0x5d9>
   {
	   return (lx);
   }
   else if (pre_node == 29 && curr_node == 1 && next_node == 12)
    2014:	4c 30       	cpi	r20, 0x0C	; 12
    2016:	51 05       	cpc	r21, r1
    2018:	09 f0       	breq	.+2      	; 0x201c <check_condition+0x92a>
    201a:	87 c2       	rjmp	.+1294   	; 0x252a <__stack+0x32b>
    201c:	e0 c3       	rjmp	.+1984   	; 0x27de <__stack+0x5df>
   {
	   return (bf);
   }
   else if (pre_node == 30 && curr_node == 2 && next_node == 3)
    201e:	8e 31       	cpi	r24, 0x1E	; 30
    2020:	91 05       	cpc	r25, r1
    2022:	69 f4       	brne	.+26     	; 0x203e <check_condition+0x94c>
    2024:	62 30       	cpi	r22, 0x02	; 2
    2026:	71 05       	cpc	r23, r1
    2028:	09 f0       	breq	.+2      	; 0x202c <check_condition+0x93a>
    202a:	35 c2       	rjmp	.+1130   	; 0x2496 <__stack+0x297>
    202c:	43 30       	cpi	r20, 0x03	; 3
    202e:	51 05       	cpc	r21, r1
    2030:	09 f4       	brne	.+2      	; 0x2034 <check_condition+0x942>
    2032:	d8 c3       	rjmp	.+1968   	; 0x27e4 <__stack+0x5e5>
   {
	   return (lx);
   }
   else if (pre_node == 30 && curr_node == 2 && next_node == 1)
    2034:	41 30       	cpi	r20, 0x01	; 1
    2036:	51 05       	cpc	r21, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <check_condition+0x94a>
    203a:	77 c2       	rjmp	.+1262   	; 0x252a <__stack+0x32b>
    203c:	d6 c3       	rjmp	.+1964   	; 0x27ea <__stack+0x5eb>
   {
	   return (rx);
   }
   else if (pre_node == 31 && curr_node == 4 && next_node == 5)
    203e:	8f 31       	cpi	r24, 0x1F	; 31
    2040:	91 05       	cpc	r25, r1
    2042:	69 f4       	brne	.+26     	; 0x205e <check_condition+0x96c>
    2044:	64 30       	cpi	r22, 0x04	; 4
    2046:	71 05       	cpc	r23, r1
    2048:	09 f0       	breq	.+2      	; 0x204c <check_condition+0x95a>
    204a:	2d c2       	rjmp	.+1114   	; 0x24a6 <__stack+0x2a7>
    204c:	45 30       	cpi	r20, 0x05	; 5
    204e:	51 05       	cpc	r21, r1
    2050:	09 f4       	brne	.+2      	; 0x2054 <check_condition+0x962>
    2052:	ce c3       	rjmp	.+1948   	; 0x27f0 <__stack+0x5f1>
   {
	   return (lx);
   }
   else if (pre_node == 31 && curr_node == 4 && next_node == 3)
    2054:	43 30       	cpi	r20, 0x03	; 3
    2056:	51 05       	cpc	r21, r1
    2058:	09 f0       	breq	.+2      	; 0x205c <check_condition+0x96a>
    205a:	67 c2       	rjmp	.+1230   	; 0x252a <__stack+0x32b>
    205c:	cc c3       	rjmp	.+1944   	; 0x27f6 <__stack+0x5f7>
   {
	   return (rx);
   }
   else if (pre_node == 32 && curr_node == 5 && next_node == 6)
    205e:	80 32       	cpi	r24, 0x20	; 32
    2060:	91 05       	cpc	r25, r1
    2062:	89 f4       	brne	.+34     	; 0x2086 <check_condition+0x994>
    2064:	65 30       	cpi	r22, 0x05	; 5
    2066:	71 05       	cpc	r23, r1
    2068:	09 f0       	breq	.+2      	; 0x206c <check_condition+0x97a>
    206a:	24 c2       	rjmp	.+1096   	; 0x24b4 <__stack+0x2b5>
    206c:	46 30       	cpi	r20, 0x06	; 6
    206e:	51 05       	cpc	r21, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <check_condition+0x982>
    2072:	c4 c3       	rjmp	.+1928   	; 0x27fc <__stack+0x5fd>
   {
	   return (lx);
   }
   else if (pre_node == 32 && curr_node == 5 && next_node == 4)
    2074:	44 30       	cpi	r20, 0x04	; 4
    2076:	51 05       	cpc	r21, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <check_condition+0x98a>
    207a:	c3 c3       	rjmp	.+1926   	; 0x2802 <__stack+0x603>
   {
	   return (rx);
   }
   else if (pre_node == 32 && curr_node == 5 && next_node == 8)
    207c:	48 30       	cpi	r20, 0x08	; 8
    207e:	51 05       	cpc	r21, r1
    2080:	09 f0       	breq	.+2      	; 0x2084 <check_condition+0x992>
    2082:	53 c2       	rjmp	.+1190   	; 0x252a <__stack+0x32b>
    2084:	c1 c3       	rjmp	.+1922   	; 0x2808 <__stack+0x609>
   {
	   return (bf);
   }
   else if (pre_node == 33 && curr_node == 6 && next_node == 5)
    2086:	81 32       	cpi	r24, 0x21	; 33
    2088:	91 05       	cpc	r25, r1
    208a:	69 f4       	brne	.+26     	; 0x20a6 <check_condition+0x9b4>
    208c:	66 30       	cpi	r22, 0x06	; 6
    208e:	71 05       	cpc	r23, r1
    2090:	09 f0       	breq	.+2      	; 0x2094 <check_condition+0x9a2>
    2092:	17 c2       	rjmp	.+1070   	; 0x24c2 <__stack+0x2c3>
    2094:	45 30       	cpi	r20, 0x05	; 5
    2096:	51 05       	cpc	r21, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <check_condition+0x9aa>
    209a:	b9 c3       	rjmp	.+1906   	; 0x280e <__stack+0x60f>
   {
	   return (rx);
   }
   else if (pre_node == 33 && curr_node == 6 && next_node == 7)
    209c:	47 30       	cpi	r20, 0x07	; 7
    209e:	51 05       	cpc	r21, r1
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <check_condition+0x9b2>
    20a2:	43 c2       	rjmp	.+1158   	; 0x252a <__stack+0x32b>
    20a4:	b7 c3       	rjmp	.+1902   	; 0x2814 <__stack+0x615>
   {
	   return (bf);
   }
   else if (pre_node == 34 && curr_node == 22 && next_node == 14)
    20a6:	82 32       	cpi	r24, 0x22	; 34
    20a8:	91 05       	cpc	r25, r1
    20aa:	49 f4       	brne	.+18     	; 0x20be <check_condition+0x9cc>
    20ac:	66 31       	cpi	r22, 0x16	; 22
    20ae:	71 05       	cpc	r23, r1
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <check_condition+0x9c2>
    20b2:	0e c2       	rjmp	.+1052   	; 0x24d0 <__stack+0x2d1>
    20b4:	4e 30       	cpi	r20, 0x0E	; 14
    20b6:	51 05       	cpc	r21, r1
    20b8:	09 f0       	breq	.+2      	; 0x20bc <check_condition+0x9ca>
    20ba:	37 c2       	rjmp	.+1134   	; 0x252a <__stack+0x32b>
    20bc:	ae c3       	rjmp	.+1884   	; 0x281a <__stack+0x61b>
   {
	   return (f);
   }
   else if (pre_node == 35 && curr_node == 15 && next_node == 16)
    20be:	83 32       	cpi	r24, 0x23	; 35
    20c0:	91 05       	cpc	r25, r1
    20c2:	69 f4       	brne	.+26     	; 0x20de <check_condition+0x9ec>
    20c4:	6f 30       	cpi	r22, 0x0F	; 15
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f0       	breq	.+2      	; 0x20cc <check_condition+0x9da>
    20ca:	09 c2       	rjmp	.+1042   	; 0x24de <__stack+0x2df>
    20cc:	40 31       	cpi	r20, 0x10	; 16
    20ce:	51 05       	cpc	r21, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <check_condition+0x9e2>
    20d2:	a6 c3       	rjmp	.+1868   	; 0x2820 <__stack+0x621>
   {
	   return (rx);
   }
   else if (pre_node == 35 && curr_node == 15 && next_node == 14)
    20d4:	4e 30       	cpi	r20, 0x0E	; 14
    20d6:	51 05       	cpc	r21, r1
    20d8:	09 f0       	breq	.+2      	; 0x20dc <check_condition+0x9ea>
    20da:	27 c2       	rjmp	.+1102   	; 0x252a <__stack+0x32b>
    20dc:	a4 c3       	rjmp	.+1864   	; 0x2826 <__stack+0x627>
   {
	   return (l);
   }
   else if (pre_node == 36 && curr_node == 19 && next_node == 20)
    20de:	84 32       	cpi	r24, 0x24	; 36
    20e0:	91 05       	cpc	r25, r1
    20e2:	69 f4       	brne	.+26     	; 0x20fe <check_condition+0xa0c>
    20e4:	63 31       	cpi	r22, 0x13	; 19
    20e6:	71 05       	cpc	r23, r1
    20e8:	09 f0       	breq	.+2      	; 0x20ec <check_condition+0x9fa>
    20ea:	00 c2       	rjmp	.+1024   	; 0x24ec <__stack+0x2ed>
    20ec:	44 31       	cpi	r20, 0x14	; 20
    20ee:	51 05       	cpc	r21, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <check_condition+0xa02>
    20f2:	9c c3       	rjmp	.+1848   	; 0x282c <__stack+0x62d>
   {
	   return (r);
   }
   else if (pre_node == 36 && curr_node == 19 && next_node == 18)
    20f4:	42 31       	cpi	r20, 0x12	; 18
    20f6:	51 05       	cpc	r21, r1
    20f8:	09 f0       	breq	.+2      	; 0x20fc <check_condition+0xa0a>
    20fa:	17 c2       	rjmp	.+1070   	; 0x252a <__stack+0x32b>
    20fc:	9a c3       	rjmp	.+1844   	; 0x2832 <__stack+0x633>
   {
	   return (lx);
   }
   else if (pre_node == 37 && curr_node == 21 && next_node == 20)
    20fe:	85 32       	cpi	r24, 0x25	; 37
    2100:	91 05       	cpc	r25, r1
    2102:	49 f4       	brne	.+18     	; 0x2116 <check_condition+0xa24>
    2104:	65 31       	cpi	r22, 0x15	; 21
    2106:	71 05       	cpc	r23, r1
    2108:	09 f0       	breq	.+2      	; 0x210c <check_condition+0xa1a>
    210a:	f7 c1       	rjmp	.+1006   	; 0x24fa <__stack+0x2fb>
    210c:	44 31       	cpi	r20, 0x14	; 20
    210e:	51 05       	cpc	r21, r1
    2110:	09 f0       	breq	.+2      	; 0x2114 <check_condition+0xa22>
    2112:	0b c2       	rjmp	.+1046   	; 0x252a <__stack+0x32b>
    2114:	91 c3       	rjmp	.+1826   	; 0x2838 <__stack+0x639>
   {
	   return (f);
   }
   else if (pre_node == 38 && curr_node == 25 && next_node == 24)
    2116:	86 32       	cpi	r24, 0x26	; 38
    2118:	91 05       	cpc	r25, r1
    211a:	49 f4       	brne	.+18     	; 0x212e <check_condition+0xa3c>
    211c:	69 31       	cpi	r22, 0x19	; 25
    211e:	71 05       	cpc	r23, r1
    2120:	09 f0       	breq	.+2      	; 0x2124 <check_condition+0xa32>
    2122:	f2 c1       	rjmp	.+996    	; 0x2508 <__stack+0x309>
    2124:	48 31       	cpi	r20, 0x18	; 24
    2126:	51 05       	cpc	r21, r1
    2128:	09 f0       	breq	.+2      	; 0x212c <check_condition+0xa3a>
    212a:	ff c1       	rjmp	.+1022   	; 0x252a <__stack+0x32b>
    212c:	88 c3       	rjmp	.+1808   	; 0x283e <__stack+0x63f>
   {
	   return (bf);
   }
   else if (pre_node == 39 && curr_node == 26 && next_node == 24)
    212e:	87 97       	sbiw	r24, 0x27	; 39
    2130:	09 f0       	breq	.+2      	; 0x2134 <check_condition+0xa42>
    2132:	ea c1       	rjmp	.+980    	; 0x2508 <__stack+0x309>
    2134:	6a 31       	cpi	r22, 0x1A	; 26
    2136:	71 05       	cpc	r23, r1
    2138:	09 f0       	breq	.+2      	; 0x213c <check_condition+0xa4a>
    213a:	e6 c1       	rjmp	.+972    	; 0x2508 <__stack+0x309>
    213c:	48 31       	cpi	r20, 0x18	; 24
    213e:	51 05       	cpc	r21, r1
    2140:	09 f0       	breq	.+2      	; 0x2144 <check_condition+0xa52>
    2142:	f3 c1       	rjmp	.+998    	; 0x252a <__stack+0x32b>
    2144:	7f c3       	rjmp	.+1790   	; 0x2844 <__stack+0x645>
   
   //conditions for obstacles
   
   
   
   else if (pre_node ==0  && curr_node ==0 && next_node ==1)
    2146:	61 15       	cp	r22, r1
    2148:	71 05       	cpc	r23, r1
    214a:	09 f0       	breq	.+2      	; 0x214e <check_condition+0xa5c>
    214c:	ce c4       	rjmp	.+2460   	; 0x2aea <__stack+0x8eb>
    214e:	41 30       	cpi	r20, 0x01	; 1
    2150:	51 05       	cpc	r21, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <check_condition+0xa64>
    2154:	7a c3       	rjmp	.+1780   	; 0x284a <__stack+0x64b>
   {
	   return (f);
   }
   else if (pre_node ==0  && curr_node ==0 && next_node ==28)
    2156:	4c 31       	cpi	r20, 0x1C	; 28
    2158:	51 05       	cpc	r21, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <check_condition+0xa6c>
    215c:	79 c3       	rjmp	.+1778   	; 0x2850 <__stack+0x651>
   {
	   return (f);
   }
   
   else if (pre_node == 0 && curr_node ==0 && next_node ==13)
    215e:	4d 30       	cpi	r20, 0x0D	; 13
    2160:	51 05       	cpc	r21, r1
    2162:	09 f0       	breq	.+2      	; 0x2166 <check_condition+0xa74>
    2164:	da c1       	rjmp	.+948    	; 0x251a <__stack+0x31b>
    2166:	77 c3       	rjmp	.+1774   	; 0x2856 <__stack+0x657>
   {
	   return (f);
   }
   else if (pre_node ==1  && curr_node ==1 && next_node ==0)
    2168:	61 30       	cpi	r22, 0x01	; 1
    216a:	71 05       	cpc	r23, r1
    216c:	09 f0       	breq	.+2      	; 0x2170 <check_condition+0xa7e>
    216e:	cc c1       	rjmp	.+920    	; 0x2508 <__stack+0x309>
    2170:	ca 01       	movw	r24, r20
    2172:	8d 7f       	andi	r24, 0xFD	; 253
    2174:	89 2b       	or	r24, r25
    2176:	09 f4       	brne	.+2      	; 0x217a <check_condition+0xa88>
    2178:	71 c3       	rjmp	.+1762   	; 0x285c <__stack+0x65d>
   {
	   return (f);
   }
   
   else if (pre_node == 1 && curr_node ==1 && next_node ==29)
    217a:	4d 31       	cpi	r20, 0x1D	; 29
    217c:	51 05       	cpc	r21, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <check_condition+0xa90>
    2180:	70 c3       	rjmp	.+1760   	; 0x2862 <__stack+0x663>
   {
	   return (f);
   }
   
   else if (pre_node ==1 && curr_node ==1 && next_node ==12)
    2182:	4c 30       	cpi	r20, 0x0C	; 12
    2184:	51 05       	cpc	r21, r1
    2186:	09 f0       	breq	.+2      	; 0x218a <check_condition+0xa98>
    2188:	d0 c1       	rjmp	.+928    	; 0x252a <__stack+0x32b>
    218a:	6e c3       	rjmp	.+1756   	; 0x2868 <__stack+0x669>
   else if (pre_node == 1 && curr_node ==1 && next_node ==2)
   {
	   return (f);
   }
   
   else if (pre_node == 2&& curr_node ==2 && next_node ==1)
    218c:	62 30       	cpi	r22, 0x02	; 2
    218e:	71 05       	cpc	r23, r1
    2190:	09 f0       	breq	.+2      	; 0x2194 <check_condition+0xaa2>
    2192:	ba c1       	rjmp	.+884    	; 0x2508 <__stack+0x309>
    2194:	9a 01       	movw	r18, r20
    2196:	2d 7f       	andi	r18, 0xFD	; 253
    2198:	21 30       	cpi	r18, 0x01	; 1
    219a:	31 05       	cpc	r19, r1
    219c:	09 f4       	brne	.+2      	; 0x21a0 <check_condition+0xaae>
    219e:	62 c4       	rjmp	.+2244   	; 0x2a64 <__stack+0x865>
   else if (pre_node ==2  && curr_node ==2 && next_node ==3)
   {
	   return (f);
   }
   
   else if (pre_node ==2  && curr_node ==2 && next_node ==30)
    21a0:	4e 31       	cpi	r20, 0x1E	; 30
    21a2:	51 05       	cpc	r21, r1
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <check_condition+0xab6>
    21a6:	c1 c1       	rjmp	.+898    	; 0x252a <__stack+0x32b>
    21a8:	62 c3       	rjmp	.+1732   	; 0x286e <__stack+0x66f>
   {
	   return (f);
   }
   
   else if (pre_node ==3  && curr_node ==3 && next_node ==2)
    21aa:	63 30       	cpi	r22, 0x03	; 3
    21ac:	71 05       	cpc	r23, r1
    21ae:	09 f0       	breq	.+2      	; 0x21b2 <check_condition+0xac0>
    21b0:	ab c1       	rjmp	.+854    	; 0x2508 <__stack+0x309>
    21b2:	ca 01       	movw	r24, r20
    21b4:	87 7f       	andi	r24, 0xF7	; 247
    21b6:	02 97       	sbiw	r24, 0x02	; 2
    21b8:	09 f4       	brne	.+2      	; 0x21bc <check_condition+0xaca>
    21ba:	5c c3       	rjmp	.+1720   	; 0x2874 <__stack+0x675>
   {
	   return (f);
   }
   
   else if (pre_node ==3&& curr_node ==3 && next_node ==4)
    21bc:	44 30       	cpi	r20, 0x04	; 4
    21be:	51 05       	cpc	r21, r1
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <check_condition+0xad2>
    21c2:	b3 c1       	rjmp	.+870    	; 0x252a <__stack+0x32b>
    21c4:	5a c3       	rjmp	.+1716   	; 0x287a <__stack+0x67b>
   else if (pre_node ==3  && curr_node ==3 && next_node ==10)
   {
	   return (f);
   }
   
   else if (pre_node ==4 && curr_node ==4 && next_node ==3)
    21c6:	64 30       	cpi	r22, 0x04	; 4
    21c8:	71 05       	cpc	r23, r1
    21ca:	09 f0       	breq	.+2      	; 0x21ce <check_condition+0xadc>
    21cc:	9d c1       	rjmp	.+826    	; 0x2508 <__stack+0x309>
    21ce:	43 30       	cpi	r20, 0x03	; 3
    21d0:	51 05       	cpc	r21, r1
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <check_condition+0xae4>
    21d4:	55 c3       	rjmp	.+1706   	; 0x2880 <__stack+0x681>
   {
	   return (f);
   }
   
   else if (pre_node ==4  && curr_node ==4 && next_node == 5)
    21d6:	45 30       	cpi	r20, 0x05	; 5
    21d8:	51 05       	cpc	r21, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <check_condition+0xaec>
    21dc:	54 c3       	rjmp	.+1704   	; 0x2886 <__stack+0x687>
   {
	   return (f);
   }
   
   else if (pre_node ==4  && curr_node ==4 && next_node ==31)
    21de:	4f 31       	cpi	r20, 0x1F	; 31
    21e0:	51 05       	cpc	r21, r1
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <check_condition+0xaf4>
    21e4:	a2 c1       	rjmp	.+836    	; 0x252a <__stack+0x32b>
    21e6:	52 c3       	rjmp	.+1700   	; 0x288c <__stack+0x68d>
   {
	   return (f);
   }
   
   else if (pre_node ==5  && curr_node ==5 && next_node == 4)
    21e8:	65 30       	cpi	r22, 0x05	; 5
    21ea:	71 05       	cpc	r23, r1
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <check_condition+0xafe>
    21ee:	8c c1       	rjmp	.+792    	; 0x2508 <__stack+0x309>
    21f0:	ca 01       	movw	r24, r20
    21f2:	8d 7f       	andi	r24, 0xFD	; 253
    21f4:	04 97       	sbiw	r24, 0x04	; 4
    21f6:	09 f4       	brne	.+2      	; 0x21fa <check_condition+0xb08>
    21f8:	4c c3       	rjmp	.+1688   	; 0x2892 <__stack+0x693>
   else if (pre_node ==5&& curr_node ==5 && next_node ==6)
   {
	   return (f);
   }
   
   else if (pre_node ==5  && curr_node ==5 && next_node ==32)
    21fa:	40 32       	cpi	r20, 0x20	; 32
    21fc:	51 05       	cpc	r21, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <__stack+0x3>
    2200:	4b c3       	rjmp	.+1686   	; 0x2898 <__stack+0x699>
   {
	   return (sf);
   }
    else if (pre_node ==5  && curr_node ==5 && next_node ==8)
    2202:	48 30       	cpi	r20, 0x08	; 8
    2204:	51 05       	cpc	r21, r1
    2206:	09 f0       	breq	.+2      	; 0x220a <__stack+0xb>
    2208:	90 c1       	rjmp	.+800    	; 0x252a <__stack+0x32b>
    220a:	49 c3       	rjmp	.+1682   	; 0x289e <__stack+0x69f>
    {
	    return (f);
    }
   else if (pre_node ==6  && curr_node ==6 && next_node ==5)
    220c:	66 30       	cpi	r22, 0x06	; 6
    220e:	71 05       	cpc	r23, r1
    2210:	09 f0       	breq	.+2      	; 0x2214 <__stack+0x15>
    2212:	7a c1       	rjmp	.+756    	; 0x2508 <__stack+0x309>
    2214:	ca 01       	movw	r24, r20
    2216:	8d 7f       	andi	r24, 0xFD	; 253
    2218:	05 97       	sbiw	r24, 0x05	; 5
    221a:	09 f4       	brne	.+2      	; 0x221e <__stack+0x1f>
    221c:	43 c3       	rjmp	.+1670   	; 0x28a4 <__stack+0x6a5>
   {
	   return (f);
	   
   }
   else if (pre_node ==6 && curr_node ==6 && next_node ==33)
    221e:	41 32       	cpi	r20, 0x21	; 33
    2220:	51 05       	cpc	r21, r1
    2222:	09 f0       	breq	.+2      	; 0x2226 <__stack+0x27>
    2224:	82 c1       	rjmp	.+772    	; 0x252a <__stack+0x32b>
    2226:	41 c3       	rjmp	.+1666   	; 0x28aa <__stack+0x6ab>
   
   else if (pre_node ==6  && curr_node ==6 && next_node ==7)
   {
	   return (f);
   }
   else if (pre_node == 7 && curr_node ==7 && next_node ==6)
    2228:	67 30       	cpi	r22, 0x07	; 7
    222a:	71 05       	cpc	r23, r1
    222c:	09 f0       	breq	.+2      	; 0x2230 <__stack+0x31>
    222e:	6c c1       	rjmp	.+728    	; 0x2508 <__stack+0x309>
    2230:	46 30       	cpi	r20, 0x06	; 6
    2232:	51 05       	cpc	r21, r1
    2234:	09 f4       	brne	.+2      	; 0x2238 <__stack+0x39>
    2236:	3c c3       	rjmp	.+1656   	; 0x28b0 <__stack+0x6b1>
   {
	   return (f);
   }
   
   else if (pre_node ==7  && curr_node ==7 && next_node ==8)
    2238:	48 30       	cpi	r20, 0x08	; 8
    223a:	51 05       	cpc	r21, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <__stack+0x41>
    223e:	3b c3       	rjmp	.+1654   	; 0x28b6 <__stack+0x6b7>
   {
	   return (f);
   }
   
   else if (pre_node ==7  && curr_node ==7 && next_node == 20)
    2240:	44 31       	cpi	r20, 0x14	; 20
    2242:	51 05       	cpc	r21, r1
    2244:	09 f0       	breq	.+2      	; 0x2248 <__stack+0x49>
    2246:	71 c1       	rjmp	.+738    	; 0x252a <__stack+0x32b>
    2248:	39 c3       	rjmp	.+1650   	; 0x28bc <__stack+0x6bd>
   {
	   return (f);
   }
   
   else if (pre_node == 8 && curr_node ==8 && next_node ==7)
    224a:	68 30       	cpi	r22, 0x08	; 8
    224c:	71 05       	cpc	r23, r1
    224e:	09 f0       	breq	.+2      	; 0x2252 <__stack+0x53>
    2250:	5b c1       	rjmp	.+694    	; 0x2508 <__stack+0x309>
   {
	   return (f);
   }
   
   else if (pre_node ==8  && curr_node ==8 && next_node ==9)
    2252:	49 30       	cpi	r20, 0x09	; 9
    2254:	51 05       	cpc	r21, r1
    2256:	09 f4       	brne	.+2      	; 0x225a <__stack+0x5b>
    2258:	34 c3       	rjmp	.+1640   	; 0x28c2 <__stack+0x6c3>
   {
	   return (f);
   }
   
   else if (pre_node ==8  && curr_node ==8 && next_node ==5)
    225a:	ed 7f       	andi	r30, 0xFD	; 253
    225c:	35 97       	sbiw	r30, 0x05	; 5
    225e:	09 f0       	breq	.+2      	; 0x2262 <__stack+0x63>
    2260:	64 c1       	rjmp	.+712    	; 0x252a <__stack+0x32b>
    2262:	32 c3       	rjmp	.+1636   	; 0x28c8 <__stack+0x6c9>
   {
	   return (f);
   }
   
   else if (pre_node ==9  && curr_node ==9 && next_node ==8)
    2264:	69 30       	cpi	r22, 0x09	; 9
    2266:	71 05       	cpc	r23, r1
    2268:	09 f0       	breq	.+2      	; 0x226c <__stack+0x6d>
    226a:	4e c1       	rjmp	.+668    	; 0x2508 <__stack+0x309>
    226c:	ca 01       	movw	r24, r20
    226e:	8d 7f       	andi	r24, 0xFD	; 253
    2270:	08 97       	sbiw	r24, 0x08	; 8
    2272:	09 f4       	brne	.+2      	; 0x2276 <__stack+0x77>
    2274:	2c c3       	rjmp	.+1624   	; 0x28ce <__stack+0x6cf>
   else if (pre_node ==9  && curr_node ==9 && next_node ==10)
   {
	   return (f);
   }
   
   else if (pre_node == 9 && curr_node ==9 && next_node ==18)
    2276:	42 31       	cpi	r20, 0x12	; 18
    2278:	51 05       	cpc	r21, r1
    227a:	09 f0       	breq	.+2      	; 0x227e <__stack+0x7f>
    227c:	56 c1       	rjmp	.+684    	; 0x252a <__stack+0x32b>
    227e:	2a c3       	rjmp	.+1620   	; 0x28d4 <__stack+0x6d5>
   {
	   return (f);
   }
   
   else if (pre_node ==10 && curr_node ==10&& next_node ==11)
    2280:	6a 30       	cpi	r22, 0x0A	; 10
    2282:	71 05       	cpc	r23, r1
    2284:	09 f0       	breq	.+2      	; 0x2288 <__stack+0x89>
    2286:	40 c1       	rjmp	.+640    	; 0x2508 <__stack+0x309>
    2288:	ef 7e       	andi	r30, 0xEF	; 239
    228a:	3b 97       	sbiw	r30, 0x0b	; 11
    228c:	09 f0       	breq	.+2      	; 0x2290 <__stack+0x91>
    228e:	4d c1       	rjmp	.+666    	; 0x252a <__stack+0x32b>
    2290:	24 c3       	rjmp	.+1608   	; 0x28da <__stack+0x6db>
   else if (pre_node == 10&& curr_node ==10&& next_node ==27)
   {
	   return (f);
   }
   
   else if (pre_node ==11 && curr_node ==11&& next_node ==10)
    2292:	6b 30       	cpi	r22, 0x0B	; 11
    2294:	71 05       	cpc	r23, r1
    2296:	09 f0       	breq	.+2      	; 0x229a <__stack+0x9b>
    2298:	37 c1       	rjmp	.+622    	; 0x2508 <__stack+0x309>
    229a:	4a 30       	cpi	r20, 0x0A	; 10
    229c:	51 05       	cpc	r21, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	1f c3       	rjmp	.+1598   	; 0x28e0 <__stack+0x6e1>
   {
	   return (f);
   }
   
   else if (pre_node ==11 && curr_node ==11&& next_node ==12)
    22a2:	4c 30       	cpi	r20, 0x0C	; 12
    22a4:	51 05       	cpc	r21, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <__stack+0xab>
    22a8:	1e c3       	rjmp	.+1596   	; 0x28e6 <__stack+0x6e7>
   {
	   return (f);
   }
   
   else if (pre_node ==11 && curr_node ==11&& next_node ==16)
    22aa:	40 31       	cpi	r20, 0x10	; 16
    22ac:	51 05       	cpc	r21, r1
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <__stack+0xb3>
    22b0:	3c c1       	rjmp	.+632    	; 0x252a <__stack+0x32b>
    22b2:	1c c3       	rjmp	.+1592   	; 0x28ec <__stack+0x6ed>
   {
	   return (f);
   }
   
   else if (pre_node ==12&& curr_node ==12&&next_node ==13)
    22b4:	6c 30       	cpi	r22, 0x0C	; 12
    22b6:	71 05       	cpc	r23, r1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <__stack+0xbd>
    22ba:	26 c1       	rjmp	.+588    	; 0x2508 <__stack+0x309>
    22bc:	4d 30       	cpi	r20, 0x0D	; 13
    22be:	51 05       	cpc	r21, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <__stack+0xc5>
    22c2:	17 c3       	rjmp	.+1582   	; 0x28f2 <__stack+0x6f3>
   {
	   return (f);
   }
   
   else if (pre_node ==12 && curr_node ==12&& next_node ==11)
    22c4:	4b 30       	cpi	r20, 0x0B	; 11
    22c6:	51 05       	cpc	r21, r1
    22c8:	09 f4       	brne	.+2      	; 0x22cc <__stack+0xcd>
    22ca:	16 c3       	rjmp	.+1580   	; 0x28f8 <__stack+0x6f9>
   {
	   return (f);
   }
   
   else if (pre_node ==12 && curr_node ==12&& next_node ==1)
    22cc:	41 30       	cpi	r20, 0x01	; 1
    22ce:	51 05       	cpc	r21, r1
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <__stack+0xd5>
    22d2:	2b c1       	rjmp	.+598    	; 0x252a <__stack+0x32b>
    22d4:	14 c3       	rjmp	.+1576   	; 0x28fe <__stack+0x6ff>
   {
	   return (f);
   }
   else if (pre_node ==13 && curr_node ==13&& next_node ==14)
    22d6:	6d 30       	cpi	r22, 0x0D	; 13
    22d8:	71 05       	cpc	r23, r1
    22da:	09 f0       	breq	.+2      	; 0x22de <__stack+0xdf>
    22dc:	15 c1       	rjmp	.+554    	; 0x2508 <__stack+0x309>
   {
	   return (f);
   }
   
   else if (pre_node ==13 && curr_node ==13&& next_node ==12)
    22de:	ca 01       	movw	r24, r20
    22e0:	8d 7f       	andi	r24, 0xFD	; 253
    22e2:	0c 97       	sbiw	r24, 0x0c	; 12
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <__stack+0xe9>
    22e6:	0e c3       	rjmp	.+1564   	; 0x2904 <__stack+0x705>
   {
	   return (f);
   }
   else if (pre_node ==13 && curr_node ==13&& next_node == 0)
    22e8:	ef 2b       	or	r30, r31
    22ea:	09 f0       	breq	.+2      	; 0x22ee <__stack+0xef>
    22ec:	1e c1       	rjmp	.+572    	; 0x252a <__stack+0x32b>
    22ee:	0d c3       	rjmp	.+1562   	; 0x290a <__stack+0x70b>
   {
	   return (f);
   }
   
   else if (pre_node ==14 && curr_node ==14&& next_node ==13)
    22f0:	6e 30       	cpi	r22, 0x0E	; 14
    22f2:	71 05       	cpc	r23, r1
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <__stack+0xf9>
    22f6:	08 c1       	rjmp	.+528    	; 0x2508 <__stack+0x309>
    22f8:	ca 01       	movw	r24, r20
    22fa:	8d 7f       	andi	r24, 0xFD	; 253
    22fc:	0d 97       	sbiw	r24, 0x0d	; 13
    22fe:	09 f4       	brne	.+2      	; 0x2302 <__stack+0x103>
    2300:	07 c3       	rjmp	.+1550   	; 0x2910 <__stack+0x711>
   else if (pre_node ==14 && curr_node ==14&& next_node ==15)
   {
	   return (f);
   }
   
   else if (pre_node ==14 && curr_node ==14&& next_node ==22)
    2302:	46 31       	cpi	r20, 0x16	; 22
    2304:	51 05       	cpc	r21, r1
    2306:	09 f0       	breq	.+2      	; 0x230a <__stack+0x10b>
    2308:	10 c1       	rjmp	.+544    	; 0x252a <__stack+0x32b>
    230a:	05 c3       	rjmp	.+1546   	; 0x2916 <__stack+0x717>
   {
	   return (f);
   }
   
   else if (pre_node ==15&& curr_node ==15&& next_node ==14)
    230c:	6f 30       	cpi	r22, 0x0F	; 15
    230e:	71 05       	cpc	r23, r1
    2310:	49 f4       	brne	.+18     	; 0x2324 <__stack+0x125>
    2312:	4e 30       	cpi	r20, 0x0E	; 14
    2314:	51 05       	cpc	r21, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <__stack+0x11b>
    2318:	01 c3       	rjmp	.+1538   	; 0x291c <__stack+0x71d>
   {
	   return (f);
   }
   
   else if (pre_node ==15 && curr_node ==15&& next_node ==16)
    231a:	40 31       	cpi	r20, 0x10	; 16
    231c:	51 05       	cpc	r21, r1
    231e:	09 f0       	breq	.+2      	; 0x2322 <__stack+0x123>
    2320:	04 c1       	rjmp	.+520    	; 0x252a <__stack+0x32b>
    2322:	ff c2       	rjmp	.+1534   	; 0x2922 <__stack+0x723>
   {
	   return (f);
   }
   
   else if (pre_node ==15 && curr_node ==115& next_node ==35)
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	63 37       	cpi	r22, 0x73	; 115
    2328:	71 05       	cpc	r23, r1
    232a:	09 f0       	breq	.+2      	; 0x232e <__stack+0x12f>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	88 23       	and	r24, r24
    2330:	09 f4       	brne	.+2      	; 0x2334 <__stack+0x135>
    2332:	ea c0       	rjmp	.+468    	; 0x2508 <__stack+0x309>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	b3 97       	sbiw	r30, 0x23	; 35
    2338:	09 f0       	breq	.+2      	; 0x233c <__stack+0x13d>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	81 11       	cpse	r24, r1
    233e:	f4 c2       	rjmp	.+1512   	; 0x2928 <__stack+0x729>
    2340:	e3 c0       	rjmp	.+454    	; 0x2508 <__stack+0x309>
   {
	   return (f);
   }
   
   else if (pre_node ==16 && curr_node ==16&& next_node ==15)
    2342:	60 31       	cpi	r22, 0x10	; 16
    2344:	71 05       	cpc	r23, r1
    2346:	09 f0       	breq	.+2      	; 0x234a <__stack+0x14b>
    2348:	df c0       	rjmp	.+446    	; 0x2508 <__stack+0x309>
   {
	   return (f);
   }
   
   else if (pre_node ==16 && curr_node ==16&& next_node ==17)
    234a:	41 31       	cpi	r20, 0x11	; 17
    234c:	51 05       	cpc	r21, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <__stack+0x153>
    2350:	ee c2       	rjmp	.+1500   	; 0x292e <__stack+0x72f>
   {
	   return (f);
   }
   
   else if (pre_node ==16 && curr_node ==16&& next_node ==11)
    2352:	eb 7f       	andi	r30, 0xFB	; 251
    2354:	3b 97       	sbiw	r30, 0x0b	; 11
    2356:	09 f0       	breq	.+2      	; 0x235a <__stack+0x15b>
    2358:	e8 c0       	rjmp	.+464    	; 0x252a <__stack+0x32b>
    235a:	ec c2       	rjmp	.+1496   	; 0x2934 <__stack+0x735>
   {
	   return (f);
   }
   
   else if (pre_node ==17 && curr_node ==17  && next_node ==16 )
    235c:	61 31       	cpi	r22, 0x11	; 17
    235e:	71 05       	cpc	r23, r1
    2360:	09 f0       	breq	.+2      	; 0x2364 <__stack+0x165>
    2362:	d2 c0       	rjmp	.+420    	; 0x2508 <__stack+0x309>
    2364:	ca 01       	movw	r24, r20
    2366:	8d 7f       	andi	r24, 0xFD	; 253
    2368:	40 97       	sbiw	r24, 0x10	; 16
    236a:	09 f4       	brne	.+2      	; 0x236e <__stack+0x16f>
    236c:	e6 c2       	rjmp	.+1484   	; 0x293a <__stack+0x73b>
   }
   else if (pre_node ==17  && curr_node ==17  && next_node ==18 )
   {
	   return (f);
   }
   else if (pre_node ==17  && curr_node ==17  && next_node ==23 )
    236e:	47 31       	cpi	r20, 0x17	; 23
    2370:	51 05       	cpc	r21, r1
    2372:	09 f0       	breq	.+2      	; 0x2376 <__stack+0x177>
    2374:	da c0       	rjmp	.+436    	; 0x252a <__stack+0x32b>
    2376:	e4 c2       	rjmp	.+1480   	; 0x2940 <__stack+0x741>
   {
	   return (f);
   }
   else if (pre_node == 18 && curr_node ==18  && next_node ==17 )
    2378:	62 31       	cpi	r22, 0x12	; 18
    237a:	71 05       	cpc	r23, r1
    237c:	09 f0       	breq	.+2      	; 0x2380 <__stack+0x181>
    237e:	c4 c0       	rjmp	.+392    	; 0x2508 <__stack+0x309>
    2380:	ca 01       	movw	r24, r20
    2382:	8d 7f       	andi	r24, 0xFD	; 253
    2384:	41 97       	sbiw	r24, 0x11	; 17
    2386:	09 f4       	brne	.+2      	; 0x238a <__stack+0x18b>
    2388:	de c2       	rjmp	.+1468   	; 0x2946 <__stack+0x747>
   {
	   return (f);
   }
   
   else if (pre_node ==18  && curr_node ==18  && next_node ==9 )
    238a:	49 30       	cpi	r20, 0x09	; 9
    238c:	51 05       	cpc	r21, r1
    238e:	09 f0       	breq	.+2      	; 0x2392 <__stack+0x193>
    2390:	cc c0       	rjmp	.+408    	; 0x252a <__stack+0x32b>
    2392:	dc c2       	rjmp	.+1464   	; 0x294c <__stack+0x74d>
   }
   else if (pre_node ==18  && curr_node ==18  && next_node ==19 )
   {
	   return (f);
   }
   else if (pre_node == 19 && curr_node ==19  && next_node ==20 )
    2394:	63 31       	cpi	r22, 0x13	; 19
    2396:	71 05       	cpc	r23, r1
    2398:	09 f0       	breq	.+2      	; 0x239c <__stack+0x19d>
    239a:	b6 c0       	rjmp	.+364    	; 0x2508 <__stack+0x309>
    239c:	44 31       	cpi	r20, 0x14	; 20
    239e:	51 05       	cpc	r21, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__stack+0x1a5>
    23a2:	d7 c2       	rjmp	.+1454   	; 0x2952 <__stack+0x753>
   }
   else if (pre_node == 19 && curr_node ==19  && next_node ==20 )
   {
	   return (f);
   }
   else if (pre_node ==19  && curr_node ==19  && next_node ==18 )
    23a4:	42 31       	cpi	r20, 0x12	; 18
    23a6:	51 05       	cpc	r21, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__stack+0x1ad>
    23aa:	d6 c2       	rjmp	.+1452   	; 0x2958 <__stack+0x759>
   {
	   return (f);
   }
   else if (pre_node ==19  && curr_node ==19  && next_node ==36 )
    23ac:	44 32       	cpi	r20, 0x24	; 36
    23ae:	51 05       	cpc	r21, r1
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <__stack+0x1b5>
    23b2:	bb c0       	rjmp	.+374    	; 0x252a <__stack+0x32b>
    23b4:	d4 c2       	rjmp	.+1448   	; 0x295e <__stack+0x75f>
   {
	   return (f);
   }
   else if (pre_node ==20  && curr_node ==20  && next_node ==19 )
    23b6:	64 31       	cpi	r22, 0x14	; 20
    23b8:	71 05       	cpc	r23, r1
    23ba:	09 f0       	breq	.+2      	; 0x23be <__stack+0x1bf>
    23bc:	a5 c0       	rjmp	.+330    	; 0x2508 <__stack+0x309>
    23be:	43 31       	cpi	r20, 0x13	; 19
    23c0:	51 05       	cpc	r21, r1
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <__stack+0x1c7>
    23c4:	cf c2       	rjmp	.+1438   	; 0x2964 <__stack+0x765>
   {
	   return (f);
   }
   else if (pre_node == 20 && curr_node ==20  && next_node ==7 )
    23c6:	47 30       	cpi	r20, 0x07	; 7
    23c8:	51 05       	cpc	r21, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <__stack+0x1cf>
    23cc:	ce c2       	rjmp	.+1436   	; 0x296a <__stack+0x76b>
   {
	   return (f);
   }
   else if (pre_node ==20  && curr_node == 20 && next_node ==21 )
    23ce:	45 31       	cpi	r20, 0x15	; 21
    23d0:	51 05       	cpc	r21, r1
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <__stack+0x1d7>
    23d4:	aa c0       	rjmp	.+340    	; 0x252a <__stack+0x32b>
    23d6:	cc c2       	rjmp	.+1432   	; 0x2970 <__stack+0x771>
   {
	   return (f);
   }
   else if (pre_node == 21  && curr_node ==21  && next_node == 37 )
    23d8:	65 31       	cpi	r22, 0x15	; 21
    23da:	71 05       	cpc	r23, r1
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <__stack+0x1e1>
    23de:	94 c0       	rjmp	.+296    	; 0x2508 <__stack+0x309>
    23e0:	45 32       	cpi	r20, 0x25	; 37
    23e2:	51 05       	cpc	r21, r1
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <__stack+0x1e9>
    23e6:	c7 c2       	rjmp	.+1422   	; 0x2976 <__stack+0x777>
   {
	   return (f);
   }
   else if (pre_node ==21  && curr_node ==21  && next_node ==20 )
    23e8:	44 31       	cpi	r20, 0x14	; 20
    23ea:	51 05       	cpc	r21, r1
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <__stack+0x1f1>
    23ee:	9d c0       	rjmp	.+314    	; 0x252a <__stack+0x32b>
    23f0:	c5 c2       	rjmp	.+1418   	; 0x297c <__stack+0x77d>
   {
	   return (f);
   }
   else if (pre_node ==22  && curr_node ==22  && next_node ==14 )
    23f2:	66 31       	cpi	r22, 0x16	; 22
    23f4:	71 05       	cpc	r23, r1
    23f6:	09 f0       	breq	.+2      	; 0x23fa <__stack+0x1fb>
    23f8:	87 c0       	rjmp	.+270    	; 0x2508 <__stack+0x309>
    23fa:	4e 30       	cpi	r20, 0x0E	; 14
    23fc:	51 05       	cpc	r21, r1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <__stack+0x203>
    2400:	c0 c2       	rjmp	.+1408   	; 0x2982 <__stack+0x783>
   {
	   return (f);
   }else if (pre_node ==22  && curr_node ==22  && next_node ==34 )
    2402:	42 32       	cpi	r20, 0x22	; 34
    2404:	51 05       	cpc	r21, r1
    2406:	09 f0       	breq	.+2      	; 0x240a <__stack+0x20b>
    2408:	90 c0       	rjmp	.+288    	; 0x252a <__stack+0x32b>
    240a:	be c2       	rjmp	.+1404   	; 0x2988 <__stack+0x789>
   {
	   return (f);
   }
   else if (pre_node ==23  && curr_node ==23  && next_node ==24 )
    240c:	67 31       	cpi	r22, 0x17	; 23
    240e:	71 05       	cpc	r23, r1
    2410:	09 f0       	breq	.+2      	; 0x2414 <__stack+0x215>
    2412:	7a c0       	rjmp	.+244    	; 0x2508 <__stack+0x309>
    2414:	48 31       	cpi	r20, 0x18	; 24
    2416:	51 05       	cpc	r21, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <__stack+0x21d>
    241a:	b9 c2       	rjmp	.+1394   	; 0x298e <__stack+0x78f>
   {
	   return (f);
   }
   else if (pre_node ==23  && curr_node ==23  && next_node ==17 )
    241c:	41 31       	cpi	r20, 0x11	; 17
    241e:	51 05       	cpc	r21, r1
    2420:	09 f0       	breq	.+2      	; 0x2424 <__stack+0x225>
    2422:	83 c0       	rjmp	.+262    	; 0x252a <__stack+0x32b>
    2424:	b7 c2       	rjmp	.+1390   	; 0x2994 <__stack+0x795>
   {
	   return (f);
   }
   else if (pre_node ==24  && curr_node ==24  && next_node ==25 )
    2426:	68 31       	cpi	r22, 0x18	; 24
    2428:	71 05       	cpc	r23, r1
    242a:	09 f0       	breq	.+2      	; 0x242e <__stack+0x22f>
    242c:	6d c0       	rjmp	.+218    	; 0x2508 <__stack+0x309>
    242e:	ca 01       	movw	r24, r20
    2430:	49 97       	sbiw	r24, 0x19	; 25
    2432:	02 97       	sbiw	r24, 0x02	; 2
    2434:	08 f4       	brcc	.+2      	; 0x2438 <__stack+0x239>
    2436:	b1 c2       	rjmp	.+1378   	; 0x299a <__stack+0x79b>
	   return (f);
   }else if (pre_node ==24  && curr_node ==24  && next_node ==26 )
   {
	   return (f);
   }
   else if (pre_node ==24  && curr_node ==24  && next_node ==23 )
    2438:	47 31       	cpi	r20, 0x17	; 23
    243a:	51 05       	cpc	r21, r1
    243c:	09 f0       	breq	.+2      	; 0x2440 <__stack+0x241>
    243e:	75 c0       	rjmp	.+234    	; 0x252a <__stack+0x32b>
    2440:	af c2       	rjmp	.+1374   	; 0x29a0 <__stack+0x7a1>
   {
	   return (f);
   }
   else if (pre_node ==25  && curr_node ==25  && next_node ==24 )
    2442:	69 31       	cpi	r22, 0x19	; 25
    2444:	71 05       	cpc	r23, r1
    2446:	09 f0       	breq	.+2      	; 0x244a <__stack+0x24b>
    2448:	5f c0       	rjmp	.+190    	; 0x2508 <__stack+0x309>
    244a:	48 31       	cpi	r20, 0x18	; 24
    244c:	51 05       	cpc	r21, r1
    244e:	09 f4       	brne	.+2      	; 0x2452 <__stack+0x253>
    2450:	aa c2       	rjmp	.+1364   	; 0x29a6 <__stack+0x7a7>
   {
	   return (f);
   }
   else if (pre_node == 25 && curr_node ==25  && next_node ==38 )
    2452:	46 32       	cpi	r20, 0x26	; 38
    2454:	51 05       	cpc	r21, r1
    2456:	09 f0       	breq	.+2      	; 0x245a <__stack+0x25b>
    2458:	68 c0       	rjmp	.+208    	; 0x252a <__stack+0x32b>
    245a:	a8 c2       	rjmp	.+1360   	; 0x29ac <__stack+0x7ad>
   {
	   return (f);
   }
   else if (pre_node ==26  && curr_node ==26  && next_node ==24 )
    245c:	6a 31       	cpi	r22, 0x1A	; 26
    245e:	71 05       	cpc	r23, r1
    2460:	09 f0       	breq	.+2      	; 0x2464 <__stack+0x265>
    2462:	52 c0       	rjmp	.+164    	; 0x2508 <__stack+0x309>
    2464:	48 31       	cpi	r20, 0x18	; 24
    2466:	51 05       	cpc	r21, r1
    2468:	09 f4       	brne	.+2      	; 0x246c <__stack+0x26d>
    246a:	a3 c2       	rjmp	.+1350   	; 0x29b2 <__stack+0x7b3>
   {
	   return (f);
   }
   else if (pre_node ==26  && curr_node ==26  && next_node ==39 )
    246c:	47 32       	cpi	r20, 0x27	; 39
    246e:	51 05       	cpc	r21, r1
    2470:	09 f0       	breq	.+2      	; 0x2474 <__stack+0x275>
    2472:	5b c0       	rjmp	.+182    	; 0x252a <__stack+0x32b>
    2474:	a1 c2       	rjmp	.+1346   	; 0x29b8 <__stack+0x7b9>
   }
   else if (pre_node ==27  && curr_node == 27  && next_node ==10 )
   {
	   return (f);
   }
   else if (pre_node ==28  && curr_node ==28  && next_node == 0)
    2476:	6c 31       	cpi	r22, 0x1C	; 28
    2478:	71 05       	cpc	r23, r1
    247a:	09 f0       	breq	.+2      	; 0x247e <__stack+0x27f>
    247c:	45 c0       	rjmp	.+138    	; 0x2508 <__stack+0x309>
    247e:	ef 2b       	or	r30, r31
    2480:	09 f0       	breq	.+2      	; 0x2484 <__stack+0x285>
    2482:	53 c0       	rjmp	.+166    	; 0x252a <__stack+0x32b>
    2484:	9c c2       	rjmp	.+1336   	; 0x29be <__stack+0x7bf>
   {
	    node();
	    return(0);
   }
   else if (pre_node ==29  && curr_node == 29 && next_node == 1)
    2486:	6d 31       	cpi	r22, 0x1D	; 29
    2488:	71 05       	cpc	r23, r1
    248a:	f1 f5       	brne	.+124    	; 0x2508 <__stack+0x309>
    248c:	41 30       	cpi	r20, 0x01	; 1
    248e:	51 05       	cpc	r21, r1
    2490:	09 f0       	breq	.+2      	; 0x2494 <__stack+0x295>
    2492:	4b c0       	rjmp	.+150    	; 0x252a <__stack+0x32b>
    2494:	97 c2       	rjmp	.+1326   	; 0x29c4 <__stack+0x7c5>
   {
	  node();
	  return(0);
   }
   else if (pre_node ==30  && curr_node ==30  && next_node ==2 )
    2496:	6e 31       	cpi	r22, 0x1E	; 30
    2498:	71 05       	cpc	r23, r1
    249a:	b1 f5       	brne	.+108    	; 0x2508 <__stack+0x309>
    249c:	42 30       	cpi	r20, 0x02	; 2
    249e:	51 05       	cpc	r21, r1
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <__stack+0x2a5>
    24a2:	43 c0       	rjmp	.+134    	; 0x252a <__stack+0x32b>
    24a4:	92 c2       	rjmp	.+1316   	; 0x29ca <__stack+0x7cb>
   {
	    node();
	    return(0);
   }
   else if (pre_node ==31  && curr_node == 31 && next_node ==4 )
    24a6:	6f 31       	cpi	r22, 0x1F	; 31
    24a8:	71 05       	cpc	r23, r1
    24aa:	71 f5       	brne	.+92     	; 0x2508 <__stack+0x309>
    24ac:	44 30       	cpi	r20, 0x04	; 4
    24ae:	51 05       	cpc	r21, r1
    24b0:	e1 f5       	brne	.+120    	; 0x252a <__stack+0x32b>
    24b2:	8e c2       	rjmp	.+1308   	; 0x29d0 <__stack+0x7d1>
   {
	    node();
	    return(0);
   }
   else if (pre_node ==32  && curr_node ==32  && next_node ==5 )
    24b4:	60 32       	cpi	r22, 0x20	; 32
    24b6:	71 05       	cpc	r23, r1
    24b8:	39 f5       	brne	.+78     	; 0x2508 <__stack+0x309>
    24ba:	45 30       	cpi	r20, 0x05	; 5
    24bc:	51 05       	cpc	r21, r1
    24be:	a9 f5       	brne	.+106    	; 0x252a <__stack+0x32b>
    24c0:	8a c2       	rjmp	.+1300   	; 0x29d6 <__stack+0x7d7>
   {
	   node();
	   return(0);
   }
   else if (pre_node ==33  && curr_node ==33  && next_node ==6 )
    24c2:	61 32       	cpi	r22, 0x21	; 33
    24c4:	71 05       	cpc	r23, r1
    24c6:	01 f5       	brne	.+64     	; 0x2508 <__stack+0x309>
    24c8:	46 30       	cpi	r20, 0x06	; 6
    24ca:	51 05       	cpc	r21, r1
    24cc:	71 f5       	brne	.+92     	; 0x252a <__stack+0x32b>
    24ce:	86 c2       	rjmp	.+1292   	; 0x29dc <__stack+0x7dd>
   {
	   node();
	   return(0);
   }
   else if (pre_node ==34  && curr_node ==34  && next_node ==22 )
    24d0:	62 32       	cpi	r22, 0x22	; 34
    24d2:	71 05       	cpc	r23, r1
    24d4:	c9 f4       	brne	.+50     	; 0x2508 <__stack+0x309>
    24d6:	46 31       	cpi	r20, 0x16	; 22
    24d8:	51 05       	cpc	r21, r1
    24da:	39 f5       	brne	.+78     	; 0x252a <__stack+0x32b>
    24dc:	82 c2       	rjmp	.+1284   	; 0x29e2 <__stack+0x7e3>
   {
	   return (bb);
   }
   else if (pre_node ==35  && curr_node == 35 && next_node ==15 )
    24de:	63 32       	cpi	r22, 0x23	; 35
    24e0:	71 05       	cpc	r23, r1
    24e2:	91 f4       	brne	.+36     	; 0x2508 <__stack+0x309>
    24e4:	4f 30       	cpi	r20, 0x0F	; 15
    24e6:	51 05       	cpc	r21, r1
    24e8:	01 f5       	brne	.+64     	; 0x252a <__stack+0x32b>
    24ea:	7e c2       	rjmp	.+1276   	; 0x29e8 <__stack+0x7e9>
   {
	   node();
	   return(0);
   }
   else if (pre_node == 36 && curr_node == 36 && next_node ==19 )
    24ec:	64 32       	cpi	r22, 0x24	; 36
    24ee:	71 05       	cpc	r23, r1
    24f0:	59 f4       	brne	.+22     	; 0x2508 <__stack+0x309>
    24f2:	43 31       	cpi	r20, 0x13	; 19
    24f4:	51 05       	cpc	r21, r1
    24f6:	c9 f4       	brne	.+50     	; 0x252a <__stack+0x32b>
    24f8:	7a c2       	rjmp	.+1268   	; 0x29ee <__stack+0x7ef>
   {
	   node();
	   return(0);
   }
   else if (pre_node ==37  && curr_node ==37  && next_node ==21 )
    24fa:	65 32       	cpi	r22, 0x25	; 37
    24fc:	71 05       	cpc	r23, r1
    24fe:	21 f4       	brne	.+8      	; 0x2508 <__stack+0x309>
    2500:	45 31       	cpi	r20, 0x15	; 21
    2502:	51 05       	cpc	r21, r1
    2504:	91 f4       	brne	.+36     	; 0x252a <__stack+0x32b>
    2506:	76 c2       	rjmp	.+1260   	; 0x29f4 <__stack+0x7f5>
   {
	   return (bb);
	   
   }
   else if (pre_node =38  && curr_node ==38  && next_node ==25 )
    2508:	66 32       	cpi	r22, 0x26	; 38
    250a:	71 05       	cpc	r23, r1
    250c:	21 f4       	brne	.+8      	; 0x2516 <__stack+0x317>
    250e:	49 31       	cpi	r20, 0x19	; 25
    2510:	51 05       	cpc	r21, r1
    2512:	59 f4       	brne	.+22     	; 0x252a <__stack+0x32b>
    2514:	72 c2       	rjmp	.+1252   	; 0x29fa <__stack+0x7fb>
   {
	  node();
	  return(0);
   }

   else if (pre_node == 0 && curr_node == 0 && next_node == 0)
    2516:	67 2b       	or	r22, r23
    2518:	41 f4       	brne	.+16     	; 0x252a <__stack+0x32b>
    251a:	41 15       	cp	r20, r1
    251c:	51 05       	cpc	r21, r1
    251e:	09 f4       	brne	.+2      	; 0x2522 <__stack+0x323>
    2520:	6f c2       	rjmp	.+1246   	; 0x2a00 <__stack+0x801>
   {
	   return (f);
   }
    else if (pre_node == 0 && curr_node == 0 && next_node == 13)
    2522:	4d 30       	cpi	r20, 0x0D	; 13
    2524:	51 05       	cpc	r21, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <__stack+0x32b>
    2528:	6e c2       	rjmp	.+1244   	; 0x2a06 <__stack+0x807>
      }
   else if (pre_node == 5 && curr_node == 5 && next_node == 8)
	  {
		  return (f);
	  }
   }
    252a:	08 95       	ret
{
  int f = 1, l = 2, r = 3,b=4,sl=5 ,sr=6,sf=7,bb=8, bf=9,lf=10,ll=11,rx=12,lx=13,lsl=14,lr=15,lr1=16 , ll1 = 17,lr2 = 18;
  
   if (pre_node == 0 && curr_node == 1 && next_node == 2)
   {
	   return (f);
    252c:	21 e0       	ldi	r18, 0x01	; 1
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	99 c2       	rjmp	.+1330   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 0 && curr_node == 1 && next_node == 12)
   {
	   return (l);
    2532:	22 e0       	ldi	r18, 0x02	; 2
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	96 c2       	rjmp	.+1324   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 0 && curr_node == 13 && next_node == 12)
   {
	   return (r);
    2538:	23 e0       	ldi	r18, 0x03	; 3
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	93 c2       	rjmp	.+1318   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 0 && curr_node == 13 && next_node == 14)
   {
	   return (f);
    253e:	21 e0       	ldi	r18, 0x01	; 1
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	90 c2       	rjmp	.+1312   	; 0x2a64 <__stack+0x865>
	   return (sr);
   }
   //1
   else if (pre_node == 1 && curr_node == 0 && next_node == 13)
   {
	   return (r);
    2544:	23 e0       	ldi	r18, 0x03	; 3
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8d c2       	rjmp	.+1306   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 1 && curr_node == 2 && next_node == 3)
   {
	   return (f);
    254a:	21 e0       	ldi	r18, 0x01	; 1
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	8a c2       	rjmp	.+1300   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 1 && curr_node == 12 && next_node == 13)
   {
	   return (l);
    2550:	22 e0       	ldi	r18, 0x02	; 2
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	87 c2       	rjmp	.+1294   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 1 && curr_node == 12 && next_node == 11)
   {
	   return (r);
    2556:	23 e0       	ldi	r18, 0x03	; 3
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	84 c2       	rjmp	.+1288   	; 0x2a64 <__stack+0x865>
   {
	   return (sl);
   }
   else if (pre_node == 1 && curr_node == 2 && next_node == 30)
   {
	   return (sr);
    255c:	26 e0       	ldi	r18, 0x06	; 6
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	81 c2       	rjmp	.+1282   	; 0x2a64 <__stack+0x865>
   }
   //2
   else if (pre_node == 2 && curr_node == 1 && next_node == 0)
   {
	   return (f);
    2562:	21 e0       	ldi	r18, 0x01	; 1
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	7e c2       	rjmp	.+1276   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 2 && curr_node == 1 && next_node == 12)
   {
	   return (r);
    2568:	23 e0       	ldi	r18, 0x03	; 3
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	7b c2       	rjmp	.+1270   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 2 && curr_node == 3 && next_node == 4)
   {
	   return (f);
    256e:	21 e0       	ldi	r18, 0x01	; 1
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	78 c2       	rjmp	.+1264   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 2 && curr_node == 3 && next_node == 10)
   {
	   return (l);
    2574:	22 e0       	ldi	r18, 0x02	; 2
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	75 c2       	rjmp	.+1258   	; 0x2a64 <__stack+0x865>
	   return (sl);
   }
   //3
   else if (pre_node == 3 && curr_node == 2 && next_node == 1)
   {
	   return (f);
    257a:	21 e0       	ldi	r18, 0x01	; 1
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	72 c2       	rjmp	.+1252   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 3 && curr_node == 4 && next_node == 5)
   {
	   return (f);
    2580:	21 e0       	ldi	r18, 0x01	; 1
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	6f c2       	rjmp	.+1246   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 11)
   {
	   return (l);
    2586:	22 e0       	ldi	r18, 0x02	; 2
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	6c c2       	rjmp	.+1240   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 9)
   {
	   return (r);
    258c:	23 e0       	ldi	r18, 0x03	; 3
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	69 c2       	rjmp	.+1234   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 27)
   {
	   return (f);
    2592:	21 e0       	ldi	r18, 0x01	; 1
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	66 c2       	rjmp	.+1228   	; 0x2a64 <__stack+0x865>
	   return (sr);
   }
   //4
   else if (pre_node == 4 && curr_node == 3 && next_node == 2)
   {
	   return (f);
    2598:	21 e0       	ldi	r18, 0x01	; 1
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	63 c2       	rjmp	.+1222   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 4 && curr_node == 3 && next_node == 10)
   {
	   return (r);
    259e:	23 e0       	ldi	r18, 0x03	; 3
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	60 c2       	rjmp	.+1216   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 4 && curr_node == 5 && next_node == 6)
   {
	   return (f);
    25a4:	21 e0       	ldi	r18, 0x01	; 1
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	5d c2       	rjmp	.+1210   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 4 && curr_node == 5 && next_node == 8)
   {
	   return (l);
    25aa:	22 e0       	ldi	r18, 0x02	; 2
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	5a c2       	rjmp	.+1204   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 4 && curr_node == 5 && next_node == 32)
   {
	   return (sr);
    25b0:	26 e0       	ldi	r18, 0x06	; 6
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	57 c2       	rjmp	.+1198   	; 0x2a64 <__stack+0x865>
   }
   //5
   else if (pre_node == 5 && curr_node == 4 && next_node == 3)
   {
	   return (f);
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	54 c2       	rjmp	.+1192   	; 0x2a64 <__stack+0x865>
	   delay(100);
	   return (l);
   }
   else if (pre_node == 5 && curr_node == 8 && next_node == 7)
   {
	   return (r);
    25bc:	23 e0       	ldi	r18, 0x03	; 3
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	51 c2       	rjmp	.+1186   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 5 && curr_node == 6 && next_node == 7)
   {
	   return (l);
    25c2:	22 e0       	ldi	r18, 0x02	; 2
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4e c2       	rjmp	.+1180   	; 0x2a64 <__stack+0x865>
	   return (sr);
   }
   //6
   else if (pre_node == 6 && curr_node == 7 && next_node == 8)
   {
	   return (l);
    25c8:	22 e0       	ldi	r18, 0x02	; 2
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4b c2       	rjmp	.+1174   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 6 && curr_node == 7 && next_node == 20)
   {
	   return (f);
    25ce:	21 e0       	ldi	r18, 0x01	; 1
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	48 c2       	rjmp	.+1168   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 6 && curr_node == 5 && next_node == 8)
   {
	   return (r);
    25d4:	23 e0       	ldi	r18, 0x03	; 3
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	45 c2       	rjmp	.+1162   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 6 && curr_node == 5 && next_node == 4)
   {
	   return (f);
    25da:	21 e0       	ldi	r18, 0x01	; 1
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	42 c2       	rjmp	.+1156   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 6 && curr_node == 5 && next_node == 32)
   {
	   return (sl);
    25e0:	25 e0       	ldi	r18, 0x05	; 5
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	3f c2       	rjmp	.+1150   	; 0x2a64 <__stack+0x865>
   }
   //7
   else if (pre_node == 7 && curr_node == 6 && next_node == 5)
   {
	   return (r);
    25e6:	23 e0       	ldi	r18, 0x03	; 3
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	3c c2       	rjmp	.+1144   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 7 && curr_node == 8 && next_node == 5)
   {
	   return (l);
    25ec:	22 e0       	ldi	r18, 0x02	; 2
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	39 c2       	rjmp	.+1138   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 7 && curr_node == 8 && next_node == 9)
   {
	   return (r);
    25f2:	23 e0       	ldi	r18, 0x03	; 3
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	36 c2       	rjmp	.+1132   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 7 && curr_node == 20 && next_node == 11)
   {
	   return (l);
    25f8:	22 e0       	ldi	r18, 0x02	; 2
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	33 c2       	rjmp	.+1126   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 7 && curr_node == 20 && next_node == 21)
   {
	   return (f);
    25fe:	21 e0       	ldi	r18, 0x01	; 1
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	30 c2       	rjmp	.+1120   	; 0x2a64 <__stack+0x865>
	   return (sf);
   }
   //8
   else if (pre_node == 8 && curr_node == 9 && next_node == 10)
   {
	   return (l);
    2604:	22 e0       	ldi	r18, 0x02	; 2
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	2d c2       	rjmp	.+1114   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 8 && curr_node == 9 && next_node == 18)
   {
	   return (r);
    260a:	23 e0       	ldi	r18, 0x03	; 3
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	2a c2       	rjmp	.+1108   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 8 && curr_node == 7 && next_node == 20)
   {
	   return (lsl);
    2610:	2e e0       	ldi	r18, 0x0E	; 14
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	27 c2       	rjmp	.+1102   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 8 && curr_node == 7 && next_node == 6)
   {
	   return (r);
    2616:	23 e0       	ldi	r18, 0x03	; 3
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	24 c2       	rjmp	.+1096   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 8 && curr_node == 5 && next_node == 4)
   {
	   return (r);
    261c:	23 e0       	ldi	r18, 0x03	; 3
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	21 c2       	rjmp	.+1090   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 8 && curr_node == 5 && next_node == 6)
   {
	   return (l);
    2622:	22 e0       	ldi	r18, 0x02	; 2
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	1e c2       	rjmp	.+1084   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 8 && curr_node == 5 && next_node == 32)
   {
	   return (sf);
    2628:	27 e0       	ldi	r18, 0x07	; 7
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	1b c2       	rjmp	.+1078   	; 0x2a64 <__stack+0x865>
	   delay(100);
	   return (r);
   }
   else if (pre_node == 9 && curr_node == 8 && next_node == 7)
   {
	   return (l);
    262e:	22 e0       	ldi	r18, 0x02	; 2
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	18 c2       	rjmp	.+1072   	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 9 && curr_node == 10 && next_node == 27)
   {
	   return (r);
    2634:	23 e0       	ldi	r18, 0x03	; 3
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	15 c2       	rjmp	.+1066   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 9 && curr_node == 10 && next_node == 3)
   {
	   return (l);
    263a:	22 e0       	ldi	r18, 0x02	; 2
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	12 c2       	rjmp	.+1060   	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 9 && curr_node == 18 && next_node == 19)
   {
	   return (r);
    2640:	23 e0       	ldi	r18, 0x03	; 3
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	0f c2       	rjmp	.+1054   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 10 && curr_node == 9 && next_node == 8)
   {
	   return (r);
    2646:	23 e0       	ldi	r18, 0x03	; 3
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	0c c2       	rjmp	.+1048   	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 10 && curr_node == 3 && next_node == 2)
   {
	   return (r);
    264c:	23 e0       	ldi	r18, 0x03	; 3
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	09 c2       	rjmp	.+1042   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 10 && curr_node == 3 && next_node == 4)
   {
	   return (l);
    2652:	22 e0       	ldi	r18, 0x02	; 2
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	06 c2       	rjmp	.+1036   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 10 && curr_node == 11 && next_node == 12)
   {
	   return (l);
    2658:	22 e0       	ldi	r18, 0x02	; 2
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	03 c2       	rjmp	.+1030   	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 11 && curr_node == 10 && next_node == 27)
   {
	   return (l);
    265e:	22 e0       	ldi	r18, 0x02	; 2
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	00 c2       	rjmp	.+1024   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 11 && curr_node == 10 && next_node == 3)
   {
	   return (r);
    2664:	23 e0       	ldi	r18, 0x03	; 3
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	fd c1       	rjmp	.+1018   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 11 && curr_node == 10 && next_node == 9)
   {
	   return (f);
    266a:	21 e0       	ldi	r18, 0x01	; 1
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	fa c1       	rjmp	.+1012   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 11 && curr_node == 12 && next_node == 1)
   {
	   return (l);
    2670:	22 e0       	ldi	r18, 0x02	; 2
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	f7 c1       	rjmp	.+1006   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 11 && curr_node == 12 && next_node == 13)
   {
	   return (f);
    2676:	21 e0       	ldi	r18, 0x01	; 1
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	f4 c1       	rjmp	.+1000   	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 11 && curr_node == 16 && next_node == 15)
   {
	   return (l);
    267c:	22 e0       	ldi	r18, 0x02	; 2
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	f1 c1       	rjmp	.+994    	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 12 && curr_node == 11 && next_node == 10)
   {
	   return (f);
    2682:	21 e0       	ldi	r18, 0x01	; 1
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	ee c1       	rjmp	.+988    	; 0x2a64 <__stack+0x865>
   }

   else if (pre_node == 12 && curr_node == 11 && next_node == 16)
   {
	   return (l);
    2688:	22 e0       	ldi	r18, 0x02	; 2
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	eb c1       	rjmp	.+982    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 12 && curr_node == 13 && next_node == 0)
   {
	   return (l);
    268e:	22 e0       	ldi	r18, 0x02	; 2
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	e8 c1       	rjmp	.+976    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 12 && curr_node == 1 && next_node == 0)
   {
	   return (r);
    2694:	23 e0       	ldi	r18, 0x03	; 3
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	e5 c1       	rjmp	.+970    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 12 && curr_node == 1 && next_node == 2)
   {
	   return (l);
    269a:	22 e0       	ldi	r18, 0x02	; 2
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	e2 c1       	rjmp	.+964    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 12 && curr_node == 1 && next_node == 29)
   {
	   return (sf);
    26a0:	27 e0       	ldi	r18, 0x07	; 7
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	df c1       	rjmp	.+958    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 13 && curr_node == 12 && next_node == 1)
   {
	   return (r);
    26a6:	23 e0       	ldi	r18, 0x03	; 3
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	dc c1       	rjmp	.+952    	; 0x2a64 <__stack+0x865>
   }

   else if (pre_node == 13 && curr_node == 12 && next_node == 11)
   {
	   return (f);
    26ac:	21 e0       	ldi	r18, 0x01	; 1
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	d9 c1       	rjmp	.+946    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 13 && curr_node == 0 && next_node == 1)
   {
	   return (l);
    26b2:	22 e0       	ldi	r18, 0x02	; 2
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	d6 c1       	rjmp	.+940    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 13 && curr_node == 14 && next_node == 22)
   {
	   return (r);
    26b8:	23 e0       	ldi	r18, 0x03	; 3
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	d3 c1       	rjmp	.+934    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 13 && curr_node == 14 && next_node == 15)
   {
	   return (r);
    26be:	23 e0       	ldi	r18, 0x03	; 3
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	d0 c1       	rjmp	.+928    	; 0x2a64 <__stack+0x865>
   {
	   return (sf);
   }
   else if (pre_node == 14 && curr_node == 15 && next_node == 16)
   {
	   return (f);
    26c4:	21 e0       	ldi	r18, 0x01	; 1
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	cd c1       	rjmp	.+922    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 14 && curr_node == 13 && next_node == 12)
   {
	   return (l);
    26ca:	22 e0       	ldi	r18, 0x02	; 2
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	ca c1       	rjmp	.+916    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 14 && curr_node == 13 && next_node == 0)
   {
	   return (f);
    26d0:	21 e0       	ldi	r18, 0x01	; 1
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	c7 c1       	rjmp	.+910    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 14 && curr_node == 22 && next_node == 34)
   {
	   return (sf);
    26d6:	27 e0       	ldi	r18, 0x07	; 7
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	c4 c1       	rjmp	.+904    	; 0x2a64 <__stack+0x865>
   {
	   return (l);
   }
   else if (pre_node == 15 && curr_node == 14 && next_node == 13)
   {
	   return (l);
    26dc:	22 e0       	ldi	r18, 0x02	; 2
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	c1 c1       	rjmp	.+898    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 15 && curr_node == 14 && next_node == 22)
   {
	   return (r);
    26e2:	23 e0       	ldi	r18, 0x03	; 3
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	be c1       	rjmp	.+892    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 15 && curr_node == 16 && next_node == 11)
   {
	   return (r);
    26e8:	23 e0       	ldi	r18, 0x03	; 3
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	bb c1       	rjmp	.+886    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 15 && curr_node == 16 && next_node == 17)
   {
	   return (l);
    26ee:	22 e0       	ldi	r18, 0x02	; 2
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	b8 c1       	rjmp	.+880    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 15 && curr_node == 16 && next_node == 22)
   {
	   return (r);
    26f4:	23 e0       	ldi	r18, 0x03	; 3
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	b5 c1       	rjmp	.+874    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 16 && curr_node == 15 && next_node == 14)
   {
	   return (f);
    26fa:	21 e0       	ldi	r18, 0x01	; 1
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	b2 c1       	rjmp	.+868    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 16 && curr_node == 11 && next_node == 12)
   {
	   return (r);
    2700:	23 e0       	ldi	r18, 0x03	; 3
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	af c1       	rjmp	.+862    	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 16 && curr_node == 17 && next_node == 23)
   {
	   return (ll);
    2706:	2b e0       	ldi	r18, 0x0B	; 11
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	ac c1       	rjmp	.+856    	; 0x2a64 <__stack+0x865>
   {
	   return (sr);
   }
   else if (pre_node == 17 && curr_node == 16 && next_node == 15)
   {
	   return (r);
    270c:	23 e0       	ldi	r18, 0x03	; 3
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	a9 c1       	rjmp	.+850    	; 0x2a64 <__stack+0x865>
	  while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 17 && curr_node == 18 && next_node == 19)
   {
	   return (r);
    2712:	23 e0       	ldi	r18, 0x03	; 3
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	a6 c1       	rjmp	.+844    	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 17 && curr_node == 23 && next_node == 24)
   {
	   return (lf);
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	a3 c1       	rjmp	.+838    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 18 && curr_node == 19 && next_node == 20)
   {
	   return (f);
    271e:	21 e0       	ldi	r18, 0x01	; 1
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	a0 c1       	rjmp	.+832    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 18 && curr_node == 9 && next_node == 10)
   {
	   return (f);
    2724:	21 e0       	ldi	r18, 0x01	; 1
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	9d c1       	rjmp	.+826    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 18 && curr_node == 9 && next_node == 8)
   {
	   return (l);
    272a:	22 e0       	ldi	r18, 0x02	; 2
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	9a c1       	rjmp	.+820    	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (l);
   }
   else if (pre_node == 18 && curr_node == 17 && next_node == 23)
   {
	   return (lr);
    2730:	2f e0       	ldi	r18, 0x0F	; 15
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	97 c1       	rjmp	.+814    	; 0x2a64 <__stack+0x865>
   {
	   return (sl);
   }
   else if (pre_node == 19 && curr_node == 20 && next_node == 21)
   {
	   return (l);
    2736:	22 e0       	ldi	r18, 0x02	; 2
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	94 c1       	rjmp	.+808    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 19 && curr_node == 20 && next_node == 7)
   {
	   return (r);
    273c:	23 e0       	ldi	r18, 0x03	; 3
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	91 c1       	rjmp	.+802    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 19 && curr_node == 18 && next_node == 17)
   {
	   return (l);
    2742:	22 e0       	ldi	r18, 0x02	; 2
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	8e c1       	rjmp	.+796    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 19 && curr_node == 18 && next_node == 9)
   {
	   return (l);
    2748:	22 e0       	ldi	r18, 0x02	; 2
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	8b c1       	rjmp	.+790    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 20 && curr_node == 19 && next_node == 18)
   {
	   return (f);
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	88 c1       	rjmp	.+784    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 20 && curr_node == 7 && next_node == 8)
   {
	   return (r);
    2754:	23 e0       	ldi	r18, 0x03	; 3
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	85 c1       	rjmp	.+778    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 20 && curr_node == 7 && next_node == 6)
   {
	   return (f);
    275a:	21 e0       	ldi	r18, 0x01	; 1
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	82 c1       	rjmp	.+772    	; 0x2a64 <__stack+0x865>
   {
	   return (r);
   }
   else if (pre_node == 20 && curr_node == 21 && next_node == 37)
   {
	   return (sf);
    2760:	27 e0       	ldi	r18, 0x07	; 7
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	7f c1       	rjmp	.+766    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 21 && curr_node == 20 && next_node == 19)
   {
	   return (r);
    2766:	23 e0       	ldi	r18, 0x03	; 3
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	7c c1       	rjmp	.+760    	; 0x2a64 <__stack+0x865>
		}
	   return (0);
   }
   else if (pre_node == 22 && curr_node == 14 && next_node == 13)
   {
	   return (f);
    276c:	21 e0       	ldi	r18, 0x01	; 1
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	79 c1       	rjmp	.+754    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 22 && curr_node == 14 && next_node == 15)
   {
	   return (l);
    2772:	22 e0       	ldi	r18, 0x02	; 2
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	76 c1       	rjmp	.+748    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 23 && curr_node == 17 && next_node == 16)
   {
	   return (r);
    2778:	23 e0       	ldi	r18, 0x03	; 3
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	73 c1       	rjmp	.+742    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 23 && curr_node == 17 && next_node == 18)
   {
	   return (l);
    277e:	22 e0       	ldi	r18, 0x02	; 2
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	70 c1       	rjmp	.+736    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 23 && curr_node == 24 && next_node == 25)
   {
	   return (ll1);
    2784:	21 e1       	ldi	r18, 0x11	; 17
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	6d c1       	rjmp	.+730    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 23 && curr_node == 24 && next_node == 26)
   {
	   return (lr1);
    278a:	20 e1       	ldi	r18, 0x10	; 16
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	6a c1       	rjmp	.+724    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 24 && curr_node == 23 && next_node == 17)
   {
	   return (f);
    2790:	21 e0       	ldi	r18, 0x01	; 1
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	67 c1       	rjmp	.+718    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 24 && curr_node == 25 && next_node == 38)
   {
	   return (sf);
    2796:	27 e0       	ldi	r18, 0x07	; 7
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	64 c1       	rjmp	.+712    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 24 && curr_node == 26 && next_node == 39)
   {
	   return (sf);
    279c:	27 e0       	ldi	r18, 0x07	; 7
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	61 c1       	rjmp	.+706    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 25 && curr_node == 24 && next_node == 23)
   {
	   return (lr2);
    27a2:	22 e1       	ldi	r18, 0x12	; 18
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	5e c1       	rjmp	.+700    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 26 && curr_node == 24 && next_node == 23)
   {
	   return (ll);
    27a8:	2b e0       	ldi	r18, 0x0B	; 11
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	5b c1       	rjmp	.+694    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 27 && curr_node == 10 && next_node == 3)
   {
	   return (f);
    27ae:	21 e0       	ldi	r18, 0x01	; 1
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	58 c1       	rjmp	.+688    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 27 && curr_node == 10 && next_node == 11)
   {
	   return (r);
    27b4:	23 e0       	ldi	r18, 0x03	; 3
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	55 c1       	rjmp	.+682    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 27 && curr_node == 10 && next_node == 9)
   {
	   return (l);
    27ba:	22 e0       	ldi	r18, 0x02	; 2
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	52 c1       	rjmp	.+676    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 27 && curr_node == 27 && next_node == 10)
   {
	   return (f);
    27c0:	21 e0       	ldi	r18, 0x01	; 1
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4f c1       	rjmp	.+670    	; 0x2a64 <__stack+0x865>
   }

   else if (pre_node == 28 && curr_node == 0 && next_node == 13)
   {
	   return (bf);
    27c6:	29 e0       	ldi	r18, 0x09	; 9
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	4c c1       	rjmp	.+664    	; 0x2a64 <__stack+0x865>
   }

   else if (pre_node == 28 && curr_node == 0 && next_node == 1)
   {
	   return (lx);
    27cc:	2d e0       	ldi	r18, 0x0D	; 13
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	49 c1       	rjmp	.+658    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 29 && curr_node == 1 && next_node == 0)
   {
	   return (rx);
    27d2:	2c e0       	ldi	r18, 0x0C	; 12
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	46 c1       	rjmp	.+652    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 29 && curr_node == 1 && next_node == 2)
   {
	   return (lx);
    27d8:	2d e0       	ldi	r18, 0x0D	; 13
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	43 c1       	rjmp	.+646    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 29 && curr_node == 1 && next_node == 12)
   {
	   return (bf);
    27de:	29 e0       	ldi	r18, 0x09	; 9
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 c1       	rjmp	.+640    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 30 && curr_node == 2 && next_node == 3)
   {
	   return (lx);
    27e4:	2d e0       	ldi	r18, 0x0D	; 13
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	3d c1       	rjmp	.+634    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 30 && curr_node == 2 && next_node == 1)
   {
	   return (rx);
    27ea:	2c e0       	ldi	r18, 0x0C	; 12
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	3a c1       	rjmp	.+628    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 31 && curr_node == 4 && next_node == 5)
   {
	   return (lx);
    27f0:	2d e0       	ldi	r18, 0x0D	; 13
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	37 c1       	rjmp	.+622    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 31 && curr_node == 4 && next_node == 3)
   {
	   return (rx);
    27f6:	2c e0       	ldi	r18, 0x0C	; 12
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	34 c1       	rjmp	.+616    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 32 && curr_node == 5 && next_node == 6)
   {
	   return (lx);
    27fc:	2d e0       	ldi	r18, 0x0D	; 13
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	31 c1       	rjmp	.+610    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 32 && curr_node == 5 && next_node == 4)
   {
	   return (rx);
    2802:	2c e0       	ldi	r18, 0x0C	; 12
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	2e c1       	rjmp	.+604    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 32 && curr_node == 5 && next_node == 8)
   {
	   return (bf);
    2808:	29 e0       	ldi	r18, 0x09	; 9
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	2b c1       	rjmp	.+598    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 33 && curr_node == 6 && next_node == 5)
   {
	   return (rx);
    280e:	2c e0       	ldi	r18, 0x0C	; 12
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	28 c1       	rjmp	.+592    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 33 && curr_node == 6 && next_node == 7)
   {
	   return (bf);
    2814:	29 e0       	ldi	r18, 0x09	; 9
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	25 c1       	rjmp	.+586    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 34 && curr_node == 22 && next_node == 14)
   {
	   return (f);
    281a:	21 e0       	ldi	r18, 0x01	; 1
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	22 c1       	rjmp	.+580    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 35 && curr_node == 15 && next_node == 16)
   {
	   return (rx);
    2820:	2c e0       	ldi	r18, 0x0C	; 12
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	1f c1       	rjmp	.+574    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 35 && curr_node == 15 && next_node == 14)
   {
	   return (l);
    2826:	22 e0       	ldi	r18, 0x02	; 2
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	1c c1       	rjmp	.+568    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 36 && curr_node == 19 && next_node == 20)
   {
	   return (r);
    282c:	23 e0       	ldi	r18, 0x03	; 3
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	19 c1       	rjmp	.+562    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 36 && curr_node == 19 && next_node == 18)
   {
	   return (lx);
    2832:	2d e0       	ldi	r18, 0x0D	; 13
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	16 c1       	rjmp	.+556    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 37 && curr_node == 21 && next_node == 20)
   {
	   return (f);
    2838:	21 e0       	ldi	r18, 0x01	; 1
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	13 c1       	rjmp	.+550    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 38 && curr_node == 25 && next_node == 24)
   {
	   return (bf);
    283e:	29 e0       	ldi	r18, 0x09	; 9
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	10 c1       	rjmp	.+544    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 39 && curr_node == 26 && next_node == 24)
   {
	   return (bf);
    2844:	29 e0       	ldi	r18, 0x09	; 9
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	0d c1       	rjmp	.+538    	; 0x2a64 <__stack+0x865>
   
   
   
   else if (pre_node ==0  && curr_node ==0 && next_node ==1)
   {
	   return (f);
    284a:	21 e0       	ldi	r18, 0x01	; 1
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	0a c1       	rjmp	.+532    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==0  && curr_node ==0 && next_node ==28)
   {
	   return (f);
    2850:	21 e0       	ldi	r18, 0x01	; 1
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	07 c1       	rjmp	.+526    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node == 0 && curr_node ==0 && next_node ==13)
   {
	   return (f);
    2856:	21 e0       	ldi	r18, 0x01	; 1
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	04 c1       	rjmp	.+520    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==1  && curr_node ==1 && next_node ==0)
   {
	   return (f);
    285c:	21 e0       	ldi	r18, 0x01	; 1
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	01 c1       	rjmp	.+514    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node == 1 && curr_node ==1 && next_node ==29)
   {
	   return (f);
    2862:	21 e0       	ldi	r18, 0x01	; 1
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	fe c0       	rjmp	.+508    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==1 && curr_node ==1 && next_node ==12)
   {
	   return (f);
    2868:	21 e0       	ldi	r18, 0x01	; 1
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	fb c0       	rjmp	.+502    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==2  && curr_node ==2 && next_node ==30)
   {
	   return (f);
    286e:	21 e0       	ldi	r18, 0x01	; 1
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	f8 c0       	rjmp	.+496    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==3  && curr_node ==3 && next_node ==2)
   {
	   return (f);
    2874:	21 e0       	ldi	r18, 0x01	; 1
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	f5 c0       	rjmp	.+490    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==3&& curr_node ==3 && next_node ==4)
   {
	   return (f);
    287a:	21 e0       	ldi	r18, 0x01	; 1
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	f2 c0       	rjmp	.+484    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==4 && curr_node ==4 && next_node ==3)
   {
	   return (f);
    2880:	21 e0       	ldi	r18, 0x01	; 1
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	ef c0       	rjmp	.+478    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==4  && curr_node ==4 && next_node == 5)
   {
	   return (f);
    2886:	21 e0       	ldi	r18, 0x01	; 1
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	ec c0       	rjmp	.+472    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==4  && curr_node ==4 && next_node ==31)
   {
	   return (f);
    288c:	21 e0       	ldi	r18, 0x01	; 1
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	e9 c0       	rjmp	.+466    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==5  && curr_node ==5 && next_node == 4)
   {
	   return (f);
    2892:	21 e0       	ldi	r18, 0x01	; 1
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	e6 c0       	rjmp	.+460    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==5  && curr_node ==5 && next_node ==32)
   {
	   return (sf);
    2898:	27 e0       	ldi	r18, 0x07	; 7
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	e3 c0       	rjmp	.+454    	; 0x2a64 <__stack+0x865>
   }
    else if (pre_node ==5  && curr_node ==5 && next_node ==8)
    {
	    return (f);
    289e:	21 e0       	ldi	r18, 0x01	; 1
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	e0 c0       	rjmp	.+448    	; 0x2a64 <__stack+0x865>
    }
   else if (pre_node ==6  && curr_node ==6 && next_node ==5)
   {
	   return (f);
    28a4:	21 e0       	ldi	r18, 0x01	; 1
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	dd c0       	rjmp	.+442    	; 0x2a64 <__stack+0x865>
	   
   }
   else if (pre_node ==6 && curr_node ==6 && next_node ==33)
   {
	   return (f);
    28aa:	21 e0       	ldi	r18, 0x01	; 1
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	da c0       	rjmp	.+436    	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node == 7 && curr_node ==7 && next_node ==6)
   {
	   return (f);
    28b0:	21 e0       	ldi	r18, 0x01	; 1
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	d7 c0       	rjmp	.+430    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==7  && curr_node ==7 && next_node ==8)
   {
	   return (f);
    28b6:	21 e0       	ldi	r18, 0x01	; 1
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	d4 c0       	rjmp	.+424    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==7  && curr_node ==7 && next_node == 20)
   {
	   return (f);
    28bc:	21 e0       	ldi	r18, 0x01	; 1
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	d1 c0       	rjmp	.+418    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==8  && curr_node ==8 && next_node ==9)
   {
	   return (f);
    28c2:	21 e0       	ldi	r18, 0x01	; 1
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	ce c0       	rjmp	.+412    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==8  && curr_node ==8 && next_node ==5)
   {
	   return (f);
    28c8:	21 e0       	ldi	r18, 0x01	; 1
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	cb c0       	rjmp	.+406    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==9  && curr_node ==9 && next_node ==8)
   {
	   return (f);
    28ce:	21 e0       	ldi	r18, 0x01	; 1
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	c8 c0       	rjmp	.+400    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node == 9 && curr_node ==9 && next_node ==18)
   {
	   return (f);
    28d4:	21 e0       	ldi	r18, 0x01	; 1
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	c5 c0       	rjmp	.+394    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==10 && curr_node ==10&& next_node ==11)
   {
	   return (f);
    28da:	21 e0       	ldi	r18, 0x01	; 1
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	c2 c0       	rjmp	.+388    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==11 && curr_node ==11&& next_node ==10)
   {
	   return (f);
    28e0:	21 e0       	ldi	r18, 0x01	; 1
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	bf c0       	rjmp	.+382    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==11 && curr_node ==11&& next_node ==12)
   {
	   return (f);
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	bc c0       	rjmp	.+376    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==11 && curr_node ==11&& next_node ==16)
   {
	   return (f);
    28ec:	21 e0       	ldi	r18, 0x01	; 1
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	b9 c0       	rjmp	.+370    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==12&& curr_node ==12&&next_node ==13)
   {
	   return (f);
    28f2:	21 e0       	ldi	r18, 0x01	; 1
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	b6 c0       	rjmp	.+364    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==12 && curr_node ==12&& next_node ==11)
   {
	   return (f);
    28f8:	21 e0       	ldi	r18, 0x01	; 1
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	b3 c0       	rjmp	.+358    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==12 && curr_node ==12&& next_node ==1)
   {
	   return (f);
    28fe:	21 e0       	ldi	r18, 0x01	; 1
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	b0 c0       	rjmp	.+352    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==13 && curr_node ==13&& next_node ==12)
   {
	   return (f);
    2904:	21 e0       	ldi	r18, 0x01	; 1
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	ad c0       	rjmp	.+346    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==13 && curr_node ==13&& next_node == 0)
   {
	   return (f);
    290a:	21 e0       	ldi	r18, 0x01	; 1
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	aa c0       	rjmp	.+340    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==14 && curr_node ==14&& next_node ==13)
   {
	   return (f);
    2910:	21 e0       	ldi	r18, 0x01	; 1
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	a7 c0       	rjmp	.+334    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==14 && curr_node ==14&& next_node ==22)
   {
	   return (f);
    2916:	21 e0       	ldi	r18, 0x01	; 1
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	a4 c0       	rjmp	.+328    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==15&& curr_node ==15&& next_node ==14)
   {
	   return (f);
    291c:	21 e0       	ldi	r18, 0x01	; 1
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	a1 c0       	rjmp	.+322    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==15 && curr_node ==15&& next_node ==16)
   {
	   return (f);
    2922:	21 e0       	ldi	r18, 0x01	; 1
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	9e c0       	rjmp	.+316    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==15 && curr_node ==115& next_node ==35)
   {
	   return (f);
    2928:	21 e0       	ldi	r18, 0x01	; 1
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	9b c0       	rjmp	.+310    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   
   else if (pre_node ==16 && curr_node ==16&& next_node ==17)
   {
	   return (f);
    292e:	21 e0       	ldi	r18, 0x01	; 1
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	98 c0       	rjmp	.+304    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==16 && curr_node ==16&& next_node ==11)
   {
	   return (f);
    2934:	21 e0       	ldi	r18, 0x01	; 1
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	95 c0       	rjmp	.+298    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==17 && curr_node ==17  && next_node ==16 )
   {
	   return (f);
    293a:	21 e0       	ldi	r18, 0x01	; 1
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	92 c0       	rjmp	.+292    	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node ==17  && curr_node ==17  && next_node ==23 )
   {
	   return (f);
    2940:	21 e0       	ldi	r18, 0x01	; 1
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	8f c0       	rjmp	.+286    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 18 && curr_node ==18  && next_node ==17 )
   {
	   return (f);
    2946:	21 e0       	ldi	r18, 0x01	; 1
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	8c c0       	rjmp	.+280    	; 0x2a64 <__stack+0x865>
   }
   
   else if (pre_node ==18  && curr_node ==18  && next_node ==9 )
   {
	   return (f);
    294c:	21 e0       	ldi	r18, 0x01	; 1
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	89 c0       	rjmp	.+274    	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node == 19 && curr_node ==19  && next_node ==20 )
   {
	   return (f);
    2952:	21 e0       	ldi	r18, 0x01	; 1
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	86 c0       	rjmp	.+268    	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node ==19  && curr_node ==19  && next_node ==18 )
   {
	   return (f);
    2958:	21 e0       	ldi	r18, 0x01	; 1
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	83 c0       	rjmp	.+262    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==19  && curr_node ==19  && next_node ==36 )
   {
	   return (f);
    295e:	21 e0       	ldi	r18, 0x01	; 1
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	80 c0       	rjmp	.+256    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==20  && curr_node ==20  && next_node ==19 )
   {
	   return (f);
    2964:	21 e0       	ldi	r18, 0x01	; 1
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	7d c0       	rjmp	.+250    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 20 && curr_node ==20  && next_node ==7 )
   {
	   return (f);
    296a:	21 e0       	ldi	r18, 0x01	; 1
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	7a c0       	rjmp	.+244    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==20  && curr_node == 20 && next_node ==21 )
   {
	   return (f);
    2970:	21 e0       	ldi	r18, 0x01	; 1
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	77 c0       	rjmp	.+238    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 21  && curr_node ==21  && next_node == 37 )
   {
	   return (f);
    2976:	21 e0       	ldi	r18, 0x01	; 1
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	74 c0       	rjmp	.+232    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==21  && curr_node ==21  && next_node ==20 )
   {
	   return (f);
    297c:	21 e0       	ldi	r18, 0x01	; 1
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	71 c0       	rjmp	.+226    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==22  && curr_node ==22  && next_node ==14 )
   {
	   return (f);
    2982:	21 e0       	ldi	r18, 0x01	; 1
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	6e c0       	rjmp	.+220    	; 0x2a64 <__stack+0x865>
   }else if (pre_node ==22  && curr_node ==22  && next_node ==34 )
   {
	   return (f);
    2988:	21 e0       	ldi	r18, 0x01	; 1
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	6b c0       	rjmp	.+214    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==23  && curr_node ==23  && next_node ==24 )
   {
	   return (f);
    298e:	21 e0       	ldi	r18, 0x01	; 1
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	68 c0       	rjmp	.+208    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==23  && curr_node ==23  && next_node ==17 )
   {
	   return (f);
    2994:	21 e0       	ldi	r18, 0x01	; 1
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	65 c0       	rjmp	.+202    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==24  && curr_node ==24  && next_node ==25 )
   {
	   return (f);
    299a:	21 e0       	ldi	r18, 0x01	; 1
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	62 c0       	rjmp	.+196    	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node ==24  && curr_node ==24  && next_node ==23 )
   {
	   return (f);
    29a0:	21 e0       	ldi	r18, 0x01	; 1
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	5f c0       	rjmp	.+190    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==25  && curr_node ==25  && next_node ==24 )
   {
	   return (f);
    29a6:	21 e0       	ldi	r18, 0x01	; 1
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	5c c0       	rjmp	.+184    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 25 && curr_node ==25  && next_node ==38 )
   {
	   return (f);
    29ac:	21 e0       	ldi	r18, 0x01	; 1
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	59 c0       	rjmp	.+178    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==26  && curr_node ==26  && next_node ==24 )
   {
	   return (f);
    29b2:	21 e0       	ldi	r18, 0x01	; 1
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	56 c0       	rjmp	.+172    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==26  && curr_node ==26  && next_node ==39 )
   {
	   return (f);
    29b8:	21 e0       	ldi	r18, 0x01	; 1
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	53 c0       	rjmp	.+166    	; 0x2a64 <__stack+0x865>
	   return (f);
   }
   else if (pre_node ==28  && curr_node ==28  && next_node == 0)
   {
	    node();
	    return(0);
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	50 c0       	rjmp	.+160    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==29  && curr_node == 29 && next_node == 1)
   {
	  node();
	  return(0);
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4d c0       	rjmp	.+154    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==30  && curr_node ==30  && next_node ==2 )
   {
	    node();
	    return(0);
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a c0       	rjmp	.+148    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==31  && curr_node == 31 && next_node ==4 )
   {
	    node();
	    return(0);
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	47 c0       	rjmp	.+142    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==32  && curr_node ==32  && next_node ==5 )
   {
	   node();
	   return(0);
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	44 c0       	rjmp	.+136    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==33  && curr_node ==33  && next_node ==6 )
   {
	   node();
	   return(0);
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	41 c0       	rjmp	.+130    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==34  && curr_node ==34  && next_node ==22 )
   {
	   return (bb);
    29e2:	28 e0       	ldi	r18, 0x08	; 8
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	3e c0       	rjmp	.+124    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==35  && curr_node == 35 && next_node ==15 )
   {
	   node();
	   return(0);
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	3b c0       	rjmp	.+118    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 36 && curr_node == 36 && next_node ==19 )
   {
	   node();
	   return(0);
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	38 c0       	rjmp	.+112    	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node ==37  && curr_node ==37  && next_node ==21 )
   {
	   return (bb);
    29f4:	28 e0       	ldi	r18, 0x08	; 8
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	35 c0       	rjmp	.+106    	; 0x2a64 <__stack+0x865>
	   
   }
   else if (pre_node =38  && curr_node ==38  && next_node ==25 )
   {
	     node();
	     return(0);
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	32 c0       	rjmp	.+100    	; 0x2a64 <__stack+0x865>
	  return(0);
   }

   else if (pre_node == 0 && curr_node == 0 && next_node == 0)
   {
	   return (f);
    2a00:	21 e0       	ldi	r18, 0x01	; 1
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	2f c0       	rjmp	.+94     	; 0x2a64 <__stack+0x865>
   }
    else if (pre_node == 0 && curr_node == 0 && next_node == 13)
      {
	return (f);
    2a06:	21 e0       	ldi	r18, 0x01	; 1
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	2c c0       	rjmp	.+88     	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node == 0 && curr_node == 1 && next_node == 29)
   {
	   return (sr);
    2a0c:	26 e0       	ldi	r18, 0x06	; 6
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	29 c0       	rjmp	.+82     	; 0x2a64 <__stack+0x865>
   {
	   return (r);
   }
   else if (pre_node == 1 && curr_node == 0 && next_node == 28)
   {
	   return (sl);
    2a12:	25 e0       	ldi	r18, 0x05	; 5
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	26 c0       	rjmp	.+76     	; 0x2a64 <__stack+0x865>
   {
	   return (l);
   }
   else if (pre_node == 2 && curr_node == 1&& next_node == 29)
   {
	   return (sl);
    2a18:	25 e0       	ldi	r18, 0x05	; 5
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	23 c0       	rjmp	.+70     	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node == 3 && curr_node == 2 && next_node == 30)
   {
	   return (sl);
    2a1e:	25 e0       	ldi	r18, 0x05	; 5
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	20 c0       	rjmp	.+64     	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 3 && curr_node == 4 && next_node == 31)
   {
	   return (sr);
    2a24:	26 e0       	ldi	r18, 0x06	; 6
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	1d c0       	rjmp	.+58     	; 0x2a64 <__stack+0x865>
   {
	   return (l);
   }
   else if (pre_node == 5 && curr_node == 4 && next_node == 31)
   {
	   return (sl);
    2a2a:	25 e0       	ldi	r18, 0x05	; 5
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	1a c0       	rjmp	.+52     	; 0x2a64 <__stack+0x865>
   }
   else if (pre_node == 5 && curr_node == 6 && next_node == 33)
   {
	   return (sr);
    2a30:	26 e0       	ldi	r18, 0x06	; 6
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	17 c0       	rjmp	.+46     	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node == 7 && curr_node == 6 && next_node == 33)
   {
	   return (sf);
    2a36:	27 e0       	ldi	r18, 0x07	; 7
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <__stack+0x865>
   {
	   return (r);
   }
   else if (pre_node == 13 && curr_node == 0 && next_node == 28)
   {
	   return (sf);
    2a3c:	27 e0       	ldi	r18, 0x07	; 7
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	11 c0       	rjmp	.+34     	; 0x2a64 <__stack+0x865>
   {
	   return (sf);
   }
   else if (pre_node == 14 && curr_node == 15 && next_node == 35)
   {
	   return (l);
    2a42:	22 e0       	ldi	r18, 0x02	; 2
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	0e c0       	rjmp	.+28     	; 0x2a64 <__stack+0x865>
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 16 && curr_node == 15 && next_node == 35)
   {
	   return (sr);
    2a48:	26 e0       	ldi	r18, 0x06	; 6
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	0b c0       	rjmp	.+22     	; 0x2a64 <__stack+0x865>
   {
	   return (lr);
   }
   else if (pre_node == 18 && curr_node == 19 && next_node == 36)
   {
	   return (sl);
    2a4e:	25 e0       	ldi	r18, 0x05	; 5
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <__stack+0x865>
   {
	   return (f);
   }
   else if (pre_node == 20 && curr_node == 19 && next_node == 36)
   {
	   return (r);
    2a54:	23 e0       	ldi	r18, 0x03	; 3
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	05 c0       	rjmp	.+10     	; 0x2a64 <__stack+0x865>
		while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		{
			blackline_data();
			blackline_lifting();
		}
	   return (0);
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <__stack+0x865>
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	82 2f       	mov	r24, r18
    2a66:	93 2f       	mov	r25, r19
    2a68:	08 95       	ret
   }
   else if (pre_node == 0 && curr_node == 13 && next_node == 14)
   {
	   return (f);
   }
   else if (pre_node == 0 && curr_node == 1 && next_node == 29)
    2a6a:	4d 31       	cpi	r20, 0x1D	; 29
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	71 f2       	breq	.-100    	; 0x2a0c <__stack+0x80d>
    2a70:	5c cd       	rjmp	.-1352   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 1 && curr_node == 12 && next_node == 11)
   {
	   return (r);
   }
   else if (pre_node == 1 && curr_node == 0 && next_node == 28)
    2a72:	4c 31       	cpi	r20, 0x1C	; 28
    2a74:	51 05       	cpc	r21, r1
    2a76:	69 f2       	breq	.-102    	; 0x2a12 <__stack+0x813>
    2a78:	50 cd       	rjmp	.-1376   	; 0x251a <__stack+0x31b>
   }
   else if (pre_node == 2 && curr_node == 3 && next_node == 10)
   {
	   return (l);
   }
   else if (pre_node == 2 && curr_node == 1&& next_node == 29)
    2a7a:	4d 31       	cpi	r20, 0x1D	; 29
    2a7c:	51 05       	cpc	r21, r1
    2a7e:	61 f2       	breq	.-104    	; 0x2a18 <__stack+0x819>
    2a80:	54 cd       	rjmp	.-1368   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 3 && curr_node == 10 && next_node == 27)
   {
	   return (f);
   }
   else if (pre_node == 3 && curr_node == 2 && next_node == 30)
    2a82:	4e 31       	cpi	r20, 0x1E	; 30
    2a84:	51 05       	cpc	r21, r1
    2a86:	59 f2       	breq	.-106    	; 0x2a1e <__stack+0x81f>
    2a88:	50 cd       	rjmp	.-1376   	; 0x252a <__stack+0x32b>
   {
	   return (sl);
   }
   else if (pre_node == 3 && curr_node == 4 && next_node == 31)
    2a8a:	4f 31       	cpi	r20, 0x1F	; 31
    2a8c:	51 05       	cpc	r21, r1
    2a8e:	51 f2       	breq	.-108    	; 0x2a24 <__stack+0x825>
    2a90:	4c cd       	rjmp	.-1384   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 5 && curr_node == 6 && next_node == 7)
   {
	   return (l);
   }
   else if (pre_node == 5 && curr_node == 4 && next_node == 31)
    2a92:	4f 31       	cpi	r20, 0x1F	; 31
    2a94:	51 05       	cpc	r21, r1
    2a96:	49 f2       	breq	.-110    	; 0x2a2a <__stack+0x82b>
    2a98:	48 cd       	rjmp	.-1392   	; 0x252a <__stack+0x32b>
   {
	   return (sl);
   }
   else if (pre_node == 5 && curr_node == 6 && next_node == 33)
    2a9a:	41 32       	cpi	r20, 0x21	; 33
    2a9c:	51 05       	cpc	r21, r1
    2a9e:	41 f2       	breq	.-112    	; 0x2a30 <__stack+0x831>
    2aa0:	44 cd       	rjmp	.-1400   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 7 && curr_node == 20 && next_node == 21)
   {
	   return (f);
   }
   else if (pre_node == 7 && curr_node == 6 && next_node == 33)
    2aa2:	41 32       	cpi	r20, 0x21	; 33
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	39 f2       	breq	.-114    	; 0x2a36 <__stack+0x837>
    2aa8:	40 cd       	rjmp	.-1408   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 13 && curr_node == 14 && next_node == 15)
   {
	   return (r);
   }
   else if (pre_node == 13 && curr_node == 0 && next_node == 28)
    2aaa:	4c 31       	cpi	r20, 0x1C	; 28
    2aac:	51 05       	cpc	r21, r1
    2aae:	31 f2       	breq	.-116    	; 0x2a3c <__stack+0x83d>
    2ab0:	34 cd       	rjmp	.-1432   	; 0x251a <__stack+0x31b>
   }
   else if (pre_node == 14 && curr_node == 22 && next_node == 34)
   {
	   return (sf);
   }
   else if (pre_node == 14 && curr_node == 15 && next_node == 35)
    2ab2:	43 32       	cpi	r20, 0x23	; 35
    2ab4:	51 05       	cpc	r21, r1
    2ab6:	29 f2       	breq	.-118    	; 0x2a42 <__stack+0x843>
    2ab8:	38 cd       	rjmp	.-1424   	; 0x252a <__stack+0x32b>
	    velocity(0,150);
		delay(100);
	    while(ADC_Conversion(2)<0x96);
	   return (f);
   }
   else if (pre_node == 16 && curr_node == 15 && next_node == 35)
    2aba:	43 32       	cpi	r20, 0x23	; 35
    2abc:	51 05       	cpc	r21, r1
    2abe:	21 f2       	breq	.-120    	; 0x2a48 <__stack+0x849>
    2ac0:	34 cd       	rjmp	.-1432   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 18 && curr_node == 17 && next_node == 23)
   {
	   return (lr);
   }
   else if (pre_node == 18 && curr_node == 19 && next_node == 36)
    2ac2:	44 32       	cpi	r20, 0x24	; 36
    2ac4:	51 05       	cpc	r21, r1
    2ac6:	19 f2       	breq	.-122    	; 0x2a4e <__stack+0x84f>
    2ac8:	30 cd       	rjmp	.-1440   	; 0x252a <__stack+0x32b>
   }
   else if (pre_node == 20 && curr_node == 7 && next_node == 6)
   {
	   return (f);
   }
   else if (pre_node == 20 && curr_node == 19 && next_node == 36)
    2aca:	44 32       	cpi	r20, 0x24	; 36
    2acc:	51 05       	cpc	r21, r1
    2ace:	11 f2       	breq	.-124    	; 0x2a54 <__stack+0x855>
    2ad0:	2c cd       	rjmp	.-1448   	; 0x252a <__stack+0x32b>
	   return (r);
   }
   else if (pre_node == 21 && curr_node == 20 && next_node == 7)
   {
		blackline_data();
		while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2ad2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    2ad6:	87 39       	cpi	r24, 0x97	; 151
    2ad8:	08 f4       	brcc	.+2      	; 0x2adc <__stack+0x8dd>
    2ada:	f4 c9       	rjmp	.-3096   	; 0x1ec4 <check_condition+0x7d2>
    2adc:	be cf       	rjmp	.-132    	; 0x2a5a <__stack+0x85b>
    2ade:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    2ae2:	87 39       	cpi	r24, 0x97	; 151
    2ae4:	08 f4       	brcc	.+2      	; 0x2ae8 <__stack+0x8e9>
    2ae6:	ee c9       	rjmp	.-3108   	; 0x1ec4 <check_condition+0x7d2>
    2ae8:	bb cf       	rjmp	.-138    	; 0x2a60 <__stack+0x861>
   else if (pre_node ==37  && curr_node ==37  && next_node ==21 )
   {
	   return (bb);
	   
   }
   else if (pre_node =38  && curr_node ==38  && next_node ==25 )
    2aea:	66 32       	cpi	r22, 0x26	; 38
    2aec:	71 05       	cpc	r23, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <__stack+0x8f3>
    2af0:	0e cd       	rjmp	.-1508   	; 0x250e <__stack+0x30f>
    2af2:	1b cd       	rjmp	.-1482   	; 0x252a <__stack+0x32b>

00002af4 <check_path>:
}


//
int check_path (void)
{
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
  int p = 0, c = 0, n = 1, y = 0;
  while ((n == sizepath) != 1)
    2b00:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <sizepath>
    2b04:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <sizepath+0x1>
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	29 f1       	breq	.+74     	; 0x2b56 <check_path+0x62>
    2b0c:	0b e7       	ldi	r16, 0x7B	; 123
    2b0e:	12 e0       	ldi	r17, 0x02	; 2
    2b10:	c1 e0       	ldi	r28, 0x01	; 1
    2b12:	d0 e0       	ldi	r29, 0x00	; 0
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	7e 01       	movw	r14, r28
    2b1a:	21 e0       	ldi	r18, 0x01	; 1
    2b1c:	e2 1a       	sub	r14, r18
    2b1e:	f1 08       	sbc	r15, r1
    2b20:	f8 01       	movw	r30, r16
    {
      int z = 0;
      z = check_condition (path[p], path[c], path[n]);
    2b22:	42 81       	ldd	r20, Z+2	; 0x02
    2b24:	53 81       	ldd	r21, Z+3	; 0x03
    2b26:	0e 5f       	subi	r16, 0xFE	; 254
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	fc 01       	movw	r30, r24
    2b34:	e5 58       	subi	r30, 0x85	; 133
    2b36:	fd 4f       	sbci	r31, 0xFD	; 253
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <check_condition>
      p = c;
      c = n;
      n++;
    2b40:	21 96       	adiw	r28, 0x01	; 1
      pushp (z);
    2b42:	0e 94 06 04 	call	0x80c	; 0x80c <pushp>
    2b46:	c7 01       	movw	r24, r14

//
int check_path (void)
{
  int p = 0, c = 0, n = 1, y = 0;
  while ((n == sizepath) != 1)
    2b48:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <sizepath>
    2b4c:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <sizepath+0x1>
    2b50:	2c 17       	cp	r18, r28
    2b52:	3d 07       	cpc	r19, r29
    2b54:	09 f7       	brne	.-62     	; 0x2b18 <check_path+0x24>
      c = n;
      n++;
      pushp (z);
	
    }
}
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	08 95       	ret

00002b64 <followpath>:
}

// to follow the bot from source node to destination node
int followpath(int source, int destination)

{ 
    2b64:	8f 92       	push	r8
    2b66:	9f 92       	push	r9
    2b68:	af 92       	push	r10
    2b6a:	bf 92       	push	r11
    2b6c:	cf 92       	push	r12
    2b6e:	df 92       	push	r13
    2b70:	ef 92       	push	r14
    2b72:	ff 92       	push	r15
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	ec 01       	movw	r28, r24
    2b7e:	4b 01       	movw	r8, r22
  initialize ();
    2b80:	0e 94 ce 03 	call	0x79c	; 0x79c <initialize>
 find_path (source, destination, pass[0], pass[1], pass[2], pass[3], pass[4],
    2b84:	ef ec       	ldi	r30, 0xCF	; 207
    2b86:	f2 e0       	ldi	r31, 0x02	; 2
    2b88:	a2 84       	ldd	r10, Z+10	; 0x0a
    2b8a:	b3 84       	ldd	r11, Z+11	; 0x0b
    2b8c:	c0 84       	ldd	r12, Z+8	; 0x08
    2b8e:	d1 84       	ldd	r13, Z+9	; 0x09
    2b90:	e6 80       	ldd	r14, Z+6	; 0x06
    2b92:	f7 80       	ldd	r15, Z+7	; 0x07
    2b94:	04 81       	ldd	r16, Z+4	; 0x04
    2b96:	15 81       	ldd	r17, Z+5	; 0x05
    2b98:	22 81       	ldd	r18, Z+2	; 0x02
    2b9a:	33 81       	ldd	r19, Z+3	; 0x03
    2b9c:	40 81       	ld	r20, Z
    2b9e:	51 81       	ldd	r21, Z+1	; 0x01
    2ba0:	b4 01       	movw	r22, r8
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	0e 94 6f 05 	call	0xade	; 0xade <find_path>
	     pass[5]);
  find_size_of_path ();
    2ba8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <find_size_of_path>
  check_path ();
    2bac:	a3 df       	rcall	.-186    	; 0x2af4 <check_path>
  find_size_of_bot ();
    2bae:	0e 94 a6 08 	call	0x114c	; 0x114c <find_size_of_bot>

  for (bot_index = 0; bot_index < sizebot; bot_index++)
    2bb2:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <__data_end+0x1>
    2bb6:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__data_end>
    2bba:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <sizebot>
    2bbe:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <sizebot+0x1>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	19 06       	cpc	r1, r25
    2bc6:	0c f0       	brlt	.+2      	; 0x2bca <followpath+0x66>
    2bc8:	51 c6       	rjmp	.+3234   	; 0x386c <followpath+0xd08>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
		  
default:
		
		  lcd_cursor(1,1);
		  lcd_string("break");
		  printf ("%d\t", 0);
    2bce:	0f 2e       	mov	r0, r31
    2bd0:	ff e5       	ldi	r31, 0x5F	; 95
    2bd2:	cf 2e       	mov	r12, r31
    2bd4:	f2 e0       	ldi	r31, 0x02	; 2
    2bd6:	df 2e       	mov	r13, r31
    2bd8:	f0 2d       	mov	r31, r0
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2bda:	0f 2e       	mov	r0, r31
    2bdc:	f8 e2       	ldi	r31, 0x28	; 40
    2bde:	ef 2e       	mov	r14, r31
    2be0:	ff 24       	eor	r15, r15
    2be2:	f3 94       	inc	r15
    2be4:	f0 2d       	mov	r31, r0
    2be6:	bb 24       	eor	r11, r11
    2be8:	ba 94       	dec	r11
	OCR5BL = (unsigned char)right_motor;
    2bea:	ca e2       	ldi	r28, 0x2A	; 42
    2bec:	d1 e0       	ldi	r29, 0x01	; 1
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2bee:	0f 2e       	mov	r0, r31
    2bf0:	f6 e9       	ldi	r31, 0x96	; 150
    2bf2:	af 2e       	mov	r10, r31
    2bf4:	f0 2d       	mov	r31, r0
  check_path ();
  find_size_of_bot ();

  for (bot_index = 0; bot_index < sizebot; bot_index++)
  {
	  	  lcd_print(2,4,path[(bot_index)-1],2);
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	e7 58       	subi	r30, 0x87	; 135
    2bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    2c00:	20 81       	ld	r18, Z
    2c02:	31 81       	ldd	r19, Z+1	; 0x01
    2c04:	03 2e       	mov	r0, r19
    2c06:	00 0c       	add	r0, r0
    2c08:	44 0b       	sbc	r20, r20
    2c0a:	55 0b       	sbc	r21, r21
    2c0c:	02 e0       	ldi	r16, 0x02	; 2
    2c0e:	10 e0       	ldi	r17, 0x00	; 0
    2c10:	64 e0       	ldi	r22, 0x04	; 4
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
	  	  lcd_print(2,8,path[bot_index],2);
    2c18:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
    2c1c:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
    2c20:	ee 0f       	add	r30, r30
    2c22:	ff 1f       	adc	r31, r31
    2c24:	e5 58       	subi	r30, 0x85	; 133
    2c26:	fd 4f       	sbci	r31, 0xFD	; 253
    2c28:	20 81       	ld	r18, Z
    2c2a:	31 81       	ldd	r19, Z+1	; 0x01
    2c2c:	03 2e       	mov	r0, r19
    2c2e:	00 0c       	add	r0, r0
    2c30:	44 0b       	sbc	r20, r20
    2c32:	55 0b       	sbc	r21, r21
    2c34:	68 e0       	ldi	r22, 0x08	; 8
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
	  	  lcd_print(2,12,path[(bot_index)+1],2);
    2c3c:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
    2c40:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	e3 58       	subi	r30, 0x83	; 131
    2c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c4c:	20 81       	ld	r18, Z
    2c4e:	31 81       	ldd	r19, Z+1	; 0x01
    2c50:	03 2e       	mov	r0, r19
    2c52:	00 0c       	add	r0, r0
    2c54:	44 0b       	sbc	r20, r20
    2c56:	55 0b       	sbc	r21, r21
    2c58:	6c e0       	ldi	r22, 0x0C	; 12
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
	  	  

	  		lcd_print(1,4,bot[(bot_index)-1],2);
    2c60:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
    2c64:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
    2c68:	ee 0f       	add	r30, r30
    2c6a:	ff 1f       	adc	r31, r31
    2c6c:	e4 5e       	subi	r30, 0xE4	; 228
    2c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c70:	20 81       	ld	r18, Z
    2c72:	31 81       	ldd	r19, Z+1	; 0x01
    2c74:	03 2e       	mov	r0, r19
    2c76:	00 0c       	add	r0, r0
    2c78:	44 0b       	sbc	r20, r20
    2c7a:	55 0b       	sbc	r21, r21
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
	  		lcd_print(1,8,bot[bot_index],2);
    2c84:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
    2c88:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
    2c8c:	ee 0f       	add	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	e2 5e       	subi	r30, 0xE2	; 226
    2c92:	fc 4f       	sbci	r31, 0xFC	; 252
    2c94:	20 81       	ld	r18, Z
    2c96:	31 81       	ldd	r19, Z+1	; 0x01
    2c98:	03 2e       	mov	r0, r19
    2c9a:	00 0c       	add	r0, r0
    2c9c:	44 0b       	sbc	r20, r20
    2c9e:	55 0b       	sbc	r21, r21
    2ca0:	68 e0       	ldi	r22, 0x08	; 8
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
	  		lcd_print(1,12,bot[(bot_index)+1],2);
    2ca8:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
    2cac:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
    2cb0:	ee 0f       	add	r30, r30
    2cb2:	ff 1f       	adc	r31, r31
    2cb4:	e0 5e       	subi	r30, 0xE0	; 224
    2cb6:	fc 4f       	sbci	r31, 0xFC	; 252
    2cb8:	20 81       	ld	r18, Z
    2cba:	31 81       	ldd	r19, Z+1	; 0x01
    2cbc:	03 2e       	mov	r0, r19
    2cbe:	00 0c       	add	r0, r0
    2cc0:	44 0b       	sbc	r20, r20
    2cc2:	55 0b       	sbc	r21, r21
    2cc4:	6c e0       	ldi	r22, 0x0C	; 12
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	0e 94 09 02 	call	0x412	; 0x412 <lcd_print>
			 
	    switch (bot[bot_index])
    2ccc:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__data_end>
    2cd0:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__data_end+0x1>
    2cd4:	ee 0f       	add	r30, r30
    2cd6:	ff 1f       	adc	r31, r31
    2cd8:	e2 5e       	subi	r30, 0xE2	; 226
    2cda:	fc 4f       	sbci	r31, 0xFC	; 252
    2cdc:	01 90       	ld	r0, Z+
    2cde:	f0 81       	ld	r31, Z
    2ce0:	e0 2d       	mov	r30, r0
    2ce2:	31 97       	sbiw	r30, 0x01	; 1
    2ce4:	e2 31       	cpi	r30, 0x12	; 18
    2ce6:	f1 05       	cpc	r31, r1
    2ce8:	08 f0       	brcs	.+2      	; 0x2cec <followpath+0x188>
    2cea:	d1 c4       	rjmp	.+2466   	; 0x368e <followpath+0xb2a>
    2cec:	88 27       	eor	r24, r24
    2cee:	ee 58       	subi	r30, 0x8E	; 142
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf4:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__tablejump2__>
	  {
		  case 1:
		   //velocity(150,150);
		   //forward();
		   //delay(500);
		  blackline_data();
    2cf8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		  blackline();
    2cfc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2d00:	17 c0       	rjmp	.+46     	; 0x2d30 <followpath+0x1cc>
		  {
			  delay(50);
    2d02:	62 e3       	ldi	r22, 0x32	; 50
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <followpath+0x1b4>
			  {
			//obstacle = check_obstacle();
			  blackline_data();
    2d10:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  blackline();
    2d14:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  blackline_data();
		  blackline();
		  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		  {
			  delay(50);
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2d18:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2d1c:	87 39       	cpi	r24, 0x97	; 151
    2d1e:	20 f4       	brcc	.+8      	; 0x2d28 <followpath+0x1c4>
    2d20:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2d24:	87 39       	cpi	r24, 0x97	; 151
    2d26:	a0 f3       	brcs	.-24     	; 0x2d10 <followpath+0x1ac>
    2d28:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    2d2c:	87 39       	cpi	r24, 0x97	; 151
    2d2e:	80 f3       	brcs	.-32     	; 0x2d10 <followpath+0x1ac>
		   //velocity(150,150);
		   //forward();
		   //delay(500);
		  blackline_data();
		  blackline();
		  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2d30:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2d34:	87 39       	cpi	r24, 0x97	; 151
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <followpath+0x1d6>
    2d38:	cd c4       	rjmp	.+2458   	; 0x36d4 <followpath+0xb70>
    2d3a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2d3e:	87 39       	cpi	r24, 0x97	; 151
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <followpath+0x1e0>
    2d42:	ce c4       	rjmp	.+2460   	; 0x36e0 <followpath+0xb7c>
    2d44:	de cf       	rjmp	.-68     	; 0x2d02 <followpath+0x19e>
			  blackline_data();
			  blackline();
		  }
		  }
		  node();
		  delay(50);
    2d46:	62 e3       	ldi	r22, 0x32	; 50
    2d48:	70 e0       	ldi	r23, 0x00	; 0
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  //stop();
		  //delay(150);
		  printf ("%d\t", 2);
    2d52:	1f 92       	push	r1
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	8f 93       	push	r24
    2d58:	df 92       	push	r13
    2d5a:	cf 92       	push	r12
    2d5c:	0e 94 9c 22 	call	0x4538	; 0x4538 <printf>
		  break;
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	a3 c4       	rjmp	.+2374   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2d6a:	f7 01       	movw	r30, r14
    2d6c:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2d6e:	b8 82       	st	Y, r11
		  printf ("%d\t", 2);
		  break;
		  
		  case 2	:
		    velocity(255,255);
		    forward();
    2d70:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		    delay(280);
    2d74:	68 e1       	ldi	r22, 0x18	; 24
    2d76:	71 e0       	ldi	r23, 0x01	; 1
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  left();
    2d80:	0e 94 69 02 	call	0x4d2	; 0x4d2 <left>
		  delay(500);
    2d84:	64 ef       	ldi	r22, 0xF4	; 244
    2d86:	71 e0       	ldi	r23, 0x01	; 1
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  while(ADC_Conversion(1) < 0x96);
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2d96:	86 39       	cpi	r24, 0x96	; 150
    2d98:	d8 f3       	brcs	.-10     	; 0x2d90 <followpath+0x22c>
		  //stop();
		  //delay(100);
		  blackline_data();
    2d9a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2d9e:	17 c0       	rjmp	.+46     	; 0x2dce <followpath+0x26a>
		    {delay(50);
    2da0:	62 e3       	ldi	r22, 0x32	; 50
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <followpath+0x252>
			    {
				    //obstacle = check_obstacle();
				    blackline_data();
    2dae:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				    blackline();
    2db2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		    {delay(50);
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2db6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2dba:	87 39       	cpi	r24, 0x97	; 151
    2dbc:	20 f4       	brcc	.+8      	; 0x2dc6 <followpath+0x262>
    2dbe:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2dc2:	87 39       	cpi	r24, 0x97	; 151
    2dc4:	a0 f3       	brcs	.-24     	; 0x2dae <followpath+0x24a>
    2dc6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    2dca:	87 39       	cpi	r24, 0x97	; 151
    2dcc:	80 f3       	brcs	.-32     	; 0x2dae <followpath+0x24a>
		  delay(500);
		  while(ADC_Conversion(1) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2dce:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2dd2:	87 39       	cpi	r24, 0x97	; 151
    2dd4:	08 f0       	brcs	.+2      	; 0x2dd8 <followpath+0x274>
    2dd6:	8a c4       	rjmp	.+2324   	; 0x36ec <followpath+0xb88>
    2dd8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2ddc:	87 39       	cpi	r24, 0x97	; 151
    2dde:	08 f0       	brcs	.+2      	; 0x2de2 <followpath+0x27e>
    2de0:	8b c4       	rjmp	.+2326   	; 0x36f8 <followpath+0xb94>
    2de2:	de cf       	rjmp	.-68     	; 0x2da0 <followpath+0x23c>
				    blackline_data();
				    blackline();
			    }
		    }
			node();
		  delay(50);
    2de4:	62 e3       	ldi	r22, 0x32	; 50
    2de6:	70 e0       	ldi	r23, 0x00	; 0
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  //stop();
		  //delay(150);
		  break;
    2df0:	5f c4       	rjmp	.+2238   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2df2:	f7 01       	movw	r30, r14
    2df4:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2df6:	b8 82       	st	Y, r11
		  //delay(150);
		  break;
		  
		  case 3 :
		  velocity(255,255);
		  forward();
    2df8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		  delay(280);
    2dfc:	68 e1       	ldi	r22, 0x18	; 24
    2dfe:	71 e0       	ldi	r23, 0x01	; 1
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  right();
    2e08:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
		  delay(500);
    2e0c:	64 ef       	ldi	r22, 0xF4	; 244
    2e0e:	71 e0       	ldi	r23, 0x01	; 1
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  while(ADC_Conversion(2) < 0x96);
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2e1e:	86 39       	cpi	r24, 0x96	; 150
    2e20:	d8 f3       	brcs	.-10     	; 0x2e18 <followpath+0x2b4>
		  //stop();
		  //delay(100);
		  blackline_data();
    2e22:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2e26:	17 c0       	rjmp	.+46     	; 0x2e56 <followpath+0x2f2>
		    {delay(50);
    2e28:	62 e3       	ldi	r22, 0x32	; 50
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2e34:	04 c0       	rjmp	.+8      	; 0x2e3e <followpath+0x2da>
			    {
				    //obstacle = check_obstacle();
				    blackline_data();
    2e36:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				    blackline();
    2e3a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		    {delay(50);
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2e3e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2e42:	87 39       	cpi	r24, 0x97	; 151
    2e44:	20 f4       	brcc	.+8      	; 0x2e4e <followpath+0x2ea>
    2e46:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2e4a:	87 39       	cpi	r24, 0x97	; 151
    2e4c:	a0 f3       	brcs	.-24     	; 0x2e36 <followpath+0x2d2>
    2e4e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    2e52:	87 39       	cpi	r24, 0x97	; 151
    2e54:	80 f3       	brcs	.-32     	; 0x2e36 <followpath+0x2d2>
		  delay(500);
		  while(ADC_Conversion(2) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2e56:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2e5a:	87 39       	cpi	r24, 0x97	; 151
    2e5c:	08 f0       	brcs	.+2      	; 0x2e60 <followpath+0x2fc>
    2e5e:	52 c4       	rjmp	.+2212   	; 0x3704 <followpath+0xba0>
    2e60:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2e64:	87 39       	cpi	r24, 0x97	; 151
    2e66:	08 f0       	brcs	.+2      	; 0x2e6a <followpath+0x306>
    2e68:	53 c4       	rjmp	.+2214   	; 0x3710 <followpath+0xbac>
    2e6a:	de cf       	rjmp	.-68     	; 0x2e28 <followpath+0x2c4>
				    blackline_data();
				    blackline();
			    }
		    }
			node();
		  delay(50);
    2e6c:	62 e3       	ldi	r22, 0x32	; 50
    2e6e:	70 e0       	ldi	r23, 0x00	; 0
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  break;
    2e78:	1b c4       	rjmp	.+2102   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2e7a:	f7 01       	movw	r30, r14
    2e7c:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2e7e:	b8 82       	st	Y, r11
			node();
		  delay(50);
		  break;
	case 4:
		   velocity(255,255);
		    right();
    2e80:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
			delay(1000);
    2e84:	68 ee       	ldi	r22, 0xE8	; 232
    2e86:	73 e0       	ldi	r23, 0x03	; 3
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		   while(ADC_Conversion(2) < 0x96);
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2e96:	86 39       	cpi	r24, 0x96	; 150
    2e98:	d8 f3       	brcs	.-10     	; 0x2e90 <followpath+0x32c>
		  // stop();
		  node();
		   //delay(150);
		   printf ("%d\t", 2);
    2e9a:	1f 92       	push	r1
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	8f 93       	push	r24
    2ea0:	df 92       	push	r13
    2ea2:	cf 92       	push	r12
    2ea4:	0e 94 9c 22 	call	0x4538	; 0x4538 <printf>
		   break;
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	ff c3       	rjmp	.+2046   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2eb2:	f7 01       	movw	r30, r14
    2eb4:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2eb6:	b8 82       	st	Y, r11
		   printf ("%d\t", 2);
		   break;
		   
	case 5:
		    velocity(255,255);
		    forward();
    2eb8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		    delay(380);
    2ebc:	6c e7       	ldi	r22, 0x7C	; 124
    2ebe:	71 e0       	ldi	r23, 0x01	; 1
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		    left();
    2ec8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <left>
		    delay(400);
    2ecc:	60 e9       	ldi	r22, 0x90	; 144
    2ece:	71 e0       	ldi	r23, 0x01	; 1
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		    while(ADC_Conversion(2) < 0x96);
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2ede:	86 39       	cpi	r24, 0x96	; 150
    2ee0:	d8 f3       	brcs	.-10     	; 0x2ed8 <followpath+0x374>
		    stop();
    2ee2:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
		    delay(1000);
    2ee6:	68 ee       	ldi	r22, 0xE8	; 232
    2ee8:	73 e0       	ldi	r23, 0x03	; 3
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			node();
			break;
    2ef2:	de c3       	rjmp	.+1980   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2ef8:	b8 82       	st	Y, r11
			node();
			break;
		  
	case 6:
		  velocity(255,255);
		  forward();
    2efa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		  delay(280);
    2efe:	68 e1       	ldi	r22, 0x18	; 24
    2f00:	71 e0       	ldi	r23, 0x01	; 1
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  right();
    2f0a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
		  delay(350);
    2f0e:	6e e5       	ldi	r22, 0x5E	; 94
    2f10:	71 e0       	ldi	r23, 0x01	; 1
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  while(ADC_Conversion(2) < 0x96);
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2f20:	86 39       	cpi	r24, 0x96	; 150
    2f22:	d8 f3       	brcs	.-10     	; 0x2f1a <followpath+0x3b6>
		  stop();
    2f24:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
		  delay(1000);
    2f28:	68 ee       	ldi	r22, 0xE8	; 232
    2f2a:	73 e0       	ldi	r23, 0x03	; 3
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  node();
		  break;
    2f34:	bd c3       	rjmp	.+1914   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2f36:	f7 01       	movw	r30, r14
    2f38:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2f3a:	b8 82       	st	Y, r11
		  node();
		  break;
		  
	case 7:
		   velocity(255,255);
		   forward();
    2f3c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		   delay(300);
    2f40:	6c e2       	ldi	r22, 0x2C	; 44
    2f42:	71 e0       	ldi	r23, 0x01	; 1
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		   stop();
    2f4c:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
		   //delay(500);
		   node();
		   break;
    2f50:	af c3       	rjmp	.+1886   	; 0x36b0 <followpath+0xb4c>
		  
	case 8:
		  
		   right();
    2f52:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2f56:	f7 01       	movw	r30, r14
    2f58:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2f5a:	b8 82       	st	Y, r11
		  
	case 8:
		  
		   right();
		    velocity(255,255);
		   delay(600);
    2f5c:	68 e5       	ldi	r22, 0x58	; 88
    2f5e:	72 e0       	ldi	r23, 0x02	; 2
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		   while(ADC_Conversion(2) < 0x96);
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2f6e:	86 39       	cpi	r24, 0x96	; 150
    2f70:	d8 f3       	brcs	.-10     	; 0x2f68 <followpath+0x404>
		   stop();
    2f72:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
		   delay(100);
    2f76:	64 e6       	ldi	r22, 0x64	; 100
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		   node();
		   node();
		   break;
    2f82:	96 c3       	rjmp	.+1836   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2f84:	f7 01       	movw	r30, r14
    2f86:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    2f88:	b8 82       	st	Y, r11
		   node();
		   break;
		  
	case 9:
		   velocity(255,255);
		    right();
    2f8a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
			delay(1700);
    2f8e:	64 ea       	ldi	r22, 0xA4	; 164
    2f90:	76 e0       	ldi	r23, 0x06	; 6
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		   while(ADC_Conversion(2) < 0x96);
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    2fa0:	86 39       	cpi	r24, 0x96	; 150
    2fa2:	d8 f3       	brcs	.-10     	; 0x2f9a <followpath+0x436>
		   //stop();
		   //delay(150);
		   
		   blackline_data();
    2fa4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		   blackline();
    2fa8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2fac:	17 c0       	rjmp	.+46     	; 0x2fdc <followpath+0x478>
		     {delay(50);
    2fae:	62 e3       	ldi	r22, 0x32	; 50
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <followpath+0x460>
			     {
				     //obstacle = check_obstacle();
				     blackline_data();
    2fbc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				     blackline();
    2fc0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		   
		   blackline_data();
		   blackline();
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		     {delay(50);
			     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2fc4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2fc8:	87 39       	cpi	r24, 0x97	; 151
    2fca:	20 f4       	brcc	.+8      	; 0x2fd4 <followpath+0x470>
    2fcc:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2fd0:	87 39       	cpi	r24, 0x97	; 151
    2fd2:	a0 f3       	brcs	.-24     	; 0x2fbc <followpath+0x458>
    2fd4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    2fd8:	87 39       	cpi	r24, 0x97	; 151
    2fda:	80 f3       	brcs	.-32     	; 0x2fbc <followpath+0x458>
		   //stop();
		   //delay(150);
		   
		   blackline_data();
		   blackline();
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    2fdc:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    2fe0:	87 39       	cpi	r24, 0x97	; 151
    2fe2:	08 f0       	brcs	.+2      	; 0x2fe6 <followpath+0x482>
    2fe4:	9b c3       	rjmp	.+1846   	; 0x371c <followpath+0xbb8>
    2fe6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    2fea:	87 39       	cpi	r24, 0x97	; 151
    2fec:	08 f0       	brcs	.+2      	; 0x2ff0 <followpath+0x48c>
    2fee:	9c c3       	rjmp	.+1848   	; 0x3728 <followpath+0xbc4>
    2ff0:	de cf       	rjmp	.-68     	; 0x2fae <followpath+0x44a>
				     blackline_data();
				     blackline();
			     }
		     }
		   node();
		   delay(50);
    2ff2:	62 e3       	ldi	r22, 0x32	; 50
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		   //stop();
		   //delay(150);
		   break;
    2ffe:	58 c3       	rjmp	.+1712   	; 0x36b0 <followpath+0xb4c>
		   
		case 10:						//lf
		   
		   blackline_data();
    3000:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		   blackline_lifting();
    3004:	0e 94 a2 0a 	call	0x1544	; 0x1544 <blackline_lifting>
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3008:	17 c0       	rjmp	.+46     	; 0x3038 <followpath+0x4d4>
		     {delay(50);
    300a:	62 e3       	ldi	r22, 0x32	; 50
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <followpath+0x4bc>
			     {
				     //obstacle = check_obstacle();
				     blackline_data();
    3018:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				     blackline();
    301c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		   
		   blackline_data();
		   blackline_lifting();
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		     {delay(50);
			     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3020:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3024:	87 39       	cpi	r24, 0x97	; 151
    3026:	20 f4       	brcc	.+8      	; 0x3030 <followpath+0x4cc>
    3028:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    302c:	87 39       	cpi	r24, 0x97	; 151
    302e:	a0 f3       	brcs	.-24     	; 0x3018 <followpath+0x4b4>
    3030:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3034:	87 39       	cpi	r24, 0x97	; 151
    3036:	80 f3       	brcs	.-32     	; 0x3018 <followpath+0x4b4>
		   
		case 10:						//lf
		   
		   blackline_data();
		   blackline_lifting();
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3038:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    303c:	87 39       	cpi	r24, 0x97	; 151
    303e:	08 f0       	brcs	.+2      	; 0x3042 <followpath+0x4de>
    3040:	79 c3       	rjmp	.+1778   	; 0x3734 <followpath+0xbd0>
    3042:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3046:	87 39       	cpi	r24, 0x97	; 151
    3048:	08 f0       	brcs	.+2      	; 0x304c <followpath+0x4e8>
    304a:	7a c3       	rjmp	.+1780   	; 0x3740 <followpath+0xbdc>
    304c:	de cf       	rjmp	.-68     	; 0x300a <followpath+0x4a6>
				     //obstacle = check_obstacle();
				     blackline_data();
				     blackline();
			     }
		     }
			delay(30);
    304e:	6e e1       	ldi	r22, 0x1E	; 30
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    305a:	f7 01       	movw	r30, r14
    305c:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    305e:	a8 82       	st	Y, r10
				     blackline();
			     }
		     }
			delay(30);
		     velocity(150,150);
		     forward();
    3060:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		     delay(200);
    3064:	68 ec       	ldi	r22, 0xC8	; 200
    3066:	70 e0       	ldi	r23, 0x00	; 0
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  	    blackline_data();
    3070:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		      while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3074:	17 c0       	rjmp	.+46     	; 0x30a4 <followpath+0x540>
		      {delay(50);
    3076:	62 e3       	ldi	r22, 0x32	; 50
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			      while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3082:	04 c0       	rjmp	.+8      	; 0x308c <followpath+0x528>
			      {
				      //obstacle = check_obstacle();
				      blackline_data();
    3084:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				      blackline();
    3088:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		     forward();
		     delay(200);
		  	    blackline_data();
		      while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		      {delay(50);
			      while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    308c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3090:	87 39       	cpi	r24, 0x97	; 151
    3092:	20 f4       	brcc	.+8      	; 0x309c <followpath+0x538>
    3094:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3098:	87 39       	cpi	r24, 0x97	; 151
    309a:	a0 f3       	brcs	.-24     	; 0x3084 <followpath+0x520>
    309c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    30a0:	87 39       	cpi	r24, 0x97	; 151
    30a2:	80 f3       	brcs	.-32     	; 0x3084 <followpath+0x520>
			delay(30);
		     velocity(150,150);
		     forward();
		     delay(200);
		  	    blackline_data();
		      while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    30a4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    30a8:	87 39       	cpi	r24, 0x97	; 151
    30aa:	08 f0       	brcs	.+2      	; 0x30ae <followpath+0x54a>
    30ac:	4f c3       	rjmp	.+1694   	; 0x374c <followpath+0xbe8>
    30ae:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    30b2:	87 39       	cpi	r24, 0x97	; 151
    30b4:	08 f0       	brcs	.+2      	; 0x30b8 <followpath+0x554>
    30b6:	50 c3       	rjmp	.+1696   	; 0x3758 <followpath+0xbf4>
    30b8:	de cf       	rjmp	.-68     	; 0x3076 <followpath+0x512>
				      blackline_data();
				      blackline();
			      }
		      }
			node();
			delay(30);
    30ba:	6e e1       	ldi	r22, 0x1E	; 30
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
					
		   break;
    30c6:	f4 c2       	rjmp	.+1512   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    30c8:	f7 01       	movw	r30, r14
    30ca:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    30cc:	b8 82       	st	Y, r11
		   break;
		   
	 case 11:					
								//ll
			   velocity(255,255);
			   forward();
    30ce:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			   delay(280);
    30d2:	68 e1       	ldi	r22, 0x18	; 24
    30d4:	71 e0       	ldi	r23, 0x01	; 1
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			   left();
    30de:	0e 94 69 02 	call	0x4d2	; 0x4d2 <left>
			   delay(500);
    30e2:	64 ef       	ldi	r22, 0xF4	; 244
    30e4:	71 e0       	ldi	r23, 0x01	; 1
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			   while(ADC_Conversion(1) < 0x96);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    30f4:	86 39       	cpi	r24, 0x96	; 150
    30f6:	d8 f3       	brcs	.-10     	; 0x30ee <followpath+0x58a>
			  blackline_data();
    30f8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    30fc:	17 c0       	rjmp	.+46     	; 0x312c <followpath+0x5c8>
			    {delay(50);
    30fe:	62 e3       	ldi	r22, 0x32	; 50
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    310a:	04 c0       	rjmp	.+8      	; 0x3114 <followpath+0x5b0>
				    {
					    //obstacle = check_obstacle();
					    blackline_data();
    310c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					    blackline();
    3110:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			   delay(500);
			   while(ADC_Conversion(1) < 0x96);
			  blackline_data();
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			    {delay(50);
				    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3114:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3118:	87 39       	cpi	r24, 0x97	; 151
    311a:	20 f4       	brcc	.+8      	; 0x3124 <followpath+0x5c0>
    311c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3120:	87 39       	cpi	r24, 0x97	; 151
    3122:	a0 f3       	brcs	.-24     	; 0x310c <followpath+0x5a8>
    3124:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3128:	87 39       	cpi	r24, 0x97	; 151
    312a:	80 f3       	brcs	.-32     	; 0x310c <followpath+0x5a8>
			   delay(280);
			   left();
			   delay(500);
			   while(ADC_Conversion(1) < 0x96);
			  blackline_data();
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    312c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3130:	87 39       	cpi	r24, 0x97	; 151
    3132:	08 f0       	brcs	.+2      	; 0x3136 <followpath+0x5d2>
    3134:	17 c3       	rjmp	.+1582   	; 0x3764 <followpath+0xc00>
    3136:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    313a:	87 39       	cpi	r24, 0x97	; 151
    313c:	08 f0       	brcs	.+2      	; 0x3140 <followpath+0x5dc>
    313e:	18 c3       	rjmp	.+1584   	; 0x3770 <followpath+0xc0c>
    3140:	de cf       	rjmp	.-68     	; 0x30fe <followpath+0x59a>
					    blackline_data();
					    blackline();
				    }
			    }
			  node();
			  delay(30);
    3142:	6e e1       	ldi	r22, 0x1E	; 30
    3144:	70 e0       	ldi	r23, 0x00	; 0
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    314e:	f7 01       	movw	r30, r14
    3150:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    3152:	a8 82       	st	Y, r10
				    }
			    }
			  node();
			  delay(30);
			  velocity(150,150);
			  forward();
    3154:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			  delay(100);
    3158:	64 e6       	ldi	r22, 0x64	; 100
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			  stop();
    3164:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
			  delay(5000);
    3168:	68 e8       	ldi	r22, 0x88	; 136
    316a:	73 e1       	ldi	r23, 0x13	; 19
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			 // DDRK = 0x00;
			
		   break;
    3174:	9d c2       	rjmp	.+1338   	; 0x36b0 <followpath+0xb4c>
		  		  
		  
	case 12 :
		 
		  right();
    3176:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
		  delay(500);
    317a:	64 ef       	ldi	r22, 0xF4	; 244
    317c:	71 e0       	ldi	r23, 0x01	; 1
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  while(ADC_Conversion(2) < 0x96);
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    318c:	86 39       	cpi	r24, 0x96	; 150
    318e:	d8 f3       	brcs	.-10     	; 0x3186 <followpath+0x622>
		  //stop();
		  //delay(100);
		  blackline_data();
    3190:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3194:	17 c0       	rjmp	.+46     	; 0x31c4 <followpath+0x660>
		    {delay(50);
    3196:	62 e3       	ldi	r22, 0x32	; 50
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    31a2:	04 c0       	rjmp	.+8      	; 0x31ac <followpath+0x648>
			    {
				    //obstacle = check_obstacle();
				    blackline_data();
    31a4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				    blackline();
    31a8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		    {delay(50);
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    31ac:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    31b0:	87 39       	cpi	r24, 0x97	; 151
    31b2:	20 f4       	brcc	.+8      	; 0x31bc <followpath+0x658>
    31b4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    31b8:	87 39       	cpi	r24, 0x97	; 151
    31ba:	a0 f3       	brcs	.-24     	; 0x31a4 <followpath+0x640>
    31bc:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    31c0:	87 39       	cpi	r24, 0x97	; 151
    31c2:	80 f3       	brcs	.-32     	; 0x31a4 <followpath+0x640>
		  delay(500);
		  while(ADC_Conversion(2) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    31c4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    31c8:	87 39       	cpi	r24, 0x97	; 151
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <followpath+0x66a>
    31cc:	d7 c2       	rjmp	.+1454   	; 0x377c <followpath+0xc18>
    31ce:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    31d2:	87 39       	cpi	r24, 0x97	; 151
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <followpath+0x674>
    31d6:	d8 c2       	rjmp	.+1456   	; 0x3788 <followpath+0xc24>
    31d8:	de cf       	rjmp	.-68     	; 0x3196 <followpath+0x632>
				    blackline_data();
				    blackline();
			    }
		    }
		  node();
		  delay(50);
    31da:	62 e3       	ldi	r22, 0x32	; 50
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  //stop();
		  //delay(150);
		  break;
    31e6:	64 c2       	rjmp	.+1224   	; 0x36b0 <followpath+0xb4c>
		  
	case 13:
		  
		  left();
    31e8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <left>
		  delay(500);
    31ec:	64 ef       	ldi	r22, 0xF4	; 244
    31ee:	71 e0       	ldi	r23, 0x01	; 1
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  while(ADC_Conversion(2) < 0x96);
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    31fe:	86 39       	cpi	r24, 0x96	; 150
    3200:	d8 f3       	brcs	.-10     	; 0x31f8 <followpath+0x694>
		  //stop();
		  //delay(100);
		  blackline_data();
    3202:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3206:	17 c0       	rjmp	.+46     	; 0x3236 <followpath+0x6d2>
		    {delay(50);
    3208:	62 e3       	ldi	r22, 0x32	; 50
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3214:	04 c0       	rjmp	.+8      	; 0x321e <followpath+0x6ba>
			    {
				    //obstacle = check_obstacle();
				    blackline_data();
    3216:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				    blackline();
    321a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		    {delay(50);
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    321e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3222:	87 39       	cpi	r24, 0x97	; 151
    3224:	20 f4       	brcc	.+8      	; 0x322e <followpath+0x6ca>
    3226:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    322a:	87 39       	cpi	r24, 0x97	; 151
    322c:	a0 f3       	brcs	.-24     	; 0x3216 <followpath+0x6b2>
    322e:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3232:	87 39       	cpi	r24, 0x97	; 151
    3234:	80 f3       	brcs	.-32     	; 0x3216 <followpath+0x6b2>
		  delay(500);
		  while(ADC_Conversion(2) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3236:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    323a:	87 39       	cpi	r24, 0x97	; 151
    323c:	08 f0       	brcs	.+2      	; 0x3240 <followpath+0x6dc>
    323e:	aa c2       	rjmp	.+1364   	; 0x3794 <followpath+0xc30>
    3240:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3244:	87 39       	cpi	r24, 0x97	; 151
    3246:	08 f0       	brcs	.+2      	; 0x324a <followpath+0x6e6>
    3248:	ab c2       	rjmp	.+1366   	; 0x37a0 <followpath+0xc3c>
    324a:	de cf       	rjmp	.-68     	; 0x3208 <followpath+0x6a4>
				    blackline_data();
				    blackline();
			    }
		    }
		  node();
		 delay(50);
    324c:	62 e3       	ldi	r22, 0x32	; 50
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  //stop();
		  //delay(150);
		  break;
    3258:	2b c2       	rjmp	.+1110   	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    325a:	f7 01       	movw	r30, r14
    325c:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    325e:	a8 82       	st	Y, r10
		  //delay(150);
		  break;

	case 14:
			velocity(150,150);
			forward();
    3260:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(700);
    3264:	6c eb       	ldi	r22, 0xBC	; 188
    3266:	72 e0       	ldi	r23, 0x02	; 2
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			left();
    3270:	0e 94 69 02 	call	0x4d2	; 0x4d2 <left>
			delay(100);
    3274:	64 e6       	ldi	r22, 0x64	; 100
    3276:	70 e0       	ldi	r23, 0x00	; 0
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			while(ADC_Conversion(2) < 0x96);
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    3286:	86 39       	cpi	r24, 0x96	; 150
    3288:	d8 f3       	brcs	.-10     	; 0x3280 <followpath+0x71c>
			stop();
    328a:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
			delay(50);
    328e:	62 e3       	ldi	r22, 0x32	; 50
    3290:	70 e0       	ldi	r23, 0x00	; 0
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			blackline_data();
    329a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    329e:	17 c0       	rjmp	.+46     	; 0x32ce <followpath+0x76a>
			  {delay(50);
    32a0:	62 e3       	ldi	r22, 0x32	; 50
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    32ac:	04 c0       	rjmp	.+8      	; 0x32b6 <followpath+0x752>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    32ae:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    32b2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			stop();
			delay(50);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    32b6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    32ba:	87 39       	cpi	r24, 0x97	; 151
    32bc:	20 f4       	brcc	.+8      	; 0x32c6 <followpath+0x762>
    32be:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    32c2:	87 39       	cpi	r24, 0x97	; 151
    32c4:	a0 f3       	brcs	.-24     	; 0x32ae <followpath+0x74a>
    32c6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    32ca:	87 39       	cpi	r24, 0x97	; 151
    32cc:	80 f3       	brcs	.-32     	; 0x32ae <followpath+0x74a>
			delay(100);
			while(ADC_Conversion(2) < 0x96);
			stop();
			delay(50);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    32ce:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    32d2:	87 39       	cpi	r24, 0x97	; 151
    32d4:	08 f0       	brcs	.+2      	; 0x32d8 <followpath+0x774>
    32d6:	6a c2       	rjmp	.+1236   	; 0x37ac <followpath+0xc48>
    32d8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    32dc:	87 39       	cpi	r24, 0x97	; 151
    32de:	08 f0       	brcs	.+2      	; 0x32e2 <followpath+0x77e>
    32e0:	6b c2       	rjmp	.+1238   	; 0x37b8 <followpath+0xc54>
    32e2:	de cf       	rjmp	.-68     	; 0x32a0 <followpath+0x73c>
					  blackline_data();
					  blackline();
				  }
			  }
			node();
			stop();
    32e4:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
			delay(300);
    32e8:	6c e2       	ldi	r22, 0x2C	; 44
    32ea:	71 e0       	ldi	r23, 0x01	; 1
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			break;				  
    32f4:	dd c1       	rjmp	.+954    	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    32f6:	f7 01       	movw	r30, r14
    32f8:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    32fa:	b8 82       	st	Y, r11
			delay(300);
			break;				  

	case 15:								//lr
			velocity(255,255);
			forward();
    32fc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(280);
    3300:	68 e1       	ldi	r22, 0x18	; 24
    3302:	71 e0       	ldi	r23, 0x01	; 1
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			right();
    330c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
			delay(500);
    3310:	64 ef       	ldi	r22, 0xF4	; 244
    3312:	71 e0       	ldi	r23, 0x01	; 1
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			while(ADC_Conversion(3) < 0x96);
    331c:	83 e0       	ldi	r24, 0x03	; 3
    331e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    3322:	86 39       	cpi	r24, 0x96	; 150
    3324:	d8 f3       	brcs	.-10     	; 0x331c <followpath+0x7b8>
			blackline_data();
    3326:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    332a:	17 c0       	rjmp	.+46     	; 0x335a <followpath+0x7f6>
			  {delay(50);
    332c:	62 e3       	ldi	r22, 0x32	; 50
    332e:	70 e0       	ldi	r23, 0x00	; 0
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3338:	04 c0       	rjmp	.+8      	; 0x3342 <followpath+0x7de>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    333a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    333e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			delay(500);
			while(ADC_Conversion(3) < 0x96);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3342:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3346:	87 39       	cpi	r24, 0x97	; 151
    3348:	20 f4       	brcc	.+8      	; 0x3352 <followpath+0x7ee>
    334a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    334e:	87 39       	cpi	r24, 0x97	; 151
    3350:	a0 f3       	brcs	.-24     	; 0x333a <followpath+0x7d6>
    3352:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3356:	87 39       	cpi	r24, 0x97	; 151
    3358:	80 f3       	brcs	.-32     	; 0x333a <followpath+0x7d6>
			delay(280);
			right();
			delay(500);
			while(ADC_Conversion(3) < 0x96);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    335a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    335e:	87 39       	cpi	r24, 0x97	; 151
    3360:	08 f0       	brcs	.+2      	; 0x3364 <followpath+0x800>
    3362:	36 c2       	rjmp	.+1132   	; 0x37d0 <followpath+0xc6c>
    3364:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3368:	87 39       	cpi	r24, 0x97	; 151
    336a:	08 f0       	brcs	.+2      	; 0x336e <followpath+0x80a>
    336c:	2b c2       	rjmp	.+1110   	; 0x37c4 <followpath+0xc60>
    336e:	de cf       	rjmp	.-68     	; 0x332c <followpath+0x7c8>
					  blackline_data();
					  blackline();
				  }
			  }
			node();
			delay(30);
    3370:	6e e1       	ldi	r22, 0x1E	; 30
    3372:	70 e0       	ldi	r23, 0x00	; 0
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    337c:	f7 01       	movw	r30, r14
    337e:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    3380:	a8 82       	st	Y, r10
				  }
			  }
			node();
			delay(30);
			velocity(150,150);
			forward();
    3382:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(100);
    3386:	64 e6       	ldi	r22, 0x64	; 100
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			stop();
    3392:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
			delay(5000);
    3396:	68 e8       	ldi	r22, 0x88	; 136
    3398:	73 e1       	ldi	r23, 0x13	; 19
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>


			break;
    33a2:	86 c1       	rjmp	.+780    	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    33a4:	f7 01       	movw	r30, r14
    33a6:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    33a8:	b8 82       	st	Y, r11

			break;

	case 16:								//lr1
			velocity(255,255);
			forward();
    33aa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(280);
    33ae:	68 e1       	ldi	r22, 0x18	; 24
    33b0:	71 e0       	ldi	r23, 0x01	; 1
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			blackline_data();
    33ba:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    33be:	17 c0       	rjmp	.+46     	; 0x33ee <followpath+0x88a>
			  {delay(50);
    33c0:	62 e3       	ldi	r22, 0x32	; 50
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    33cc:	04 c0       	rjmp	.+8      	; 0x33d6 <followpath+0x872>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    33ce:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    33d2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			forward();
			delay(280);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    33d6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    33da:	87 39       	cpi	r24, 0x97	; 151
    33dc:	20 f4       	brcc	.+8      	; 0x33e6 <followpath+0x882>
    33de:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    33e2:	87 39       	cpi	r24, 0x97	; 151
    33e4:	a0 f3       	brcs	.-24     	; 0x33ce <followpath+0x86a>
    33e6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    33ea:	87 39       	cpi	r24, 0x97	; 151
    33ec:	80 f3       	brcs	.-32     	; 0x33ce <followpath+0x86a>
	case 16:								//lr1
			velocity(255,255);
			forward();
			delay(280);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    33ee:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    33f2:	87 39       	cpi	r24, 0x97	; 151
    33f4:	08 f0       	brcs	.+2      	; 0x33f8 <followpath+0x894>
    33f6:	f2 c1       	rjmp	.+996    	; 0x37dc <followpath+0xc78>
    33f8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    33fc:	87 39       	cpi	r24, 0x97	; 151
    33fe:	08 f0       	brcs	.+2      	; 0x3402 <followpath+0x89e>
    3400:	f3 c1       	rjmp	.+998    	; 0x37e8 <followpath+0xc84>
    3402:	de cf       	rjmp	.-68     	; 0x33c0 <followpath+0x85c>
					  blackline_data();
					  blackline();
				  }
			  }
			node();
			delay(30);
    3404:	6e e1       	ldi	r22, 0x1E	; 30
    3406:	70 e0       	ldi	r23, 0x00	; 0
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			forward();
    3410:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    3414:	f7 01       	movw	r30, r14
    3416:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    3418:	a8 82       	st	Y, r10
			  }
			node();
			delay(30);
			forward();
			velocity(150,150);
			blackline_data();
    341a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    341e:	17 c0       	rjmp	.+46     	; 0x344e <followpath+0x8ea>
			  {
				  delay(50);
    3420:	62 e3       	ldi	r22, 0x32	; 50
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	80 e0       	ldi	r24, 0x00	; 0
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    342c:	04 c0       	rjmp	.+8      	; 0x3436 <followpath+0x8d2>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    342e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    3432:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			velocity(150,150);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {
				  delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3436:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    343a:	87 39       	cpi	r24, 0x97	; 151
    343c:	20 f4       	brcc	.+8      	; 0x3446 <followpath+0x8e2>
    343e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3442:	87 39       	cpi	r24, 0x97	; 151
    3444:	a0 f3       	brcs	.-24     	; 0x342e <followpath+0x8ca>
    3446:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    344a:	87 39       	cpi	r24, 0x97	; 151
    344c:	80 f3       	brcs	.-32     	; 0x342e <followpath+0x8ca>
			node();
			delay(30);
			forward();
			velocity(150,150);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    344e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3452:	87 39       	cpi	r24, 0x97	; 151
    3454:	08 f0       	brcs	.+2      	; 0x3458 <followpath+0x8f4>
    3456:	ce c1       	rjmp	.+924    	; 0x37f4 <followpath+0xc90>
    3458:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    345c:	87 39       	cpi	r24, 0x97	; 151
    345e:	08 f0       	brcs	.+2      	; 0x3462 <followpath+0x8fe>
    3460:	cf c1       	rjmp	.+926    	; 0x3800 <followpath+0xc9c>
    3462:	de cf       	rjmp	.-68     	; 0x3420 <followpath+0x8bc>
					  blackline_data();
					  blackline();
				  }
			  }
			node();
			delay(30);
    3464:	6e e1       	ldi	r22, 0x1E	; 30
    3466:	70 e0       	ldi	r23, 0x00	; 0
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    3470:	f7 01       	movw	r30, r14
    3472:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    3474:	b8 82       	st	Y, r11
				  }
			  }
			node();
			delay(30);
			velocity(255,255);
			forward();
    3476:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(280);
    347a:	68 e1       	ldi	r22, 0x18	; 24
    347c:	71 e0       	ldi	r23, 0x01	; 1
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			right();
    3486:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
			while (ADC_Conversion(3) < 0x96);
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    3490:	86 39       	cpi	r24, 0x96	; 150
    3492:	d8 f3       	brcs	.-10     	; 0x348a <followpath+0x926>
			blackline_data();
    3494:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3498:	17 c0       	rjmp	.+46     	; 0x34c8 <followpath+0x964>
			  {delay(50);
    349a:	62 e3       	ldi	r22, 0x32	; 50
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    34a6:	04 c0       	rjmp	.+8      	; 0x34b0 <followpath+0x94c>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    34a8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    34ac:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			right();
			while (ADC_Conversion(3) < 0x96);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    34b0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    34b4:	87 39       	cpi	r24, 0x97	; 151
    34b6:	20 f4       	brcc	.+8      	; 0x34c0 <followpath+0x95c>
    34b8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    34bc:	87 39       	cpi	r24, 0x97	; 151
    34be:	a0 f3       	brcs	.-24     	; 0x34a8 <followpath+0x944>
    34c0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    34c4:	87 39       	cpi	r24, 0x97	; 151
    34c6:	80 f3       	brcs	.-32     	; 0x34a8 <followpath+0x944>
			forward();
			delay(280);
			right();
			while (ADC_Conversion(3) < 0x96);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    34c8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    34cc:	87 39       	cpi	r24, 0x97	; 151
    34ce:	08 f0       	brcs	.+2      	; 0x34d2 <followpath+0x96e>
    34d0:	9d c1       	rjmp	.+826    	; 0x380c <followpath+0xca8>
    34d2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    34d6:	87 39       	cpi	r24, 0x97	; 151
    34d8:	08 f0       	brcs	.+2      	; 0x34dc <followpath+0x978>
    34da:	9e c1       	rjmp	.+828    	; 0x3818 <followpath+0xcb4>
    34dc:	de cf       	rjmp	.-68     	; 0x349a <followpath+0x936>
					  blackline_data();
					  blackline();
				  }
			  }
			node();
			delay(30);
    34de:	6e e1       	ldi	r22, 0x1E	; 30
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>

			break;
    34ea:	e2 c0       	rjmp	.+452    	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    34ec:	f7 01       	movw	r30, r14
    34ee:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    34f0:	a8 82       	st	Y, r10
			break;

		  
	case 17:								//ll1
		  velocity(150,150);
		  forward();
    34f2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
		  delay(400);
    34f6:	60 e9       	ldi	r22, 0x90	; 144
    34f8:	71 e0       	ldi	r23, 0x01	; 1
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  left();
    3502:	0e 94 69 02 	call	0x4d2	; 0x4d2 <left>
		  delay(300);
    3506:	6c e2       	ldi	r22, 0x2C	; 44
    3508:	71 e0       	ldi	r23, 0x01	; 1
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  while (ADC_Conversion(1) < 0x96);
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    3518:	86 39       	cpi	r24, 0x96	; 150
    351a:	d8 f3       	brcs	.-10     	; 0x3512 <followpath+0x9ae>
		  blackline_data();
    351c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3520:	17 c0       	rjmp	.+46     	; 0x3550 <followpath+0x9ec>
		    {delay(50);
    3522:	62 e3       	ldi	r22, 0x32	; 50
    3524:	70 e0       	ldi	r23, 0x00	; 0
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    352e:	04 c0       	rjmp	.+8      	; 0x3538 <followpath+0x9d4>
			    {
				    //obstacle = check_obstacle();
				    blackline_data();
    3530:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
				    blackline();
    3534:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
		  delay(300);
		  while (ADC_Conversion(1) < 0x96);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
		    {delay(50);
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3538:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    353c:	87 39       	cpi	r24, 0x97	; 151
    353e:	20 f4       	brcc	.+8      	; 0x3548 <followpath+0x9e4>
    3540:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3544:	87 39       	cpi	r24, 0x97	; 151
    3546:	a0 f3       	brcs	.-24     	; 0x3530 <followpath+0x9cc>
    3548:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    354c:	87 39       	cpi	r24, 0x97	; 151
    354e:	80 f3       	brcs	.-32     	; 0x3530 <followpath+0x9cc>
		  delay(400);
		  left();
		  delay(300);
		  while (ADC_Conversion(1) < 0x96);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3550:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3554:	87 39       	cpi	r24, 0x97	; 151
    3556:	08 f0       	brcs	.+2      	; 0x355a <followpath+0x9f6>
    3558:	6b c1       	rjmp	.+726    	; 0x3830 <followpath+0xccc>
    355a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    355e:	87 39       	cpi	r24, 0x97	; 151
    3560:	08 f0       	brcs	.+2      	; 0x3564 <followpath+0xa00>
    3562:	60 c1       	rjmp	.+704    	; 0x3824 <followpath+0xcc0>
    3564:	de cf       	rjmp	.-68     	; 0x3522 <followpath+0x9be>
				    blackline_data();
				    blackline();
			    }
		    }
					  node();
		  delay(30);
    3566:	6e e1       	ldi	r22, 0x1E	; 30
    3568:	70 e0       	ldi	r23, 0x00	; 0
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
		  
		  break;
    3572:	9e c0       	rjmp	.+316    	; 0x36b0 <followpath+0xb4c>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    3574:	f7 01       	movw	r30, r14
    3576:	b0 82       	st	Z, r11
	OCR5BL = (unsigned char)right_motor;
    3578:	b8 82       	st	Y, r11
		  break;
		  
		  
	case 18:								//lr
			velocity(255,255);
			forward();
    357a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(280);
    357e:	68 e1       	ldi	r22, 0x18	; 24
    3580:	71 e0       	ldi	r23, 0x01	; 1
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			right();
    358a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <right>
			delay(500);
    358e:	64 ef       	ldi	r22, 0xF4	; 244
    3590:	71 e0       	ldi	r23, 0x01	; 1
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			while(ADC_Conversion(3) < 0x96);
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Conversion>
    35a0:	86 39       	cpi	r24, 0x96	; 150
    35a2:	d8 f3       	brcs	.-10     	; 0x359a <followpath+0xa36>
			//stop();
			//delay(100);
			blackline_data();
    35a4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    35a8:	17 c0       	rjmp	.+46     	; 0x35d8 <followpath+0xa74>
			  {delay(50);
    35aa:	62 e3       	ldi	r22, 0x32	; 50
    35ac:	70 e0       	ldi	r23, 0x00	; 0
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    35b6:	04 c0       	rjmp	.+8      	; 0x35c0 <followpath+0xa5c>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    35b8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    35bc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			//stop();
			//delay(100);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    35c0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    35c4:	87 39       	cpi	r24, 0x97	; 151
    35c6:	20 f4       	brcc	.+8      	; 0x35d0 <followpath+0xa6c>
    35c8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    35cc:	87 39       	cpi	r24, 0x97	; 151
    35ce:	a0 f3       	brcs	.-24     	; 0x35b8 <followpath+0xa54>
    35d0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    35d4:	87 39       	cpi	r24, 0x97	; 151
    35d6:	80 f3       	brcs	.-32     	; 0x35b8 <followpath+0xa54>
			delay(500);
			while(ADC_Conversion(3) < 0x96);
			//stop();
			//delay(100);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    35d8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    35dc:	87 39       	cpi	r24, 0x97	; 151
    35de:	08 f0       	brcs	.+2      	; 0x35e2 <followpath+0xa7e>
    35e0:	2d c1       	rjmp	.+602    	; 0x383c <followpath+0xcd8>
    35e2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    35e6:	87 39       	cpi	r24, 0x97	; 151
    35e8:	08 f0       	brcs	.+2      	; 0x35ec <followpath+0xa88>
    35ea:	2e c1       	rjmp	.+604    	; 0x3848 <followpath+0xce4>
    35ec:	de cf       	rjmp	.-68     	; 0x35aa <followpath+0xa46>
					  //obstacle = check_obstacle();
					  blackline_data();
					  blackline();
				  }
			  }			//node();
			delay(30);
    35ee:	6e e1       	ldi	r22, 0x1E	; 30
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			forward();
    35fa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    35fe:	f7 01       	movw	r30, r14
    3600:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    3602:	a8 82       	st	Y, r10
				  }
			  }			//node();
			delay(30);
			forward();
			velocity(150,150);
			delay(200);
    3604:	68 ec       	ldi	r22, 0xC8	; 200
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			blackline_data();
    3610:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3614:	17 c0       	rjmp	.+46     	; 0x3644 <followpath+0xae0>
			  {delay(50);
    3616:	62 e3       	ldi	r22, 0x32	; 50
    3618:	70 e0       	ldi	r23, 0x00	; 0
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3622:	04 c0       	rjmp	.+8      	; 0x362c <followpath+0xac8>
				  {
					  //obstacle = check_obstacle();
					  blackline_data();
    3624:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <blackline_data>
					  blackline();
    3628:	0e 94 f5 02 	call	0x5ea	; 0x5ea <blackline>
			velocity(150,150);
			delay(200);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
			  {delay(50);
				  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    362c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3630:	87 39       	cpi	r24, 0x97	; 151
    3632:	20 f4       	brcc	.+8      	; 0x363c <followpath+0xad8>
    3634:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3638:	87 39       	cpi	r24, 0x97	; 151
    363a:	a0 f3       	brcs	.-24     	; 0x3624 <followpath+0xac0>
    363c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3640:	87 39       	cpi	r24, 0x97	; 151
    3642:	80 f3       	brcs	.-32     	; 0x3624 <followpath+0xac0>
			delay(30);
			forward();
			velocity(150,150);
			delay(200);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3644:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <Left_white_line>
    3648:	87 39       	cpi	r24, 0x97	; 151
    364a:	08 f0       	brcs	.+2      	; 0x364e <followpath+0xaea>
    364c:	09 c1       	rjmp	.+530    	; 0x3860 <followpath+0xcfc>
    364e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Right_white_line>
    3652:	87 39       	cpi	r24, 0x97	; 151
    3654:	08 f0       	brcs	.+2      	; 0x3658 <followpath+0xaf4>
    3656:	fe c0       	rjmp	.+508    	; 0x3854 <followpath+0xcf0>
    3658:	de cf       	rjmp	.-68     	; 0x3616 <followpath+0xab2>
					  blackline_data();
					  blackline();
				  }
			  }
			node();
			delay(30);
    365a:	6e e1       	ldi	r22, 0x1E	; 30
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=96)
}
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    3666:	f7 01       	movw	r30, r14
    3668:	a0 82       	st	Z, r10
	OCR5BL = (unsigned char)right_motor;
    366a:	a8 82       	st	Y, r10
				  }
			  }
			node();
			delay(30);
			velocity(150,150);
			forward();
    366c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <forward>
			delay(100);
    3670:	64 e6       	ldi	r22, 0x64	; 100
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
			stop();
    367c:	0e 94 66 02 	call	0x4cc	; 0x4cc <stop>
			delay(5000);
    3680:	68 e8       	ldi	r22, 0x88	; 136
    3682:	73 e1       	ldi	r23, 0x13	; 19
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>


			break;
    368c:	11 c0       	rjmp	.+34     	; 0x36b0 <followpath+0xb4c>

		  
default:
		
		  lcd_cursor(1,1);
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
		  lcd_string("break");
    3696:	83 e6       	ldi	r24, 0x63	; 99
    3698:	92 e0       	ldi	r25, 0x02	; 2
    369a:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_string>
		  printf ("%d\t", 0);
    369e:	1f 92       	push	r1
    36a0:	1f 92       	push	r1
    36a2:	df 92       	push	r13
    36a4:	cf 92       	push	r12
    36a6:	48 d7       	rcall	.+3728   	; 0x4538 <printf>
		  break;
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
	     pass[5]);
  find_size_of_path ();
  check_path ();
  find_size_of_bot ();

  for (bot_index = 0; bot_index < sizebot; bot_index++)
    36b0:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
    36b4:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x1>
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <__data_end+0x1>
    36be:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <__data_end>
    36c2:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <sizebot>
    36c6:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <sizebot+0x1>
    36ca:	82 17       	cp	r24, r18
    36cc:	93 07       	cpc	r25, r19
    36ce:	0c f4       	brge	.+2      	; 0x36d2 <followpath+0xb6e>
    36d0:	92 ca       	rjmp	.-2780   	; 0x2bf6 <followpath+0x92>
    36d2:	cc c0       	rjmp	.+408    	; 0x386c <followpath+0xd08>
		   //velocity(150,150);
		   //forward();
		   //delay(500);
		  blackline_data();
		  blackline();
		  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    36d4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    36d8:	87 39       	cpi	r24, 0x97	; 151
    36da:	08 f4       	brcc	.+2      	; 0x36de <followpath+0xb7a>
    36dc:	12 cb       	rjmp	.-2524   	; 0x2d02 <followpath+0x19e>
    36de:	33 cb       	rjmp	.-2458   	; 0x2d46 <followpath+0x1e2>
    36e0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    36e4:	87 39       	cpi	r24, 0x97	; 151
    36e6:	08 f4       	brcc	.+2      	; 0x36ea <followpath+0xb86>
    36e8:	0c cb       	rjmp	.-2536   	; 0x2d02 <followpath+0x19e>
    36ea:	2d cb       	rjmp	.-2470   	; 0x2d46 <followpath+0x1e2>
		  delay(500);
		  while(ADC_Conversion(1) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    36ec:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    36f0:	87 39       	cpi	r24, 0x97	; 151
    36f2:	08 f4       	brcc	.+2      	; 0x36f6 <followpath+0xb92>
    36f4:	55 cb       	rjmp	.-2390   	; 0x2da0 <followpath+0x23c>
    36f6:	76 cb       	rjmp	.-2324   	; 0x2de4 <followpath+0x280>
    36f8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    36fc:	87 39       	cpi	r24, 0x97	; 151
    36fe:	08 f4       	brcc	.+2      	; 0x3702 <followpath+0xb9e>
    3700:	4f cb       	rjmp	.-2402   	; 0x2da0 <followpath+0x23c>
    3702:	70 cb       	rjmp	.-2336   	; 0x2de4 <followpath+0x280>
		  delay(500);
		  while(ADC_Conversion(2) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3704:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3708:	87 39       	cpi	r24, 0x97	; 151
    370a:	08 f4       	brcc	.+2      	; 0x370e <followpath+0xbaa>
    370c:	8d cb       	rjmp	.-2278   	; 0x2e28 <followpath+0x2c4>
    370e:	ae cb       	rjmp	.-2212   	; 0x2e6c <followpath+0x308>
    3710:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3714:	87 39       	cpi	r24, 0x97	; 151
    3716:	08 f4       	brcc	.+2      	; 0x371a <followpath+0xbb6>
    3718:	87 cb       	rjmp	.-2290   	; 0x2e28 <followpath+0x2c4>
    371a:	a8 cb       	rjmp	.-2224   	; 0x2e6c <followpath+0x308>
		   //stop();
		   //delay(150);
		   
		   blackline_data();
		   blackline();
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    371c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3720:	87 39       	cpi	r24, 0x97	; 151
    3722:	08 f4       	brcc	.+2      	; 0x3726 <followpath+0xbc2>
    3724:	44 cc       	rjmp	.-1912   	; 0x2fae <followpath+0x44a>
    3726:	65 cc       	rjmp	.-1846   	; 0x2ff2 <followpath+0x48e>
    3728:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    372c:	87 39       	cpi	r24, 0x97	; 151
    372e:	08 f4       	brcc	.+2      	; 0x3732 <followpath+0xbce>
    3730:	3e cc       	rjmp	.-1924   	; 0x2fae <followpath+0x44a>
    3732:	5f cc       	rjmp	.-1858   	; 0x2ff2 <followpath+0x48e>
		   
		case 10:						//lf
		   
		   blackline_data();
		   blackline_lifting();
		     while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3734:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3738:	87 39       	cpi	r24, 0x97	; 151
    373a:	08 f4       	brcc	.+2      	; 0x373e <followpath+0xbda>
    373c:	66 cc       	rjmp	.-1844   	; 0x300a <followpath+0x4a6>
    373e:	87 cc       	rjmp	.-1778   	; 0x304e <followpath+0x4ea>
    3740:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3744:	87 39       	cpi	r24, 0x97	; 151
    3746:	08 f4       	brcc	.+2      	; 0x374a <followpath+0xbe6>
    3748:	60 cc       	rjmp	.-1856   	; 0x300a <followpath+0x4a6>
    374a:	81 cc       	rjmp	.-1790   	; 0x304e <followpath+0x4ea>
			delay(30);
		     velocity(150,150);
		     forward();
		     delay(200);
		  	    blackline_data();
		      while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    374c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3750:	87 39       	cpi	r24, 0x97	; 151
    3752:	08 f4       	brcc	.+2      	; 0x3756 <followpath+0xbf2>
    3754:	90 cc       	rjmp	.-1760   	; 0x3076 <followpath+0x512>
    3756:	b1 cc       	rjmp	.-1694   	; 0x30ba <followpath+0x556>
    3758:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    375c:	87 39       	cpi	r24, 0x97	; 151
    375e:	08 f4       	brcc	.+2      	; 0x3762 <followpath+0xbfe>
    3760:	8a cc       	rjmp	.-1772   	; 0x3076 <followpath+0x512>
    3762:	ab cc       	rjmp	.-1706   	; 0x30ba <followpath+0x556>
			   delay(280);
			   left();
			   delay(500);
			   while(ADC_Conversion(1) < 0x96);
			  blackline_data();
			    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3764:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3768:	87 39       	cpi	r24, 0x97	; 151
    376a:	08 f4       	brcc	.+2      	; 0x376e <followpath+0xc0a>
    376c:	c8 cc       	rjmp	.-1648   	; 0x30fe <followpath+0x59a>
    376e:	e9 cc       	rjmp	.-1582   	; 0x3142 <followpath+0x5de>
    3770:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3774:	87 39       	cpi	r24, 0x97	; 151
    3776:	08 f4       	brcc	.+2      	; 0x377a <followpath+0xc16>
    3778:	c2 cc       	rjmp	.-1660   	; 0x30fe <followpath+0x59a>
    377a:	e3 cc       	rjmp	.-1594   	; 0x3142 <followpath+0x5de>
		  delay(500);
		  while(ADC_Conversion(2) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    377c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3780:	87 39       	cpi	r24, 0x97	; 151
    3782:	08 f4       	brcc	.+2      	; 0x3786 <followpath+0xc22>
    3784:	08 cd       	rjmp	.-1520   	; 0x3196 <followpath+0x632>
    3786:	29 cd       	rjmp	.-1454   	; 0x31da <followpath+0x676>
    3788:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    378c:	87 39       	cpi	r24, 0x97	; 151
    378e:	08 f4       	brcc	.+2      	; 0x3792 <followpath+0xc2e>
    3790:	02 cd       	rjmp	.-1532   	; 0x3196 <followpath+0x632>
    3792:	23 cd       	rjmp	.-1466   	; 0x31da <followpath+0x676>
		  delay(500);
		  while(ADC_Conversion(2) < 0x96);
		  //stop();
		  //delay(100);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3794:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3798:	87 39       	cpi	r24, 0x97	; 151
    379a:	08 f4       	brcc	.+2      	; 0x379e <followpath+0xc3a>
    379c:	35 cd       	rjmp	.-1430   	; 0x3208 <followpath+0x6a4>
    379e:	56 cd       	rjmp	.-1364   	; 0x324c <followpath+0x6e8>
    37a0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37a4:	87 39       	cpi	r24, 0x97	; 151
    37a6:	08 f4       	brcc	.+2      	; 0x37aa <followpath+0xc46>
    37a8:	2f cd       	rjmp	.-1442   	; 0x3208 <followpath+0x6a4>
    37aa:	50 cd       	rjmp	.-1376   	; 0x324c <followpath+0x6e8>
			delay(100);
			while(ADC_Conversion(2) < 0x96);
			stop();
			delay(50);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    37ac:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37b0:	87 39       	cpi	r24, 0x97	; 151
    37b2:	08 f4       	brcc	.+2      	; 0x37b6 <followpath+0xc52>
    37b4:	75 cd       	rjmp	.-1302   	; 0x32a0 <followpath+0x73c>
    37b6:	96 cd       	rjmp	.-1236   	; 0x32e4 <followpath+0x780>
    37b8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37bc:	87 39       	cpi	r24, 0x97	; 151
    37be:	08 f4       	brcc	.+2      	; 0x37c2 <followpath+0xc5e>
    37c0:	6f cd       	rjmp	.-1314   	; 0x32a0 <followpath+0x73c>
    37c2:	90 cd       	rjmp	.-1248   	; 0x32e4 <followpath+0x780>
			delay(280);
			right();
			delay(500);
			while(ADC_Conversion(3) < 0x96);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    37c4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37c8:	87 39       	cpi	r24, 0x97	; 151
    37ca:	08 f4       	brcc	.+2      	; 0x37ce <followpath+0xc6a>
    37cc:	af cd       	rjmp	.-1186   	; 0x332c <followpath+0x7c8>
    37ce:	d0 cd       	rjmp	.-1120   	; 0x3370 <followpath+0x80c>
    37d0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37d4:	87 39       	cpi	r24, 0x97	; 151
    37d6:	08 f4       	brcc	.+2      	; 0x37da <followpath+0xc76>
    37d8:	a9 cd       	rjmp	.-1198   	; 0x332c <followpath+0x7c8>
    37da:	ca cd       	rjmp	.-1132   	; 0x3370 <followpath+0x80c>
	case 16:								//lr1
			velocity(255,255);
			forward();
			delay(280);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    37dc:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37e0:	87 39       	cpi	r24, 0x97	; 151
    37e2:	08 f4       	brcc	.+2      	; 0x37e6 <followpath+0xc82>
    37e4:	ed cd       	rjmp	.-1062   	; 0x33c0 <followpath+0x85c>
    37e6:	0e ce       	rjmp	.-996    	; 0x3404 <followpath+0x8a0>
    37e8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37ec:	87 39       	cpi	r24, 0x97	; 151
    37ee:	08 f4       	brcc	.+2      	; 0x37f2 <followpath+0xc8e>
    37f0:	e7 cd       	rjmp	.-1074   	; 0x33c0 <followpath+0x85c>
    37f2:	08 ce       	rjmp	.-1008   	; 0x3404 <followpath+0x8a0>
			node();
			delay(30);
			forward();
			velocity(150,150);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    37f4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    37f8:	87 39       	cpi	r24, 0x97	; 151
    37fa:	08 f4       	brcc	.+2      	; 0x37fe <followpath+0xc9a>
    37fc:	11 ce       	rjmp	.-990    	; 0x3420 <followpath+0x8bc>
    37fe:	32 ce       	rjmp	.-924    	; 0x3464 <followpath+0x900>
    3800:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3804:	87 39       	cpi	r24, 0x97	; 151
    3806:	08 f4       	brcc	.+2      	; 0x380a <followpath+0xca6>
    3808:	0b ce       	rjmp	.-1002   	; 0x3420 <followpath+0x8bc>
    380a:	2c ce       	rjmp	.-936    	; 0x3464 <followpath+0x900>
			forward();
			delay(280);
			right();
			while (ADC_Conversion(3) < 0x96);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    380c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3810:	87 39       	cpi	r24, 0x97	; 151
    3812:	08 f4       	brcc	.+2      	; 0x3816 <followpath+0xcb2>
    3814:	42 ce       	rjmp	.-892    	; 0x349a <followpath+0x936>
    3816:	63 ce       	rjmp	.-826    	; 0x34de <followpath+0x97a>
    3818:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    381c:	87 39       	cpi	r24, 0x97	; 151
    381e:	08 f4       	brcc	.+2      	; 0x3822 <followpath+0xcbe>
    3820:	3c ce       	rjmp	.-904    	; 0x349a <followpath+0x936>
    3822:	5d ce       	rjmp	.-838    	; 0x34de <followpath+0x97a>
		  delay(400);
		  left();
		  delay(300);
		  while (ADC_Conversion(1) < 0x96);
		  blackline_data();
		    while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3824:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3828:	87 39       	cpi	r24, 0x97	; 151
    382a:	08 f4       	brcc	.+2      	; 0x382e <followpath+0xcca>
    382c:	7a ce       	rjmp	.-780    	; 0x3522 <followpath+0x9be>
    382e:	9b ce       	rjmp	.-714    	; 0x3566 <followpath+0xa02>
    3830:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3834:	87 39       	cpi	r24, 0x97	; 151
    3836:	08 f4       	brcc	.+2      	; 0x383a <followpath+0xcd6>
    3838:	74 ce       	rjmp	.-792    	; 0x3522 <followpath+0x9be>
    383a:	95 ce       	rjmp	.-726    	; 0x3566 <followpath+0xa02>
			delay(500);
			while(ADC_Conversion(3) < 0x96);
			//stop();
			//delay(100);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    383c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3840:	87 39       	cpi	r24, 0x97	; 151
    3842:	08 f4       	brcc	.+2      	; 0x3846 <followpath+0xce2>
    3844:	b2 ce       	rjmp	.-668    	; 0x35aa <followpath+0xa46>
    3846:	d3 ce       	rjmp	.-602    	; 0x35ee <followpath+0xa8a>
    3848:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    384c:	87 39       	cpi	r24, 0x97	; 151
    384e:	08 f4       	brcc	.+2      	; 0x3852 <followpath+0xcee>
    3850:	ac ce       	rjmp	.-680    	; 0x35aa <followpath+0xa46>
    3852:	cd ce       	rjmp	.-614    	; 0x35ee <followpath+0xa8a>
			delay(30);
			forward();
			velocity(150,150);
			delay(200);
			blackline_data();
			  while(1!=((Left_white_line > 0x96 && Center_white_line > 0x96) || (Right_white_line > 0x96 && Center_white_line > 0x96) || (Left_white_line > 0x96 && Center_white_line > 0x96 && Right_white_line >  0x96 )))
    3854:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3858:	87 39       	cpi	r24, 0x97	; 151
    385a:	08 f4       	brcc	.+2      	; 0x385e <followpath+0xcfa>
    385c:	dc ce       	rjmp	.-584    	; 0x3616 <followpath+0xab2>
    385e:	fd ce       	rjmp	.-518    	; 0x365a <followpath+0xaf6>
    3860:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <Center_white_line>
    3864:	87 39       	cpi	r24, 0x97	; 151
    3866:	08 f4       	brcc	.+2      	; 0x386a <followpath+0xd06>
    3868:	d6 ce       	rjmp	.-596    	; 0x3616 <followpath+0xab2>
    386a:	f7 ce       	rjmp	.-530    	; 0x365a <followpath+0xaf6>
		  break;


	  }
}
}
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	df 91       	pop	r29
    3872:	cf 91       	pop	r28
    3874:	1f 91       	pop	r17
    3876:	0f 91       	pop	r16
    3878:	ff 90       	pop	r15
    387a:	ef 90       	pop	r14
    387c:	df 90       	pop	r13
    387e:	cf 90       	pop	r12
    3880:	bf 90       	pop	r11
    3882:	af 90       	pop	r10
    3884:	9f 90       	pop	r9
    3886:	8f 90       	pop	r8
    3888:	08 95       	ret

0000388a <get_path>:
void get_path (int source, int destination)
{
  pushvarible = 0;
    388a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <pushvarible+0x1>
    388e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <pushvarible>
  destination1=destination;
    3892:	70 93 49 03 	sts	0x0349, r23	; 0x800349 <destination1+0x1>
    3896:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <destination1>
 followpath(source, destination);
    389a:	64 c9       	rjmp	.-3384   	; 0x2b64 <followpath>
    389c:	08 95       	ret

0000389e <check_one>:
*output:none
*logic:check the color of the nuts at given location and find the destination path
*
*/
void check_one(void)
{
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
  if (nuts_position[6] == 1)
    38a2:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <nuts_position+0xc>
    38a6:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <nuts_position+0xd>
    38aa:	81 30       	cpi	r24, 0x01	; 1
    38ac:	91 05       	cpc	r25, r1
    38ae:	31 f5       	brne	.+76     	; 0x38fc <check_one+0x5e>
  {
    pick();
    38b0:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[6],S3);
    38b4:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    38b8:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    38bc:	c8 e0       	ldi	r28, 0x08	; 8
    38be:	d3 e0       	ldi	r29, 0x03	; 3
    38c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    38c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    38c4:	e2 df       	rcall	.-60     	; 0x388a <get_path>
    place();
    38c6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S3,nuts_position[5]);
    38ca:	6a 85       	ldd	r22, Y+10	; 0x0a
    38cc:	7b 85       	ldd	r23, Y+11	; 0x0b
    38ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    38d2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    38d6:	d9 df       	rcall	.-78     	; 0x388a <get_path>
    S3 = deposit_zon_S2[1];
    38d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
    38dc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    38e0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    38e4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
    Redindication++;
    38e8:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    38ec:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    38f0:	01 96       	adiw	r24, 0x01	; 1
    38f2:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    38f6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    38fa:	ef c0       	rjmp	.+478    	; 0x3ada <check_one+0x23c>
  }
  /*else if (nuts_position[6] == 2)
  {
    return(0);
  }*/
  else if (nuts_position[6] == 3)
    38fc:	83 30       	cpi	r24, 0x03	; 3
    38fe:	91 05       	cpc	r25, r1
    3900:	31 f5       	brne	.+76     	; 0x394e <check_one+0xb0>
  {
    pick();
    3902:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[6],S1);
    3906:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    390a:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    390e:	c8 e0       	ldi	r28, 0x08	; 8
    3910:	d3 e0       	ldi	r29, 0x03	; 3
    3912:	8c 85       	ldd	r24, Y+12	; 0x0c
    3914:	9d 85       	ldd	r25, Y+13	; 0x0d
    3916:	b9 df       	rcall	.-142    	; 0x388a <get_path>
    
    place();
    3918:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S1,nuts_position[5]);
    391c:	6a 85       	ldd	r22, Y+10	; 0x0a
    391e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3920:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3924:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3928:	b0 df       	rcall	.-160    	; 0x388a <get_path>
    S1 = deposit_zon_S1[2];
    392a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    392e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3932:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3936:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    greenindication++;
    393a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
    393e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3942:	01 96       	adiw	r24, 0x01	; 1
    3944:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3948:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    394c:	c6 c0       	rjmp	.+396    	; 0x3ada <check_one+0x23c>
  }
  else if (nuts_position[6] == 0)
    394e:	89 2b       	or	r24, r25
    3950:	09 f0       	breq	.+2      	; 0x3954 <check_one+0xb6>
    3952:	c3 c0       	rjmp	.+390    	; 0x3ada <check_one+0x23c>
  {
    if (nuts_position[5] == 1)
    3954:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <nuts_position+0xa>
    3958:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <nuts_position+0xb>
    395c:	81 30       	cpi	r24, 0x01	; 1
    395e:	91 05       	cpc	r25, r1
    3960:	59 f5       	brne	.+86     	; 0x39b8 <check_one+0x11a>
    {
        
        get_path(nuts_position[6],nuts_position[5]);
    3962:	61 e0       	ldi	r22, 0x01	; 1
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	8f df       	rcall	.-226    	; 0x388a <get_path>
        pick();
    396c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[5],S3);
    3970:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3974:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3978:	c8 e0       	ldi	r28, 0x08	; 8
    397a:	d3 e0       	ldi	r29, 0x03	; 3
    397c:	8a 85       	ldd	r24, Y+10	; 0x0a
    397e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3980:	84 df       	rcall	.-248    	; 0x388a <get_path>
          place();
    3982:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[4]);
    3986:	68 85       	ldd	r22, Y+8	; 0x08
    3988:	79 85       	ldd	r23, Y+9	; 0x09
    398a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    398e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3992:	7b df       	rcall	.-266    	; 0x388a <get_path>
          S3 = deposit_zon_S2[1];
    3994:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
    3998:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    399c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    39a0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
          Redindication++;
    39a4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    39a8:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    39ac:	01 96       	adiw	r24, 0x01	; 1
    39ae:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    39b2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    39b6:	91 c0       	rjmp	.+290    	; 0x3ada <check_one+0x23c>
    /*else if (nuts_position[5] == 2)
    {
      return(0);

    }*/
    else if (nuts_position[5] == 3)
    39b8:	83 30       	cpi	r24, 0x03	; 3
    39ba:	91 05       	cpc	r25, r1
    {
      get_path(nuts_position[6],nuts_position[5]);
    39bc:	59 f5       	brne	.+86     	; 0x3a14 <check_one+0x176>
    39be:	63 e0       	ldi	r22, 0x03	; 3
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	61 df       	rcall	.-318    	; 0x388a <get_path>
      pick();
    39c8:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
      get_path(nuts_position[5],S1);
    39cc:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    39d0:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    39d4:	c8 e0       	ldi	r28, 0x08	; 8
    39d6:	d3 e0       	ldi	r29, 0x03	; 3
    39d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    39da:	9b 85       	ldd	r25, Y+11	; 0x0b
    39dc:	56 df       	rcall	.-340    	; 0x388a <get_path>
        place();
    39de:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
        get_path(S1,nuts_position[4]);
    39e2:	68 85       	ldd	r22, Y+8	; 0x08
    39e4:	79 85       	ldd	r23, Y+9	; 0x09
    39e6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    39ea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    39ee:	4d df       	rcall	.-358    	; 0x388a <get_path>
    39f0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
        S1 = deposit_zon_S1[2];
    39f4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    39f8:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    39fc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    3a00:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
        greenindication++;
    3a04:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3a08:	01 96       	adiw	r24, 0x01	; 1
    3a0a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3a0e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3a12:	63 c0       	rjmp	.+198    	; 0x3ada <check_one+0x23c>
    3a14:	89 2b       	or	r24, r25
    }
    else if (nuts_position[5] == 0)
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <check_one+0x17c>
    3a18:	60 c0       	rjmp	.+192    	; 0x3ada <check_one+0x23c>
    3a1a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nuts_position+0x8>
    {
      if (nuts_position[4] == 1)
    3a1e:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <nuts_position+0x9>
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	51 f5       	brne	.+84     	; 0x3a7a <check_one+0x1dc>
      {
        get_path(nuts_position[6],nuts_position[4]);
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	2d df       	rcall	.-422    	; 0x388a <get_path>
        pick();
    3a30:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[4],S3);
    3a34:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3a38:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3a3c:	c8 e0       	ldi	r28, 0x08	; 8
    3a3e:	d3 e0       	ldi	r29, 0x03	; 3
    3a40:	88 85       	ldd	r24, Y+8	; 0x08
    3a42:	99 85       	ldd	r25, Y+9	; 0x09
    3a44:	22 df       	rcall	.-444    	; 0x388a <get_path>
          place();
    3a46:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[3]);
    3a4a:	6e 81       	ldd	r22, Y+6	; 0x06
    3a4c:	7f 81       	ldd	r23, Y+7	; 0x07
    3a4e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3a52:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3a56:	19 df       	rcall	.-462    	; 0x388a <get_path>
    3a58:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
          S3  = deposit_zon_S2[1];
    3a5c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    3a60:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3a64:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
    3a68:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
          Redindication++;
    3a6c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3a76:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
      }
      if (nuts_position[4] == 3)
    3a7a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nuts_position+0x8>
    3a7e:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <nuts_position+0x9>
    3a82:	03 97       	sbiw	r24, 0x03	; 3
    3a84:	51 f5       	brne	.+84     	; 0x3ada <check_one+0x23c>
      {
        get_path(nuts_position[6],nuts_position[4]);
    3a86:	c8 e0       	ldi	r28, 0x08	; 8
    3a88:	d3 e0       	ldi	r29, 0x03	; 3
    3a8a:	63 e0       	ldi	r22, 0x03	; 3
    3a8c:	70 e0       	ldi	r23, 0x00	; 0
    3a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a90:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a92:	fb de       	rcall	.-522    	; 0x388a <get_path>
        pick();
    3a94:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[4],S1);
    3a98:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3a9c:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3aa0:	88 85       	ldd	r24, Y+8	; 0x08
    3aa2:	99 85       	ldd	r25, Y+9	; 0x09
    3aa4:	f2 de       	rcall	.-540    	; 0x388a <get_path>
          place();
    3aa6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S1,nuts_position[3]);
    3aaa:	6e 81       	ldd	r22, Y+6	; 0x06
    3aac:	7f 81       	ldd	r23, Y+7	; 0x07
    3aae:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3ab2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3ab6:	e9 de       	rcall	.-558    	; 0x388a <get_path>
    3ab8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
          S1 = deposit_zon_S1[2];
    3abc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3ac0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3ac4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    3ac8:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
          greenindication++;
    3acc:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3ad6:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3ada:	df 91       	pop	r29

    }
  }

  
}   
    3adc:	cf 91       	pop	r28
    3ade:	08 95       	ret

00003ae0 <check_two>:
    3ae0:	cf 93       	push	r28
*output:none
*logic:check the color of the nuts at given location and find the destination path
*
*/    
void check_two(void)
{
    3ae2:	df 93       	push	r29
    if (nuts_position[5] == 1)
    3ae4:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <nuts_position+0xa>
    3ae8:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <nuts_position+0xb>
    3aec:	81 30       	cpi	r24, 0x01	; 1
    3aee:	91 05       	cpc	r25, r1
    3af0:	51 f5       	brne	.+84     	; 0x3b46 <check_two+0x66>
  {
    pick();
    3af2:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[5],S3);
    3af6:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3afa:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3afe:	c8 e0       	ldi	r28, 0x08	; 8
    3b00:	d3 e0       	ldi	r29, 0x03	; 3
    3b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b04:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b06:	c1 de       	rcall	.-638    	; 0x388a <get_path>
    place();
    3b08:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S3,nuts_position[4]);
    3b0c:	68 85       	ldd	r22, Y+8	; 0x08
    3b0e:	79 85       	ldd	r23, Y+9	; 0x09
    3b10:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3b14:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3b18:	b8 de       	rcall	.-656    	; 0x388a <get_path>
    
    
      if(Redindication == 1)
    3b1a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    3b1e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	09 f0       	breq	.+2      	; 0x3b28 <check_two+0x48>
    3b26:	10 c1       	rjmp	.+544    	; 0x3d48 <check_two+0x268>
    {
    S3 = deposit_zon_S2[2];
    3b28:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <deposit_zon_S1>
    3b2c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <deposit_zon_S1+0x1>
    3b30:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3b34:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
    Redindication++;
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3b40:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    3b44:	01 c1       	rjmp	.+514    	; 0x3d48 <check_two+0x268>
  }
  /*else if (nuts_position[6] == 2)
  {
    return(0);
  }*/
  else if (nuts_position[5] == 3)
    3b46:	83 30       	cpi	r24, 0x03	; 3
    3b48:	91 05       	cpc	r25, r1
    3b4a:	51 f5       	brne	.+84     	; 0x3ba0 <check_two+0xc0>
  {
    pick();
    3b4c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[5],S1);
    3b50:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3b54:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3b58:	c8 e0       	ldi	r28, 0x08	; 8
    3b5a:	d3 e0       	ldi	r29, 0x03	; 3
    3b5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b60:	94 de       	rcall	.-728    	; 0x388a <get_path>
    place();
    3b62:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S1,nuts_position[4]);
    3b66:	68 85       	ldd	r22, Y+8	; 0x08
    3b68:	79 85       	ldd	r23, Y+9	; 0x09
    3b6a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3b6e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3b72:	8b de       	rcall	.-746    	; 0x388a <get_path>
    if(greenindication ==1)
    3b74:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
    3b78:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	09 f0       	breq	.+2      	; 0x3b82 <check_two+0xa2>
    3b80:	e3 c0       	rjmp	.+454    	; 0x3d48 <check_two+0x268>
    { 
    S1 = deposit_zon_S1[2];
    3b82:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    3b86:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3b8a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3b8e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    greenindication++;
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3b9a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3b9e:	d4 c0       	rjmp	.+424    	; 0x3d48 <check_two+0x268>
    }
  }
  else if (nuts_position[5] == 0)
    3ba0:	89 2b       	or	r24, r25
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <check_two+0xc6>
    3ba4:	d1 c0       	rjmp	.+418    	; 0x3d48 <check_two+0x268>
  {
    if (nuts_position[4] == 1)
    3ba6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nuts_position+0x8>
    3baa:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <nuts_position+0x9>
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	91 05       	cpc	r25, r1
    3bb2:	79 f5       	brne	.+94     	; 0x3c12 <check_two+0x132>
    {
        
        get_path(nuts_position[5],nuts_position[4]);
    3bb4:	61 e0       	ldi	r22, 0x01	; 1
    3bb6:	70 e0       	ldi	r23, 0x00	; 0
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	66 de       	rcall	.-820    	; 0x388a <get_path>
        pick();
    3bbe:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[4],S3);
    3bc2:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3bc6:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3bca:	c8 e0       	ldi	r28, 0x08	; 8
    3bcc:	d3 e0       	ldi	r29, 0x03	; 3
    3bce:	88 85       	ldd	r24, Y+8	; 0x08
    3bd0:	99 85       	ldd	r25, Y+9	; 0x09
    3bd2:	5b de       	rcall	.-842    	; 0x388a <get_path>
          place();
    3bd4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[3]);
    3bd8:	6e 81       	ldd	r22, Y+6	; 0x06
    3bda:	7f 81       	ldd	r23, Y+7	; 0x07
    3bdc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3be0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3be4:	52 de       	rcall	.-860    	; 0x388a <get_path>
           if(Redindication == 1)
    3be6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    3bea:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	09 f0       	breq	.+2      	; 0x3bf4 <check_two+0x114>
    3bf2:	aa c0       	rjmp	.+340    	; 0x3d48 <check_two+0x268>
           {
             S3 = deposit_zon_S2[2];
    3bf4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <deposit_zon_S1>
    3bf8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <deposit_zon_S1+0x1>
    3bfc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3c00:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
             Redindication++;
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3c0c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    3c10:	9b c0       	rjmp	.+310    	; 0x3d48 <check_two+0x268>
    /*else if (nuts_position[5] == 2)
    {
      return(0);

    }*/
    else if (nuts_position[4] == 3)
    3c12:	83 30       	cpi	r24, 0x03	; 3
    3c14:	91 05       	cpc	r25, r1
    {
      get_path(nuts_position[5],nuts_position[4]);
    3c16:	79 f5       	brne	.+94     	; 0x3c76 <check_two+0x196>
    3c18:	63 e0       	ldi	r22, 0x03	; 3
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	34 de       	rcall	.-920    	; 0x388a <get_path>
      pick();
    3c22:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
      get_path(nuts_position[4],S1);
    3c26:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3c2a:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3c2e:	c8 e0       	ldi	r28, 0x08	; 8
    3c30:	d3 e0       	ldi	r29, 0x03	; 3
    3c32:	88 85       	ldd	r24, Y+8	; 0x08
    3c34:	99 85       	ldd	r25, Y+9	; 0x09
    3c36:	29 de       	rcall	.-942    	; 0x388a <get_path>
        place();
    3c38:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
        get_path(S1,nuts_position[3]);
    3c3c:	6e 81       	ldd	r22, Y+6	; 0x06
    3c3e:	7f 81       	ldd	r23, Y+7	; 0x07
    3c40:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3c44:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3c48:	20 de       	rcall	.-960    	; 0x388a <get_path>
    3c4a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
        if(greenindication ==1)
    3c4e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3c52:	01 97       	sbiw	r24, 0x01	; 1
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <check_two+0x178>
    3c56:	78 c0       	rjmp	.+240    	; 0x3d48 <check_two+0x268>
    3c58:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
        {
          S1 = deposit_zon_S1[2];
    3c5c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3c60:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3c64:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    3c68:	82 e0       	ldi	r24, 0x02	; 2
          greenindication++;
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3c70:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3c74:	69 c0       	rjmp	.+210    	; 0x3d48 <check_two+0x268>
    3c76:	89 2b       	or	r24, r25
        } 
    }
        
        
    else if (nuts_position[4] == 0)
    3c78:	09 f0       	breq	.+2      	; 0x3c7c <check_two+0x19c>
    3c7a:	66 c0       	rjmp	.+204    	; 0x3d48 <check_two+0x268>
    3c7c:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <nuts_position+0x6>
    {
      if (nuts_position[3] == 1)
    3c80:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <nuts_position+0x7>
    3c84:	01 97       	sbiw	r24, 0x01	; 1
    3c86:	69 f5       	brne	.+90     	; 0x3ce2 <check_two+0x202>
      {
        get_path(nuts_position[5],nuts_position[3]);
    3c88:	61 e0       	ldi	r22, 0x01	; 1
    3c8a:	70 e0       	ldi	r23, 0x00	; 0
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	fc dd       	rcall	.-1032   	; 0x388a <get_path>
        pick();
    3c92:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[3],S3);
    3c96:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3c9a:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3c9e:	c8 e0       	ldi	r28, 0x08	; 8
    3ca0:	d3 e0       	ldi	r29, 0x03	; 3
    3ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ca6:	f1 dd       	rcall	.-1054   	; 0x388a <get_path>
          place();
    3ca8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[2]);
    3cac:	6c 81       	ldd	r22, Y+4	; 0x04
    3cae:	7d 81       	ldd	r23, Y+5	; 0x05
    3cb0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3cb4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3cb8:	e8 dd       	rcall	.-1072   	; 0x388a <get_path>
    3cba:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
                 if(Redindication == 1)
    3cbe:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	71 f4       	brne	.+28     	; 0x3ce2 <check_two+0x202>
    3cc6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <deposit_zon_S1>
                 {
                   S3 = deposit_zon_S2[2];
    3cca:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <deposit_zon_S1+0x1>
    3cce:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3cd2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
    3cd6:	82 e0       	ldi	r24, 0x02	; 2
                   Redindication++;
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3cde:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
                 }
      }
      if (nuts_position[3] == 3)
    3ce2:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <nuts_position+0x6>
    3ce6:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <nuts_position+0x7>
    3cea:	03 97       	sbiw	r24, 0x03	; 3
    3cec:	69 f5       	brne	.+90     	; 0x3d48 <check_two+0x268>
      {
        get_path(nuts_position[5],nuts_position[3]);
    3cee:	c8 e0       	ldi	r28, 0x08	; 8
    3cf0:	d3 e0       	ldi	r29, 0x03	; 3
    3cf2:	63 e0       	ldi	r22, 0x03	; 3
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cfa:	c7 dd       	rcall	.-1138   	; 0x388a <get_path>
        pick();
    3cfc:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[3],S1);
    3d00:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3d04:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3d08:	8e 81       	ldd	r24, Y+6	; 0x06
    3d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d0c:	be dd       	rcall	.-1156   	; 0x388a <get_path>
          place();
    3d0e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S1,nuts_position[2]);
    3d12:	6c 81       	ldd	r22, Y+4	; 0x04
    3d14:	7d 81       	ldd	r23, Y+5	; 0x05
    3d16:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3d1a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3d1e:	b5 dd       	rcall	.-1174   	; 0x388a <get_path>
    3d20:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
          if(greenindication ==1)
    3d24:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	71 f4       	brne	.+28     	; 0x3d48 <check_two+0x268>
    3d2c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
          {
            S1 = deposit_zon_S1[2];
    3d30:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3d34:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3d38:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    3d3c:	82 e0       	ldi	r24, 0x02	; 2
            greenindication++;
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3d44:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3d48:	df 91       	pop	r29

    }
  }

  
}   
    3d4a:	cf 91       	pop	r28
    3d4c:	08 95       	ret

00003d4e <check_three>:
    3d4e:	cf 93       	push	r28
*logic:check the color of the nuts at given location and find the destination path
*
*/

void check_three(void)
{
    3d50:	df 93       	push	r29
    if (nuts_position[4] == 1)
    3d52:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nuts_position+0x8>
    3d56:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <nuts_position+0x9>
    3d5a:	81 30       	cpi	r24, 0x01	; 1
    3d5c:	91 05       	cpc	r25, r1
    3d5e:	69 f5       	brne	.+90     	; 0x3dba <check_three+0x6c>
  {
    pick();
    3d60:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[4],S3);
    3d64:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3d68:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3d6c:	c8 e0       	ldi	r28, 0x08	; 8
    3d6e:	d3 e0       	ldi	r29, 0x03	; 3
    3d70:	88 85       	ldd	r24, Y+8	; 0x08
    3d72:	99 85       	ldd	r25, Y+9	; 0x09
    3d74:	8a dd       	rcall	.-1260   	; 0x388a <get_path>
    place();
    3d76:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S3,nuts_position[3]);
    3d7a:	6e 81       	ldd	r22, Y+6	; 0x06
    3d7c:	7f 81       	ldd	r23, Y+7	; 0x07
    3d7e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3d82:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3d86:	81 dd       	rcall	.-1278   	; 0x388a <get_path>
    
    
      if(Redindication == 1)
    3d88:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    3d8c:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3d90:	81 30       	cpi	r24, 0x01	; 1
    3d92:	91 05       	cpc	r25, r1
    3d94:	19 f0       	breq	.+6      	; 0x3d9c <check_three+0x4e>
    {
    S3 = deposit_zon_S2[1];
    Redindication++;
    }
    if(Redindication == 2)
    3d96:	02 97       	sbiw	r24, 0x02	; 2
    3d98:	09 f0       	breq	.+2      	; 0x3d9c <check_three+0x4e>
    3d9a:	0f c1       	rjmp	.+542    	; 0x3fba <check_three+0x26c>
    {
      S3 = deposit_zon_S2[2];
    3d9c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <deposit_zon_S1>
    3da0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <deposit_zon_S1+0x1>
    3da4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3da8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
      Redindication++;
    3dac:	83 e0       	ldi	r24, 0x03	; 3
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3db4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    3db8:	00 c1       	rjmp	.+512    	; 0x3fba <check_three+0x26c>
  }
  /*else if (nuts_position[6] == 2)
  {
    return(0);
  }*/
  else if (nuts_position[4] == 3)
    3dba:	83 30       	cpi	r24, 0x03	; 3
    3dbc:	91 05       	cpc	r25, r1
    3dbe:	51 f5       	brne	.+84     	; 0x3e14 <check_three+0xc6>
  {
    pick();
    3dc0:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[4],S1);
    3dc4:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3dc8:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3dcc:	c8 e0       	ldi	r28, 0x08	; 8
    3dce:	d3 e0       	ldi	r29, 0x03	; 3
    3dd0:	88 85       	ldd	r24, Y+8	; 0x08
    3dd2:	99 85       	ldd	r25, Y+9	; 0x09
    3dd4:	5a dd       	rcall	.-1356   	; 0x388a <get_path>
    place();
    3dd6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S1,nuts_position[3]);
    3dda:	6e 81       	ldd	r22, Y+6	; 0x06
    3ddc:	7f 81       	ldd	r23, Y+7	; 0x07
    3dde:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3de2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3de6:	51 dd       	rcall	.-1374   	; 0x388a <get_path>
    if(greenindication ==1)
    3de8:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
    3dec:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3df0:	01 97       	sbiw	r24, 0x01	; 1
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <check_three+0xa8>
    3df4:	e2 c0       	rjmp	.+452    	; 0x3fba <check_three+0x26c>
    { 
    S1 = deposit_zon_S1[2];
    3df6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    3dfa:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3dfe:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3e02:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    greenindication++;
    3e06:	82 e0       	ldi	r24, 0x02	; 2
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3e0e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3e12:	d3 c0       	rjmp	.+422    	; 0x3fba <check_three+0x26c>
    }
    
  }
  else if (nuts_position[4] == 0)
    3e14:	89 2b       	or	r24, r25
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <check_three+0xcc>
    3e18:	d0 c0       	rjmp	.+416    	; 0x3fba <check_three+0x26c>
  {
    if (nuts_position[3] == 1)
    3e1a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <nuts_position+0x6>
    3e1e:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <nuts_position+0x7>
    3e22:	81 30       	cpi	r24, 0x01	; 1
    3e24:	91 05       	cpc	r25, r1
    3e26:	91 f5       	brne	.+100    	; 0x3e8c <check_three+0x13e>
    {
        
        get_path(nuts_position[4],nuts_position[3]);
    3e28:	61 e0       	ldi	r22, 0x01	; 1
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	2c dd       	rcall	.-1448   	; 0x388a <get_path>
        pick();
    3e32:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[3],S3);
    3e36:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3e3a:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3e3e:	c8 e0       	ldi	r28, 0x08	; 8
    3e40:	d3 e0       	ldi	r29, 0x03	; 3
    3e42:	8e 81       	ldd	r24, Y+6	; 0x06
    3e44:	9f 81       	ldd	r25, Y+7	; 0x07
    3e46:	21 dd       	rcall	.-1470   	; 0x388a <get_path>
          place();
    3e48:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[2]);
    3e4c:	6c 81       	ldd	r22, Y+4	; 0x04
    3e4e:	7d 81       	ldd	r23, Y+5	; 0x05
    3e50:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3e54:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3e58:	18 dd       	rcall	.-1488   	; 0x388a <get_path>
           if(Redindication == 1)
    3e5a:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    3e5e:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3e62:	81 30       	cpi	r24, 0x01	; 1
    3e64:	91 05       	cpc	r25, r1
    3e66:	19 f0       	breq	.+6      	; 0x3e6e <check_three+0x120>
           {
             S3 = deposit_zon_S2[2];
             Redindication++;
           }
            if(Redindication == 2)
    3e68:	02 97       	sbiw	r24, 0x02	; 2
    3e6a:	09 f0       	breq	.+2      	; 0x3e6e <check_three+0x120>
    3e6c:	a6 c0       	rjmp	.+332    	; 0x3fba <check_three+0x26c>
            {
              S3 = deposit_zon_S2[1];
    3e6e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
    3e72:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    3e76:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3e7a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
              Redindication++;
    3e7e:	83 e0       	ldi	r24, 0x03	; 3
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3e86:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    3e8a:	97 c0       	rjmp	.+302    	; 0x3fba <check_three+0x26c>
    /*else if (nuts_position[5] == 2)
    {
      return(0);

    }*/
    else if (nuts_position[3] == 3)
    3e8c:	83 30       	cpi	r24, 0x03	; 3
    3e8e:	91 05       	cpc	r25, r1
    {
      get_path(nuts_position[4],nuts_position[3]);
    3e90:	79 f5       	brne	.+94     	; 0x3ef0 <check_three+0x1a2>
    3e92:	63 e0       	ldi	r22, 0x03	; 3
    3e94:	70 e0       	ldi	r23, 0x00	; 0
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	f7 dc       	rcall	.-1554   	; 0x388a <get_path>
      pick();
    3e9c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
      get_path(nuts_position[3],S1);
    3ea0:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3ea4:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3ea8:	c8 e0       	ldi	r28, 0x08	; 8
    3eaa:	d3 e0       	ldi	r29, 0x03	; 3
    3eac:	8e 81       	ldd	r24, Y+6	; 0x06
    3eae:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb0:	ec dc       	rcall	.-1576   	; 0x388a <get_path>
        place();
    3eb2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
        get_path(S1,nuts_position[2]);
    3eb6:	6c 81       	ldd	r22, Y+4	; 0x04
    3eb8:	7d 81       	ldd	r23, Y+5	; 0x05
    3eba:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    3ebe:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    3ec2:	e3 dc       	rcall	.-1594   	; 0x388a <get_path>
    3ec4:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
        if(greenindication ==1)
    3ec8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <check_three+0x184>
    3ed0:	74 c0       	rjmp	.+232    	; 0x3fba <check_three+0x26c>
    3ed2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
        {
          S1 = deposit_zon_S1[2];
    3ed6:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3eda:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3ede:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    3ee2:	82 e0       	ldi	r24, 0x02	; 2
          greenindication++;
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3eea:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3eee:	65 c0       	rjmp	.+202    	; 0x3fba <check_three+0x26c>
    3ef0:	89 2b       	or	r24, r25
        } 
    }
        
        
    else if (nuts_position[3] == 0)
    3ef2:	09 f0       	breq	.+2      	; 0x3ef6 <check_three+0x1a8>
    3ef4:	62 c0       	rjmp	.+196    	; 0x3fba <check_three+0x26c>
    3ef6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <nuts_position+0x4>
    {
      if (nuts_position[2] == 1)
    3efa:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <nuts_position+0x5>
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	81 f5       	brne	.+96     	; 0x3f62 <check_three+0x214>
      {
        get_path(nuts_position[3],nuts_position[2]);
    3f02:	61 e0       	ldi	r22, 0x01	; 1
    3f04:	70 e0       	ldi	r23, 0x00	; 0
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	bf dc       	rcall	.-1666   	; 0x388a <get_path>
        pick();
    3f0c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[2],S3);
    3f10:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3f14:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3f18:	c8 e0       	ldi	r28, 0x08	; 8
    3f1a:	d3 e0       	ldi	r29, 0x03	; 3
    3f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f20:	b4 dc       	rcall	.-1688   	; 0x388a <get_path>
          place();
    3f22:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[1]);
    3f26:	6a 81       	ldd	r22, Y+2	; 0x02
    3f28:	7b 81       	ldd	r23, Y+3	; 0x03
    3f2a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3f2e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3f32:	ab dc       	rcall	.-1706   	; 0x388a <get_path>
    3f34:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
                 if(Redindication == 1)
    3f38:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    3f3c:	81 30       	cpi	r24, 0x01	; 1
    3f3e:	91 05       	cpc	r25, r1
    3f40:	11 f0       	breq	.+4      	; 0x3f46 <check_three+0x1f8>
    3f42:	02 97       	sbiw	r24, 0x02	; 2
                 {
                   S3 = deposit_zon_S2[2];
                   Redindication++;
                 }
                  if(Redindication == 2)
    3f44:	71 f4       	brne	.+28     	; 0x3f62 <check_three+0x214>
    3f46:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
                  {
                    S3 = deposit_zon_S2[1];
    3f4a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    3f4e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    3f52:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
    3f56:	83 e0       	ldi	r24, 0x03	; 3
                    Redindication++;
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    3f5e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
                  }
      }
      if (nuts_position[2] == 3)
    3f62:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <nuts_position+0x4>
    3f66:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <nuts_position+0x5>
    3f6a:	03 97       	sbiw	r24, 0x03	; 3
    3f6c:	31 f5       	brne	.+76     	; 0x3fba <check_three+0x26c>
      {
        get_path(nuts_position[3],nuts_position[2]);
    3f6e:	c8 e0       	ldi	r28, 0x08	; 8
    3f70:	d3 e0       	ldi	r29, 0x03	; 3
    3f72:	63 e0       	ldi	r22, 0x03	; 3
    3f74:	70 e0       	ldi	r23, 0x00	; 0
    3f76:	8e 81       	ldd	r24, Y+6	; 0x06
    3f78:	9f 81       	ldd	r25, Y+7	; 0x07
    3f7a:	87 dc       	rcall	.-1778   	; 0x388a <get_path>
        pick();
    3f7c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[2],S1);
    3f80:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    3f84:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    3f88:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8c:	7e dc       	rcall	.-1796   	; 0x388a <get_path>
    3f8e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          place();
    3f92:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
        
          if(greenindication ==1)
    3f96:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	71 f4       	brne	.+28     	; 0x3fba <check_three+0x26c>
    3f9e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
          {
            S1 = deposit_zon_S1[2];
    3fa2:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    3fa6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    3faa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    3fae:	82 e0       	ldi	r24, 0x02	; 2
            greenindication++;
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    3fb6:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    3fba:	df 91       	pop	r29

    }
  }

  
}   
    3fbc:	cf 91       	pop	r28
    3fbe:	08 95       	ret

00003fc0 <check_four>:
    3fc0:	cf 93       	push	r28
*
*/


void check_four(void)
{
    3fc2:	df 93       	push	r29
    if (nuts_position[3] == 1)
    3fc4:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <nuts_position+0x6>
    3fc8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <nuts_position+0x7>
    3fcc:	81 30       	cpi	r24, 0x01	; 1
    3fce:	91 05       	cpc	r25, r1
    3fd0:	69 f5       	brne	.+90     	; 0x402c <check_four+0x6c>
  {
    pick();
    3fd2:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[3],S3);
    3fd6:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    3fda:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    3fde:	c8 e0       	ldi	r28, 0x08	; 8
    3fe0:	d3 e0       	ldi	r29, 0x03	; 3
    3fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe6:	51 dc       	rcall	.-1886   	; 0x388a <get_path>
    place();
    3fe8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S3,nuts_position[2]);
    3fec:	6c 81       	ldd	r22, Y+4	; 0x04
    3fee:	7d 81       	ldd	r23, Y+5	; 0x05
    3ff0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    3ff4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    3ff8:	48 dc       	rcall	.-1904   	; 0x388a <get_path>
    
    
      if(Redindication == 1)
    3ffa:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    3ffe:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    4002:	81 30       	cpi	r24, 0x01	; 1
    4004:	91 05       	cpc	r25, r1
    4006:	19 f0       	breq	.+6      	; 0x400e <check_four+0x4e>
    {
    S3 = deposit_zon_S2[2];
    Redindication++;
    }
    if(Redindication == 2)
    4008:	02 97       	sbiw	r24, 0x02	; 2
    400a:	09 f0       	breq	.+2      	; 0x400e <check_four+0x4e>
    400c:	f3 c0       	rjmp	.+486    	; 0x41f4 <check_four+0x234>
    {
      S3 = deposit_zon_S2[1];
    400e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
    4012:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    4016:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    401a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
      Redindication++;
    401e:	83 e0       	ldi	r24, 0x03	; 3
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    4026:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    402a:	e4 c0       	rjmp	.+456    	; 0x41f4 <check_four+0x234>
  }
  /*else if (nuts_position[6] == 2)
  {
    return(0);
  }*/
  else if (nuts_position[3] == 3)
    402c:	83 30       	cpi	r24, 0x03	; 3
    402e:	91 05       	cpc	r25, r1
    4030:	51 f5       	brne	.+84     	; 0x4086 <check_four+0xc6>
  {
    pick();
    4032:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[3],S1);
    4036:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    403a:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    403e:	c8 e0       	ldi	r28, 0x08	; 8
    4040:	d3 e0       	ldi	r29, 0x03	; 3
    4042:	8e 81       	ldd	r24, Y+6	; 0x06
    4044:	9f 81       	ldd	r25, Y+7	; 0x07
    4046:	21 dc       	rcall	.-1982   	; 0x388a <get_path>
    place();
    4048:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S1,nuts_position[2]);
    404c:	6c 81       	ldd	r22, Y+4	; 0x04
    404e:	7d 81       	ldd	r23, Y+5	; 0x05
    4050:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    4054:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    4058:	18 dc       	rcall	.-2000   	; 0x388a <get_path>
    if(greenindication ==1)
    405a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
    405e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	09 f0       	breq	.+2      	; 0x4068 <check_four+0xa8>
    4066:	c6 c0       	rjmp	.+396    	; 0x41f4 <check_four+0x234>
    { 
    S1 = deposit_zon_S1[2];
    4068:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    406c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    4070:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    4074:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    greenindication++;
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    4080:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    4084:	b7 c0       	rjmp	.+366    	; 0x41f4 <check_four+0x234>
    }
    
  }
  else if (nuts_position[3] == 0)
    4086:	89 2b       	or	r24, r25
    4088:	09 f0       	breq	.+2      	; 0x408c <check_four+0xcc>
    408a:	b4 c0       	rjmp	.+360    	; 0x41f4 <check_four+0x234>
  {
    if (nuts_position[2] == 1)
    408c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <nuts_position+0x4>
    4090:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <nuts_position+0x5>
    4094:	81 30       	cpi	r24, 0x01	; 1
    4096:	91 05       	cpc	r25, r1
    4098:	91 f5       	brne	.+100    	; 0x40fe <check_four+0x13e>
    {
        
        get_path(nuts_position[4],nuts_position[2]);
    409a:	c8 e0       	ldi	r28, 0x08	; 8
    409c:	d3 e0       	ldi	r29, 0x03	; 3
    409e:	61 e0       	ldi	r22, 0x01	; 1
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	88 85       	ldd	r24, Y+8	; 0x08
    40a4:	99 85       	ldd	r25, Y+9	; 0x09
    40a6:	f1 db       	rcall	.-2078   	; 0x388a <get_path>
        pick();
    40a8:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[2],S3);
    40ac:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    40b0:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    40b4:	8c 81       	ldd	r24, Y+4	; 0x04
    40b6:	9d 81       	ldd	r25, Y+5	; 0x05
    40b8:	e8 db       	rcall	.-2096   	; 0x388a <get_path>
          place();
    40ba:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,nuts_position[1]);
    40be:	6a 81       	ldd	r22, Y+2	; 0x02
    40c0:	7b 81       	ldd	r23, Y+3	; 0x03
    40c2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    40c6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    40ca:	df db       	rcall	.-2114   	; 0x388a <get_path>
           if(Redindication == 1)
    40cc:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    40d0:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    40d4:	81 30       	cpi	r24, 0x01	; 1
    40d6:	91 05       	cpc	r25, r1
    40d8:	19 f0       	breq	.+6      	; 0x40e0 <check_four+0x120>
           {
             S3 = deposit_zon_S2[2];
             Redindication++;
           }
            if(Redindication == 2)
    40da:	02 97       	sbiw	r24, 0x02	; 2
    40dc:	09 f0       	breq	.+2      	; 0x40e0 <check_four+0x120>
    40de:	8a c0       	rjmp	.+276    	; 0x41f4 <check_four+0x234>
            {
              S3 = deposit_zon_S2[1];
    40e0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
    40e4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    40e8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    40ec:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
              Redindication++;
    40f0:	83 e0       	ldi	r24, 0x03	; 3
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    40f8:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    40fc:	7b c0       	rjmp	.+246    	; 0x41f4 <check_four+0x234>
    /*else if (nuts_position[5] == 2)
    {
      return(0);

    }*/
    else if (nuts_position[2] == 3)
    40fe:	83 30       	cpi	r24, 0x03	; 3
    4100:	91 05       	cpc	r25, r1
    {
      get_path(nuts_position[4],nuts_position[2]);
    4102:	79 f5       	brne	.+94     	; 0x4162 <check_four+0x1a2>
    4104:	c8 e0       	ldi	r28, 0x08	; 8
    4106:	d3 e0       	ldi	r29, 0x03	; 3
    4108:	63 e0       	ldi	r22, 0x03	; 3
    410a:	70 e0       	ldi	r23, 0x00	; 0
    410c:	88 85       	ldd	r24, Y+8	; 0x08
    410e:	99 85       	ldd	r25, Y+9	; 0x09
    4110:	bc db       	rcall	.-2184   	; 0x388a <get_path>
      pick();
    4112:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
      get_path(nuts_position[2],S1);
    4116:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    411a:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    411e:	8c 81       	ldd	r24, Y+4	; 0x04
    4120:	9d 81       	ldd	r25, Y+5	; 0x05
        place();
    4122:	b3 db       	rcall	.-2202   	; 0x388a <get_path>
    4124:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
        get_path(S1,nuts_position[1]);
    4128:	6a 81       	ldd	r22, Y+2	; 0x02
    412a:	7b 81       	ldd	r23, Y+3	; 0x03
    412c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    4130:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    4134:	aa db       	rcall	.-2220   	; 0x388a <get_path>
        if(greenindication ==1)
    4136:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
    413a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    413e:	01 97       	sbiw	r24, 0x01	; 1
    4140:	09 f0       	breq	.+2      	; 0x4144 <check_four+0x184>
    4142:	58 c0       	rjmp	.+176    	; 0x41f4 <check_four+0x234>
        {
          S1 = deposit_zon_S1[2];
    4144:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    4148:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    414c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    4150:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
          greenindication++;
    4154:	82 e0       	ldi	r24, 0x02	; 2
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    415c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    4160:	49 c0       	rjmp	.+146    	; 0x41f4 <check_four+0x234>
        } 
    }
        
        
    else if (nuts_position[2] == 0)
    4162:	89 2b       	or	r24, r25
    4164:	09 f0       	breq	.+2      	; 0x4168 <check_four+0x1a8>
    4166:	46 c0       	rjmp	.+140    	; 0x41f4 <check_four+0x234>
    {
      if (nuts_position[1] == 1)
    4168:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    416c:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    4170:	01 97       	sbiw	r24, 0x01	; 1
      {
        get_path(nuts_position[2],nuts_position[1]);
    4172:	e9 f4       	brne	.+58     	; 0x41ae <check_four+0x1ee>
    4174:	61 e0       	ldi	r22, 0x01	; 1
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	90 e0       	ldi	r25, 0x00	; 0
        pick();
    417c:	86 db       	rcall	.-2292   	; 0x388a <get_path>
    417e:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[1],S3);
    4182:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    4186:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    418a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    418e:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
          place();
    4192:	7b db       	rcall	.-2314   	; 0x388a <get_path>
    4194:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,start);
    4198:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    419c:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    41a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    41a4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    41a8:	70 db       	rcall	.-2336   	; 0x388a <get_path>
          buzz_blink();
    41aa:	0e 94 ac 02 	call	0x558	; 0x558 <buzz_blink>
                
      }
      if (nuts_position[1] == 3)
    41ae:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    41b2:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    41b6:	03 97       	sbiw	r24, 0x03	; 3
      {
        get_path(nuts_position[2],nuts_position[1]);
    41b8:	e9 f4       	brne	.+58     	; 0x41f4 <check_four+0x234>
    41ba:	c8 e0       	ldi	r28, 0x08	; 8
    41bc:	d3 e0       	ldi	r29, 0x03	; 3
    41be:	63 e0       	ldi	r22, 0x03	; 3
    41c0:	70 e0       	ldi	r23, 0x00	; 0
    41c2:	8c 81       	ldd	r24, Y+4	; 0x04
    41c4:	9d 81       	ldd	r25, Y+5	; 0x05
        pick();
    41c6:	61 db       	rcall	.-2366   	; 0x388a <get_path>
    41c8:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[1],S1);
    41cc:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    41d0:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    41d4:	8a 81       	ldd	r24, Y+2	; 0x02
    41d6:	9b 81       	ldd	r25, Y+3	; 0x03
          place();
    41d8:	58 db       	rcall	.-2384   	; 0x388a <get_path>
    41da:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S1,start);
    41de:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    41e2:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    41e6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    41ea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    41ee:	4d db       	rcall	.-2406   	; 0x388a <get_path>
          buzz_blink();
    41f0:	0e 94 ac 02 	call	0x558	; 0x558 <buzz_blink>

    }
  }

  
}   
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
    41f8:	08 95       	ret

000041fa <check_five>:
*/



void check_five(void)
{
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    if (nuts_position[2] == 1)
    41fe:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <nuts_position+0x4>
    4202:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <nuts_position+0x5>
    4206:	81 30       	cpi	r24, 0x01	; 1
    4208:	91 05       	cpc	r25, r1
    420a:	69 f5       	brne	.+90     	; 0x4266 <check_five+0x6c>
  {
    pick();
    420c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[2],S3);
    4210:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    4214:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    4218:	c8 e0       	ldi	r28, 0x08	; 8
    421a:	d3 e0       	ldi	r29, 0x03	; 3
    421c:	8c 81       	ldd	r24, Y+4	; 0x04
    421e:	9d 81       	ldd	r25, Y+5	; 0x05
    4220:	34 db       	rcall	.-2456   	; 0x388a <get_path>
    place();
    4222:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S3,nuts_position[1]);
    4226:	6a 81       	ldd	r22, Y+2	; 0x02
    4228:	7b 81       	ldd	r23, Y+3	; 0x03
    422a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    422e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    4232:	2b db       	rcall	.-2474   	; 0x388a <get_path>
    
    
      if(Redindication == 1)
    4234:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <Redindication>
    4238:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <Redindication+0x1>
    423c:	81 30       	cpi	r24, 0x01	; 1
    423e:	91 05       	cpc	r25, r1
    4240:	19 f0       	breq	.+6      	; 0x4248 <check_five+0x4e>
    {
    S3 = deposit_zon_S2[2];
    Redindication++;
    }
    if(Redindication == 2)
    4242:	02 97       	sbiw	r24, 0x02	; 2
    4244:	09 f0       	breq	.+2      	; 0x4248 <check_five+0x4e>
    4246:	86 c0       	rjmp	.+268    	; 0x4354 <check_five+0x15a>
    {
      S3 = deposit_zon_S2[1];
    4248:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <deposit_zon_S2+0x2>
    424c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <deposit_zon_S2+0x3>
    4250:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <S3+0x1>
    4254:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <S3>
      Redindication++;
    4258:	83 e0       	ldi	r24, 0x03	; 3
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Redindication+0x1>
    4260:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Redindication>
    4264:	77 c0       	rjmp	.+238    	; 0x4354 <check_five+0x15a>
  }
  /*else if (nuts_position[6] == 2)
  {
    return(0);
  }*/
  else if (nuts_position[2] == 3)
    4266:	83 30       	cpi	r24, 0x03	; 3
    4268:	91 05       	cpc	r25, r1
    426a:	51 f5       	brne	.+84     	; 0x42c0 <check_five+0xc6>
  {
    pick();
    426c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[2],S1);
    4270:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    4274:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    4278:	c8 e0       	ldi	r28, 0x08	; 8
    427a:	d3 e0       	ldi	r29, 0x03	; 3
    427c:	8c 81       	ldd	r24, Y+4	; 0x04
    427e:	9d 81       	ldd	r25, Y+5	; 0x05
    4280:	04 db       	rcall	.-2552   	; 0x388a <get_path>
    place();
    4282:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S1,nuts_position[1]);
    4286:	6a 81       	ldd	r22, Y+2	; 0x02
    4288:	7b 81       	ldd	r23, Y+3	; 0x03
    428a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    428e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    4292:	fb da       	rcall	.-2570   	; 0x388a <get_path>
    if(greenindication ==1)
    4294:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <greenindication>
    4298:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <greenindication+0x1>
    429c:	01 97       	sbiw	r24, 0x01	; 1
    429e:	09 f0       	breq	.+2      	; 0x42a2 <check_five+0xa8>
    42a0:	59 c0       	rjmp	.+178    	; 0x4354 <check_five+0x15a>
    { 
    S1 = deposit_zon_S1[2];
    42a2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    42a6:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    42aa:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <S1+0x1>
    42ae:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <S1>
    greenindication++;
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <greenindication+0x1>
    42ba:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <greenindication>
    42be:	4a c0       	rjmp	.+148    	; 0x4354 <check_five+0x15a>
    }
    
  }
  else if (nuts_position[2] == 0)
    42c0:	89 2b       	or	r24, r25
    42c2:	09 f0       	breq	.+2      	; 0x42c6 <check_five+0xcc>
    42c4:	47 c0       	rjmp	.+142    	; 0x4354 <check_five+0x15a>
  {
    if (nuts_position[1] == 1)
    42c6:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    42ca:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    42ce:	81 30       	cpi	r24, 0x01	; 1
    42d0:	91 05       	cpc	r25, r1
    42d2:	c9 f4       	brne	.+50     	; 0x4306 <check_five+0x10c>
    {
        
        //get_path(nuts_position[4],nuts_position[2]);
        pick();
    42d4:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
        get_path(nuts_position[1],S3);
    42d8:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    42dc:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    42e0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    42e4:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    42e8:	d0 da       	rcall	.-2656   	; 0x388a <get_path>
          place();
    42ea:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
          get_path(S3,start);
    42ee:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    42f2:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    42f6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    42fa:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    42fe:	c5 da       	rcall	.-2678   	; 0x388a <get_path>
          buzz_blink();
    4300:	0e 94 ac 02 	call	0x558	; 0x558 <buzz_blink>
    4304:	27 c0       	rjmp	.+78     	; 0x4354 <check_five+0x15a>
    /*else if (nuts_position[5] == 2)
    {
      return(0);

    }*/
    else if (nuts_position[1] == 3)
    4306:	83 30       	cpi	r24, 0x03	; 3
    4308:	91 05       	cpc	r25, r1
    430a:	c9 f4       	brne	.+50     	; 0x433e <check_five+0x144>
    {
      //get_path(nuts_position[4],nuts_position[2]);
      pick();
    430c:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
      get_path(nuts_position[1],S1);
    4310:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    4314:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    4318:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    431c:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    4320:	b4 da       	rcall	.-2712   	; 0x388a <get_path>
        place();
    4322:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
        get_path(S1,start);
    4326:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    432a:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    432e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    4332:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    4336:	a9 da       	rcall	.-2734   	; 0x388a <get_path>
        buzz_blink();
    4338:	0e 94 ac 02 	call	0x558	; 0x558 <buzz_blink>
    433c:	0b c0       	rjmp	.+22     	; 0x4354 <check_five+0x15a>
        
    }
        
        
    else if (nuts_position[1] == 0)
    433e:	89 2b       	or	r24, r25
    {
    
        get_path(nuts_position[1],start);
    4340:	49 f4       	brne	.+18     	; 0x4354 <check_five+0x15a>
    4342:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    4346:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    434a:	80 e0       	ldi	r24, 0x00	; 0
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9d da       	rcall	.-2758   	; 0x388a <get_path>
        buzz_blink();   
    4350:	0e 94 ac 02 	call	0x558	; 0x558 <buzz_blink>
  
    }
  }

  
}   
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	08 95       	ret

0000435a <check_six>:
*/


void check_six(void)
{
    if (nuts_position[1] == 1)
    435a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    435e:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	91 05       	cpc	r25, r1
    4366:	c9 f4       	brne	.+50     	; 0x439a <check_six+0x40>
  {
    pick();
    4368:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[1],S3);
    436c:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <S3>
    4370:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <S3+0x1>
    4374:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    4378:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    437c:	86 da       	rcall	.-2804   	; 0x388a <get_path>
    place();
    437e:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S3,start);
    4382:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    4386:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    438a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <S3>
    438e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <S3+0x1>
    4392:	7b da       	rcall	.-2826   	; 0x388a <get_path>
    buzz_blink();
    4394:	0c 94 ac 02 	jmp	0x558	; 0x558 <buzz_blink>
    4398:	08 95       	ret
    
  }
  else if (nuts_position[1] == 2)
    439a:	82 30       	cpi	r24, 0x02	; 2
    439c:	91 05       	cpc	r25, r1
    439e:	39 f1       	breq	.+78     	; 0x43ee <check_six+0x94>
  {
  }
    
  else if (nuts_position[1] == 3)
    43a0:	83 30       	cpi	r24, 0x03	; 3
    43a2:	91 05       	cpc	r25, r1
    43a4:	c9 f4       	brne	.+50     	; 0x43d8 <check_six+0x7e>
  {
    pick();
    43a6:	0e 94 0a 09 	call	0x1214	; 0x1214 <pick>
    get_path(nuts_position[1],S1);
    43aa:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <S1>
    43ae:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <S1+0x1>
    43b2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <nuts_position+0x2>
    43b6:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <nuts_position+0x3>
    43ba:	67 da       	rcall	.-2866   	; 0x388a <get_path>
    place();
    43bc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <place>
    get_path(S1,start);
    43c0:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    43c4:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    43c8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <S1>
    43cc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <S1+0x1>
    43d0:	5c da       	rcall	.-2888   	; 0x388a <get_path>
    buzz_blink();
    43d2:	0c 94 ac 02 	jmp	0x558	; 0x558 <buzz_blink>
    43d6:	08 95       	ret
  }
  else if (nuts_position[1] == 0)
    43d8:	89 2b       	or	r24, r25
    43da:	49 f4       	brne	.+18     	; 0x43ee <check_six+0x94>
  {
        get_path(nuts_position[1],start);
    43dc:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <start>
    43e0:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <start+0x1>
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	50 da       	rcall	.-2912   	; 0x388a <get_path>
        buzz_blink();
    43ea:	0c 94 ac 02 	jmp	0x558	; 0x558 <buzz_blink>
    43ee:	08 95       	ret

000043f0 <main>:
  }
	 
int main (void)
{	
	
	init_devices();
    43f0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <init_devices>
	lcd_init();
    43f4:	0e 94 89 01 	call	0x312	; 0x312 <lcd_init>
{
	//Output Scaling 20% from datasheet
	
	//set S0 high
	//set S1 high
    PORTB =  0x10;
    43f8:	80 e1       	ldi	r24, 0x10	; 16
    43fa:	85 b9       	out	0x05, r24	; 5
	color_sensor_scaling();
	delay(3000);
    43fc:	68 eb       	ldi	r22, 0xB8	; 184
    43fe:	7b e0       	ldi	r23, 0x0B	; 11
    4400:	80 e0       	ldi	r24, 0x00	; 0
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	0e 94 a6 00 	call	0x14c	; 0x14c <delay>
	//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR3BH = 0x00;
    4408:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
	OCR3BL = (unsigned char) PositionPanServo;
    440c:	83 e4       	ldi	r24, 0x43	; 67
    440e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
	servo_1(60);
	servo_1_free();
    4412:	0e 94 1a 01 	call	0x234	; 0x234 <servo_1_free>
	get_path(start,nuts_position[1]);
    4416:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <nuts_position+0x2>
    441a:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <nuts_position+0x3>
    441e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <start>
    4422:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <start+0x1>
    4426:	31 da       	rcall	.-2974   	; 0x388a <get_path>
check_one();
    4428:	3a da       	rcall	.-2956   	; 0x389e <check_one>
check_two();
    442a:	5a db       	rcall	.-2380   	; 0x3ae0 <check_two>
check_three();
    442c:	90 dc       	rcall	.-1760   	; 0x3d4e <check_three>
check_four();
    442e:	c8 dd       	rcall	.-1136   	; 0x3fc0 <check_four>
    4430:	e4 de       	rcall	.-568    	; 0x41fa <check_five>
check_five();
    4432:	93 df       	rcall	.-218    	; 0x435a <check_six>
    4434:	80 e0       	ldi	r24, 0x00	; 0
check_six();
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	08 95       	ret

0000443a <__mulsi3>:
}
    443a:	db 01       	movw	r26, r22
    443c:	8f 93       	push	r24
    443e:	9f 93       	push	r25
    4440:	35 d0       	rcall	.+106    	; 0x44ac <__muluhisi3>
    4442:	bf 91       	pop	r27
    4444:	af 91       	pop	r26
    4446:	a2 9f       	mul	r26, r18
    4448:	80 0d       	add	r24, r0
    444a:	91 1d       	adc	r25, r1
    444c:	a3 9f       	mul	r26, r19
    444e:	90 0d       	add	r25, r0
    4450:	b2 9f       	mul	r27, r18
    4452:	90 0d       	add	r25, r0
    4454:	11 24       	eor	r1, r1
    4456:	08 95       	ret

00004458 <__udivmodsi4>:
    4458:	a1 e2       	ldi	r26, 0x21	; 33
    445a:	1a 2e       	mov	r1, r26
    445c:	aa 1b       	sub	r26, r26
    445e:	bb 1b       	sub	r27, r27
    4460:	fd 01       	movw	r30, r26
    4462:	0d c0       	rjmp	.+26     	; 0x447e <__udivmodsi4_ep>

00004464 <__udivmodsi4_loop>:
    4464:	aa 1f       	adc	r26, r26
    4466:	bb 1f       	adc	r27, r27
    4468:	ee 1f       	adc	r30, r30
    446a:	ff 1f       	adc	r31, r31
    446c:	a2 17       	cp	r26, r18
    446e:	b3 07       	cpc	r27, r19
    4470:	e4 07       	cpc	r30, r20
    4472:	f5 07       	cpc	r31, r21
    4474:	20 f0       	brcs	.+8      	; 0x447e <__udivmodsi4_ep>
    4476:	a2 1b       	sub	r26, r18
    4478:	b3 0b       	sbc	r27, r19
    447a:	e4 0b       	sbc	r30, r20
    447c:	f5 0b       	sbc	r31, r21

0000447e <__udivmodsi4_ep>:
    447e:	66 1f       	adc	r22, r22
    4480:	77 1f       	adc	r23, r23
    4482:	88 1f       	adc	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	1a 94       	dec	r1
    4488:	69 f7       	brne	.-38     	; 0x4464 <__udivmodsi4_loop>
    448a:	60 95       	com	r22
    448c:	70 95       	com	r23
    448e:	80 95       	com	r24
    4490:	90 95       	com	r25
    4492:	9b 01       	movw	r18, r22
    4494:	ac 01       	movw	r20, r24
    4496:	bd 01       	movw	r22, r26
    4498:	cf 01       	movw	r24, r30
    449a:	08 95       	ret

0000449c <__tablejump2__>:
    449c:	ee 0f       	add	r30, r30
    449e:	ff 1f       	adc	r31, r31
    44a0:	88 1f       	adc	r24, r24
    44a2:	8b bf       	out	0x3b, r24	; 59
    44a4:	07 90       	elpm	r0, Z+
    44a6:	f6 91       	elpm	r31, Z
    44a8:	e0 2d       	mov	r30, r0
    44aa:	19 94       	eijmp

000044ac <__muluhisi3>:
    44ac:	09 d0       	rcall	.+18     	; 0x44c0 <__umulhisi3>
    44ae:	a5 9f       	mul	r26, r21
    44b0:	90 0d       	add	r25, r0
    44b2:	b4 9f       	mul	r27, r20
    44b4:	90 0d       	add	r25, r0
    44b6:	a4 9f       	mul	r26, r20
    44b8:	80 0d       	add	r24, r0
    44ba:	91 1d       	adc	r25, r1
    44bc:	11 24       	eor	r1, r1
    44be:	08 95       	ret

000044c0 <__umulhisi3>:
    44c0:	a2 9f       	mul	r26, r18
    44c2:	b0 01       	movw	r22, r0
    44c4:	b3 9f       	mul	r27, r19
    44c6:	c0 01       	movw	r24, r0
    44c8:	a3 9f       	mul	r26, r19
    44ca:	70 0d       	add	r23, r0
    44cc:	81 1d       	adc	r24, r1
    44ce:	11 24       	eor	r1, r1
    44d0:	91 1d       	adc	r25, r1
    44d2:	b2 9f       	mul	r27, r18
    44d4:	70 0d       	add	r23, r0
    44d6:	81 1d       	adc	r24, r1
    44d8:	11 24       	eor	r1, r1
    44da:	91 1d       	adc	r25, r1
    44dc:	08 95       	ret

000044de <itoa>:
    44de:	45 32       	cpi	r20, 0x25	; 37
    44e0:	51 05       	cpc	r21, r1
    44e2:	18 f4       	brcc	.+6      	; 0x44ea <itoa+0xc>
    44e4:	42 30       	cpi	r20, 0x02	; 2
    44e6:	08 f0       	brcs	.+2      	; 0x44ea <itoa+0xc>
    44e8:	04 c0       	rjmp	.+8      	; 0x44f2 <__itoa_ncheck>
    44ea:	fb 01       	movw	r30, r22
    44ec:	10 82       	st	Z, r1
    44ee:	cb 01       	movw	r24, r22
    44f0:	08 95       	ret

000044f2 <__itoa_ncheck>:
    44f2:	bb 27       	eor	r27, r27
    44f4:	4a 30       	cpi	r20, 0x0A	; 10
    44f6:	31 f4       	brne	.+12     	; 0x4504 <__itoa_ncheck+0x12>
    44f8:	99 23       	and	r25, r25
    44fa:	22 f4       	brpl	.+8      	; 0x4504 <__itoa_ncheck+0x12>
    44fc:	bd e2       	ldi	r27, 0x2D	; 45
    44fe:	90 95       	com	r25
    4500:	81 95       	neg	r24
    4502:	9f 4f       	sbci	r25, 0xFF	; 255
    4504:	01 c0       	rjmp	.+2      	; 0x4508 <__utoa_common>

00004506 <__utoa_ncheck>:
    4506:	bb 27       	eor	r27, r27

00004508 <__utoa_common>:
    4508:	fb 01       	movw	r30, r22
    450a:	55 27       	eor	r21, r21
    450c:	aa 27       	eor	r26, r26
    450e:	88 0f       	add	r24, r24
    4510:	99 1f       	adc	r25, r25
    4512:	aa 1f       	adc	r26, r26
    4514:	a4 17       	cp	r26, r20
    4516:	10 f0       	brcs	.+4      	; 0x451c <__utoa_common+0x14>
    4518:	a4 1b       	sub	r26, r20
    451a:	83 95       	inc	r24
    451c:	50 51       	subi	r21, 0x10	; 16
    451e:	b9 f7       	brne	.-18     	; 0x450e <__utoa_common+0x6>
    4520:	a0 5d       	subi	r26, 0xD0	; 208
    4522:	aa 33       	cpi	r26, 0x3A	; 58
    4524:	08 f0       	brcs	.+2      	; 0x4528 <__utoa_common+0x20>
    4526:	a9 5d       	subi	r26, 0xD9	; 217
    4528:	a1 93       	st	Z+, r26
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	79 f7       	brne	.-34     	; 0x450c <__utoa_common+0x4>
    452e:	b1 11       	cpse	r27, r1
    4530:	b1 93       	st	Z+, r27
    4532:	11 92       	st	Z+, r1
    4534:	cb 01       	movw	r24, r22
    4536:	26 c2       	rjmp	.+1100   	; 0x4984 <strrev>

00004538 <printf>:
    4538:	cf 93       	push	r28
    453a:	df 93       	push	r29
    453c:	cd b7       	in	r28, 0x3d	; 61
    453e:	de b7       	in	r29, 0x3e	; 62
    4540:	ae 01       	movw	r20, r28
    4542:	4a 5f       	subi	r20, 0xFA	; 250
    4544:	5f 4f       	sbci	r21, 0xFF	; 255
    4546:	fa 01       	movw	r30, r20
    4548:	61 91       	ld	r22, Z+
    454a:	71 91       	ld	r23, Z+
    454c:	af 01       	movw	r20, r30
    454e:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <__iob+0x2>
    4552:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <__iob+0x3>
    4556:	03 d0       	rcall	.+6      	; 0x455e <vfprintf>
    4558:	df 91       	pop	r29
    455a:	cf 91       	pop	r28
    455c:	08 95       	ret

0000455e <vfprintf>:
    455e:	2f 92       	push	r2
    4560:	3f 92       	push	r3
    4562:	4f 92       	push	r4
    4564:	5f 92       	push	r5
    4566:	6f 92       	push	r6
    4568:	7f 92       	push	r7
    456a:	8f 92       	push	r8
    456c:	9f 92       	push	r9
    456e:	af 92       	push	r10
    4570:	bf 92       	push	r11
    4572:	cf 92       	push	r12
    4574:	df 92       	push	r13
    4576:	ef 92       	push	r14
    4578:	ff 92       	push	r15
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
    4586:	2b 97       	sbiw	r28, 0x0b	; 11
    4588:	0f b6       	in	r0, 0x3f	; 63
    458a:	f8 94       	cli
    458c:	de bf       	out	0x3e, r29	; 62
    458e:	0f be       	out	0x3f, r0	; 63
    4590:	cd bf       	out	0x3d, r28	; 61
    4592:	6c 01       	movw	r12, r24
    4594:	7b 01       	movw	r14, r22
    4596:	8a 01       	movw	r16, r20
    4598:	fc 01       	movw	r30, r24
    459a:	17 82       	std	Z+7, r1	; 0x07
    459c:	16 82       	std	Z+6, r1	; 0x06
    459e:	83 81       	ldd	r24, Z+3	; 0x03
    45a0:	81 ff       	sbrs	r24, 1
    45a2:	bf c1       	rjmp	.+894    	; 0x4922 <vfprintf+0x3c4>
    45a4:	ce 01       	movw	r24, r28
    45a6:	01 96       	adiw	r24, 0x01	; 1
    45a8:	3c 01       	movw	r6, r24
    45aa:	f6 01       	movw	r30, r12
    45ac:	93 81       	ldd	r25, Z+3	; 0x03
    45ae:	f7 01       	movw	r30, r14
    45b0:	93 fd       	sbrc	r25, 3
    45b2:	85 91       	lpm	r24, Z+
    45b4:	93 ff       	sbrs	r25, 3
    45b6:	81 91       	ld	r24, Z+
    45b8:	7f 01       	movw	r14, r30
    45ba:	88 23       	and	r24, r24
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <vfprintf+0x62>
    45be:	ad c1       	rjmp	.+858    	; 0x491a <vfprintf+0x3bc>
    45c0:	85 32       	cpi	r24, 0x25	; 37
    45c2:	39 f4       	brne	.+14     	; 0x45d2 <vfprintf+0x74>
    45c4:	93 fd       	sbrc	r25, 3
    45c6:	85 91       	lpm	r24, Z+
    45c8:	93 ff       	sbrs	r25, 3
    45ca:	81 91       	ld	r24, Z+
    45cc:	7f 01       	movw	r14, r30
    45ce:	85 32       	cpi	r24, 0x25	; 37
    45d0:	21 f4       	brne	.+8      	; 0x45da <vfprintf+0x7c>
    45d2:	b6 01       	movw	r22, r12
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	e6 d1       	rcall	.+972    	; 0x49a4 <fputc>
    45d8:	e8 cf       	rjmp	.-48     	; 0x45aa <vfprintf+0x4c>
    45da:	91 2c       	mov	r9, r1
    45dc:	21 2c       	mov	r2, r1
    45de:	31 2c       	mov	r3, r1
    45e0:	ff e1       	ldi	r31, 0x1F	; 31
    45e2:	f3 15       	cp	r31, r3
    45e4:	d8 f0       	brcs	.+54     	; 0x461c <vfprintf+0xbe>
    45e6:	8b 32       	cpi	r24, 0x2B	; 43
    45e8:	79 f0       	breq	.+30     	; 0x4608 <vfprintf+0xaa>
    45ea:	38 f4       	brcc	.+14     	; 0x45fa <vfprintf+0x9c>
    45ec:	80 32       	cpi	r24, 0x20	; 32
    45ee:	79 f0       	breq	.+30     	; 0x460e <vfprintf+0xb0>
    45f0:	83 32       	cpi	r24, 0x23	; 35
    45f2:	a1 f4       	brne	.+40     	; 0x461c <vfprintf+0xbe>
    45f4:	23 2d       	mov	r18, r3
    45f6:	20 61       	ori	r18, 0x10	; 16
    45f8:	1d c0       	rjmp	.+58     	; 0x4634 <vfprintf+0xd6>
    45fa:	8d 32       	cpi	r24, 0x2D	; 45
    45fc:	61 f0       	breq	.+24     	; 0x4616 <vfprintf+0xb8>
    45fe:	80 33       	cpi	r24, 0x30	; 48
    4600:	69 f4       	brne	.+26     	; 0x461c <vfprintf+0xbe>
    4602:	23 2d       	mov	r18, r3
    4604:	21 60       	ori	r18, 0x01	; 1
    4606:	16 c0       	rjmp	.+44     	; 0x4634 <vfprintf+0xd6>
    4608:	83 2d       	mov	r24, r3
    460a:	82 60       	ori	r24, 0x02	; 2
    460c:	38 2e       	mov	r3, r24
    460e:	e3 2d       	mov	r30, r3
    4610:	e4 60       	ori	r30, 0x04	; 4
    4612:	3e 2e       	mov	r3, r30
    4614:	2a c0       	rjmp	.+84     	; 0x466a <vfprintf+0x10c>
    4616:	f3 2d       	mov	r31, r3
    4618:	f8 60       	ori	r31, 0x08	; 8
    461a:	1d c0       	rjmp	.+58     	; 0x4656 <vfprintf+0xf8>
    461c:	37 fc       	sbrc	r3, 7
    461e:	2d c0       	rjmp	.+90     	; 0x467a <vfprintf+0x11c>
    4620:	20 ed       	ldi	r18, 0xD0	; 208
    4622:	28 0f       	add	r18, r24
    4624:	2a 30       	cpi	r18, 0x0A	; 10
    4626:	40 f0       	brcs	.+16     	; 0x4638 <vfprintf+0xda>
    4628:	8e 32       	cpi	r24, 0x2E	; 46
    462a:	b9 f4       	brne	.+46     	; 0x465a <vfprintf+0xfc>
    462c:	36 fc       	sbrc	r3, 6
    462e:	75 c1       	rjmp	.+746    	; 0x491a <vfprintf+0x3bc>
    4630:	23 2d       	mov	r18, r3
    4632:	20 64       	ori	r18, 0x40	; 64
    4634:	32 2e       	mov	r3, r18
    4636:	19 c0       	rjmp	.+50     	; 0x466a <vfprintf+0x10c>
    4638:	36 fe       	sbrs	r3, 6
    463a:	06 c0       	rjmp	.+12     	; 0x4648 <vfprintf+0xea>
    463c:	8a e0       	ldi	r24, 0x0A	; 10
    463e:	98 9e       	mul	r9, r24
    4640:	20 0d       	add	r18, r0
    4642:	11 24       	eor	r1, r1
    4644:	92 2e       	mov	r9, r18
    4646:	11 c0       	rjmp	.+34     	; 0x466a <vfprintf+0x10c>
    4648:	ea e0       	ldi	r30, 0x0A	; 10
    464a:	2e 9e       	mul	r2, r30
    464c:	20 0d       	add	r18, r0
    464e:	11 24       	eor	r1, r1
    4650:	22 2e       	mov	r2, r18
    4652:	f3 2d       	mov	r31, r3
    4654:	f0 62       	ori	r31, 0x20	; 32
    4656:	3f 2e       	mov	r3, r31
    4658:	08 c0       	rjmp	.+16     	; 0x466a <vfprintf+0x10c>
    465a:	8c 36       	cpi	r24, 0x6C	; 108
    465c:	21 f4       	brne	.+8      	; 0x4666 <vfprintf+0x108>
    465e:	83 2d       	mov	r24, r3
    4660:	80 68       	ori	r24, 0x80	; 128
    4662:	38 2e       	mov	r3, r24
    4664:	02 c0       	rjmp	.+4      	; 0x466a <vfprintf+0x10c>
    4666:	88 36       	cpi	r24, 0x68	; 104
    4668:	41 f4       	brne	.+16     	; 0x467a <vfprintf+0x11c>
    466a:	f7 01       	movw	r30, r14
    466c:	93 fd       	sbrc	r25, 3
    466e:	85 91       	lpm	r24, Z+
    4670:	93 ff       	sbrs	r25, 3
    4672:	81 91       	ld	r24, Z+
    4674:	7f 01       	movw	r14, r30
    4676:	81 11       	cpse	r24, r1
    4678:	b3 cf       	rjmp	.-154    	; 0x45e0 <vfprintf+0x82>
    467a:	98 2f       	mov	r25, r24
    467c:	9f 7d       	andi	r25, 0xDF	; 223
    467e:	95 54       	subi	r25, 0x45	; 69
    4680:	93 30       	cpi	r25, 0x03	; 3
    4682:	28 f4       	brcc	.+10     	; 0x468e <vfprintf+0x130>
    4684:	0c 5f       	subi	r16, 0xFC	; 252
    4686:	1f 4f       	sbci	r17, 0xFF	; 255
    4688:	9f e3       	ldi	r25, 0x3F	; 63
    468a:	99 83       	std	Y+1, r25	; 0x01
    468c:	0d c0       	rjmp	.+26     	; 0x46a8 <vfprintf+0x14a>
    468e:	83 36       	cpi	r24, 0x63	; 99
    4690:	31 f0       	breq	.+12     	; 0x469e <vfprintf+0x140>
    4692:	83 37       	cpi	r24, 0x73	; 115
    4694:	71 f0       	breq	.+28     	; 0x46b2 <vfprintf+0x154>
    4696:	83 35       	cpi	r24, 0x53	; 83
    4698:	09 f0       	breq	.+2      	; 0x469c <vfprintf+0x13e>
    469a:	55 c0       	rjmp	.+170    	; 0x4746 <vfprintf+0x1e8>
    469c:	20 c0       	rjmp	.+64     	; 0x46de <vfprintf+0x180>
    469e:	f8 01       	movw	r30, r16
    46a0:	80 81       	ld	r24, Z
    46a2:	89 83       	std	Y+1, r24	; 0x01
    46a4:	0e 5f       	subi	r16, 0xFE	; 254
    46a6:	1f 4f       	sbci	r17, 0xFF	; 255
    46a8:	88 24       	eor	r8, r8
    46aa:	83 94       	inc	r8
    46ac:	91 2c       	mov	r9, r1
    46ae:	53 01       	movw	r10, r6
    46b0:	12 c0       	rjmp	.+36     	; 0x46d6 <vfprintf+0x178>
    46b2:	28 01       	movw	r4, r16
    46b4:	f2 e0       	ldi	r31, 0x02	; 2
    46b6:	4f 0e       	add	r4, r31
    46b8:	51 1c       	adc	r5, r1
    46ba:	f8 01       	movw	r30, r16
    46bc:	a0 80       	ld	r10, Z
    46be:	b1 80       	ldd	r11, Z+1	; 0x01
    46c0:	36 fe       	sbrs	r3, 6
    46c2:	03 c0       	rjmp	.+6      	; 0x46ca <vfprintf+0x16c>
    46c4:	69 2d       	mov	r22, r9
    46c6:	70 e0       	ldi	r23, 0x00	; 0
    46c8:	02 c0       	rjmp	.+4      	; 0x46ce <vfprintf+0x170>
    46ca:	6f ef       	ldi	r22, 0xFF	; 255
    46cc:	7f ef       	ldi	r23, 0xFF	; 255
    46ce:	c5 01       	movw	r24, r10
    46d0:	4e d1       	rcall	.+668    	; 0x496e <strnlen>
    46d2:	4c 01       	movw	r8, r24
    46d4:	82 01       	movw	r16, r4
    46d6:	f3 2d       	mov	r31, r3
    46d8:	ff 77       	andi	r31, 0x7F	; 127
    46da:	3f 2e       	mov	r3, r31
    46dc:	15 c0       	rjmp	.+42     	; 0x4708 <vfprintf+0x1aa>
    46de:	28 01       	movw	r4, r16
    46e0:	22 e0       	ldi	r18, 0x02	; 2
    46e2:	42 0e       	add	r4, r18
    46e4:	51 1c       	adc	r5, r1
    46e6:	f8 01       	movw	r30, r16
    46e8:	a0 80       	ld	r10, Z
    46ea:	b1 80       	ldd	r11, Z+1	; 0x01
    46ec:	36 fe       	sbrs	r3, 6
    46ee:	03 c0       	rjmp	.+6      	; 0x46f6 <vfprintf+0x198>
    46f0:	69 2d       	mov	r22, r9
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	02 c0       	rjmp	.+4      	; 0x46fa <vfprintf+0x19c>
    46f6:	6f ef       	ldi	r22, 0xFF	; 255
    46f8:	7f ef       	ldi	r23, 0xFF	; 255
    46fa:	c5 01       	movw	r24, r10
    46fc:	2d d1       	rcall	.+602    	; 0x4958 <strnlen_P>
    46fe:	4c 01       	movw	r8, r24
    4700:	f3 2d       	mov	r31, r3
    4702:	f0 68       	ori	r31, 0x80	; 128
    4704:	3f 2e       	mov	r3, r31
    4706:	82 01       	movw	r16, r4
    4708:	33 fc       	sbrc	r3, 3
    470a:	19 c0       	rjmp	.+50     	; 0x473e <vfprintf+0x1e0>
    470c:	82 2d       	mov	r24, r2
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	88 16       	cp	r8, r24
    4712:	99 06       	cpc	r9, r25
    4714:	a0 f4       	brcc	.+40     	; 0x473e <vfprintf+0x1e0>
    4716:	b6 01       	movw	r22, r12
    4718:	80 e2       	ldi	r24, 0x20	; 32
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	43 d1       	rcall	.+646    	; 0x49a4 <fputc>
    471e:	2a 94       	dec	r2
    4720:	f5 cf       	rjmp	.-22     	; 0x470c <vfprintf+0x1ae>
    4722:	f5 01       	movw	r30, r10
    4724:	37 fc       	sbrc	r3, 7
    4726:	85 91       	lpm	r24, Z+
    4728:	37 fe       	sbrs	r3, 7
    472a:	81 91       	ld	r24, Z+
    472c:	5f 01       	movw	r10, r30
    472e:	b6 01       	movw	r22, r12
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	38 d1       	rcall	.+624    	; 0x49a4 <fputc>
    4734:	21 10       	cpse	r2, r1
    4736:	2a 94       	dec	r2
    4738:	21 e0       	ldi	r18, 0x01	; 1
    473a:	82 1a       	sub	r8, r18
    473c:	91 08       	sbc	r9, r1
    473e:	81 14       	cp	r8, r1
    4740:	91 04       	cpc	r9, r1
    4742:	79 f7       	brne	.-34     	; 0x4722 <vfprintf+0x1c4>
    4744:	e1 c0       	rjmp	.+450    	; 0x4908 <vfprintf+0x3aa>
    4746:	84 36       	cpi	r24, 0x64	; 100
    4748:	11 f0       	breq	.+4      	; 0x474e <vfprintf+0x1f0>
    474a:	89 36       	cpi	r24, 0x69	; 105
    474c:	39 f5       	brne	.+78     	; 0x479c <vfprintf+0x23e>
    474e:	f8 01       	movw	r30, r16
    4750:	37 fe       	sbrs	r3, 7
    4752:	07 c0       	rjmp	.+14     	; 0x4762 <vfprintf+0x204>
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	0c 5f       	subi	r16, 0xFC	; 252
    475e:	1f 4f       	sbci	r17, 0xFF	; 255
    4760:	08 c0       	rjmp	.+16     	; 0x4772 <vfprintf+0x214>
    4762:	60 81       	ld	r22, Z
    4764:	71 81       	ldd	r23, Z+1	; 0x01
    4766:	07 2e       	mov	r0, r23
    4768:	00 0c       	add	r0, r0
    476a:	88 0b       	sbc	r24, r24
    476c:	99 0b       	sbc	r25, r25
    476e:	0e 5f       	subi	r16, 0xFE	; 254
    4770:	1f 4f       	sbci	r17, 0xFF	; 255
    4772:	f3 2d       	mov	r31, r3
    4774:	ff 76       	andi	r31, 0x6F	; 111
    4776:	3f 2e       	mov	r3, r31
    4778:	97 ff       	sbrs	r25, 7
    477a:	09 c0       	rjmp	.+18     	; 0x478e <vfprintf+0x230>
    477c:	90 95       	com	r25
    477e:	80 95       	com	r24
    4780:	70 95       	com	r23
    4782:	61 95       	neg	r22
    4784:	7f 4f       	sbci	r23, 0xFF	; 255
    4786:	8f 4f       	sbci	r24, 0xFF	; 255
    4788:	9f 4f       	sbci	r25, 0xFF	; 255
    478a:	f0 68       	ori	r31, 0x80	; 128
    478c:	3f 2e       	mov	r3, r31
    478e:	2a e0       	ldi	r18, 0x0A	; 10
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	a3 01       	movw	r20, r6
    4794:	43 d1       	rcall	.+646    	; 0x4a1c <__ultoa_invert>
    4796:	88 2e       	mov	r8, r24
    4798:	86 18       	sub	r8, r6
    479a:	44 c0       	rjmp	.+136    	; 0x4824 <vfprintf+0x2c6>
    479c:	85 37       	cpi	r24, 0x75	; 117
    479e:	31 f4       	brne	.+12     	; 0x47ac <vfprintf+0x24e>
    47a0:	23 2d       	mov	r18, r3
    47a2:	2f 7e       	andi	r18, 0xEF	; 239
    47a4:	b2 2e       	mov	r11, r18
    47a6:	2a e0       	ldi	r18, 0x0A	; 10
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	25 c0       	rjmp	.+74     	; 0x47f6 <vfprintf+0x298>
    47ac:	93 2d       	mov	r25, r3
    47ae:	99 7f       	andi	r25, 0xF9	; 249
    47b0:	b9 2e       	mov	r11, r25
    47b2:	8f 36       	cpi	r24, 0x6F	; 111
    47b4:	c1 f0       	breq	.+48     	; 0x47e6 <vfprintf+0x288>
    47b6:	18 f4       	brcc	.+6      	; 0x47be <vfprintf+0x260>
    47b8:	88 35       	cpi	r24, 0x58	; 88
    47ba:	79 f0       	breq	.+30     	; 0x47da <vfprintf+0x27c>
    47bc:	ae c0       	rjmp	.+348    	; 0x491a <vfprintf+0x3bc>
    47be:	80 37       	cpi	r24, 0x70	; 112
    47c0:	19 f0       	breq	.+6      	; 0x47c8 <vfprintf+0x26a>
    47c2:	88 37       	cpi	r24, 0x78	; 120
    47c4:	21 f0       	breq	.+8      	; 0x47ce <vfprintf+0x270>
    47c6:	a9 c0       	rjmp	.+338    	; 0x491a <vfprintf+0x3bc>
    47c8:	e9 2f       	mov	r30, r25
    47ca:	e0 61       	ori	r30, 0x10	; 16
    47cc:	be 2e       	mov	r11, r30
    47ce:	b4 fe       	sbrs	r11, 4
    47d0:	0d c0       	rjmp	.+26     	; 0x47ec <vfprintf+0x28e>
    47d2:	fb 2d       	mov	r31, r11
    47d4:	f4 60       	ori	r31, 0x04	; 4
    47d6:	bf 2e       	mov	r11, r31
    47d8:	09 c0       	rjmp	.+18     	; 0x47ec <vfprintf+0x28e>
    47da:	34 fe       	sbrs	r3, 4
    47dc:	0a c0       	rjmp	.+20     	; 0x47f2 <vfprintf+0x294>
    47de:	29 2f       	mov	r18, r25
    47e0:	26 60       	ori	r18, 0x06	; 6
    47e2:	b2 2e       	mov	r11, r18
    47e4:	06 c0       	rjmp	.+12     	; 0x47f2 <vfprintf+0x294>
    47e6:	28 e0       	ldi	r18, 0x08	; 8
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	05 c0       	rjmp	.+10     	; 0x47f6 <vfprintf+0x298>
    47ec:	20 e1       	ldi	r18, 0x10	; 16
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	02 c0       	rjmp	.+4      	; 0x47f6 <vfprintf+0x298>
    47f2:	20 e1       	ldi	r18, 0x10	; 16
    47f4:	32 e0       	ldi	r19, 0x02	; 2
    47f6:	f8 01       	movw	r30, r16
    47f8:	b7 fe       	sbrs	r11, 7
    47fa:	07 c0       	rjmp	.+14     	; 0x480a <vfprintf+0x2ac>
    47fc:	60 81       	ld	r22, Z
    47fe:	71 81       	ldd	r23, Z+1	; 0x01
    4800:	82 81       	ldd	r24, Z+2	; 0x02
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	0c 5f       	subi	r16, 0xFC	; 252
    4806:	1f 4f       	sbci	r17, 0xFF	; 255
    4808:	06 c0       	rjmp	.+12     	; 0x4816 <vfprintf+0x2b8>
    480a:	60 81       	ld	r22, Z
    480c:	71 81       	ldd	r23, Z+1	; 0x01
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	0e 5f       	subi	r16, 0xFE	; 254
    4814:	1f 4f       	sbci	r17, 0xFF	; 255
    4816:	a3 01       	movw	r20, r6
    4818:	01 d1       	rcall	.+514    	; 0x4a1c <__ultoa_invert>
    481a:	88 2e       	mov	r8, r24
    481c:	86 18       	sub	r8, r6
    481e:	fb 2d       	mov	r31, r11
    4820:	ff 77       	andi	r31, 0x7F	; 127
    4822:	3f 2e       	mov	r3, r31
    4824:	36 fe       	sbrs	r3, 6
    4826:	0d c0       	rjmp	.+26     	; 0x4842 <vfprintf+0x2e4>
    4828:	23 2d       	mov	r18, r3
    482a:	2e 7f       	andi	r18, 0xFE	; 254
    482c:	a2 2e       	mov	r10, r18
    482e:	89 14       	cp	r8, r9
    4830:	58 f4       	brcc	.+22     	; 0x4848 <vfprintf+0x2ea>
    4832:	34 fe       	sbrs	r3, 4
    4834:	0b c0       	rjmp	.+22     	; 0x484c <vfprintf+0x2ee>
    4836:	32 fc       	sbrc	r3, 2
    4838:	09 c0       	rjmp	.+18     	; 0x484c <vfprintf+0x2ee>
    483a:	83 2d       	mov	r24, r3
    483c:	8e 7e       	andi	r24, 0xEE	; 238
    483e:	a8 2e       	mov	r10, r24
    4840:	05 c0       	rjmp	.+10     	; 0x484c <vfprintf+0x2ee>
    4842:	b8 2c       	mov	r11, r8
    4844:	a3 2c       	mov	r10, r3
    4846:	03 c0       	rjmp	.+6      	; 0x484e <vfprintf+0x2f0>
    4848:	b8 2c       	mov	r11, r8
    484a:	01 c0       	rjmp	.+2      	; 0x484e <vfprintf+0x2f0>
    484c:	b9 2c       	mov	r11, r9
    484e:	a4 fe       	sbrs	r10, 4
    4850:	0f c0       	rjmp	.+30     	; 0x4870 <vfprintf+0x312>
    4852:	fe 01       	movw	r30, r28
    4854:	e8 0d       	add	r30, r8
    4856:	f1 1d       	adc	r31, r1
    4858:	80 81       	ld	r24, Z
    485a:	80 33       	cpi	r24, 0x30	; 48
    485c:	21 f4       	brne	.+8      	; 0x4866 <vfprintf+0x308>
    485e:	9a 2d       	mov	r25, r10
    4860:	99 7e       	andi	r25, 0xE9	; 233
    4862:	a9 2e       	mov	r10, r25
    4864:	09 c0       	rjmp	.+18     	; 0x4878 <vfprintf+0x31a>
    4866:	a2 fe       	sbrs	r10, 2
    4868:	06 c0       	rjmp	.+12     	; 0x4876 <vfprintf+0x318>
    486a:	b3 94       	inc	r11
    486c:	b3 94       	inc	r11
    486e:	04 c0       	rjmp	.+8      	; 0x4878 <vfprintf+0x31a>
    4870:	8a 2d       	mov	r24, r10
    4872:	86 78       	andi	r24, 0x86	; 134
    4874:	09 f0       	breq	.+2      	; 0x4878 <vfprintf+0x31a>
    4876:	b3 94       	inc	r11
    4878:	a3 fc       	sbrc	r10, 3
    487a:	10 c0       	rjmp	.+32     	; 0x489c <vfprintf+0x33e>
    487c:	a0 fe       	sbrs	r10, 0
    487e:	06 c0       	rjmp	.+12     	; 0x488c <vfprintf+0x32e>
    4880:	b2 14       	cp	r11, r2
    4882:	80 f4       	brcc	.+32     	; 0x48a4 <vfprintf+0x346>
    4884:	28 0c       	add	r2, r8
    4886:	92 2c       	mov	r9, r2
    4888:	9b 18       	sub	r9, r11
    488a:	0d c0       	rjmp	.+26     	; 0x48a6 <vfprintf+0x348>
    488c:	b2 14       	cp	r11, r2
    488e:	58 f4       	brcc	.+22     	; 0x48a6 <vfprintf+0x348>
    4890:	b6 01       	movw	r22, r12
    4892:	80 e2       	ldi	r24, 0x20	; 32
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	86 d0       	rcall	.+268    	; 0x49a4 <fputc>
    4898:	b3 94       	inc	r11
    489a:	f8 cf       	rjmp	.-16     	; 0x488c <vfprintf+0x32e>
    489c:	b2 14       	cp	r11, r2
    489e:	18 f4       	brcc	.+6      	; 0x48a6 <vfprintf+0x348>
    48a0:	2b 18       	sub	r2, r11
    48a2:	02 c0       	rjmp	.+4      	; 0x48a8 <vfprintf+0x34a>
    48a4:	98 2c       	mov	r9, r8
    48a6:	21 2c       	mov	r2, r1
    48a8:	a4 fe       	sbrs	r10, 4
    48aa:	0f c0       	rjmp	.+30     	; 0x48ca <vfprintf+0x36c>
    48ac:	b6 01       	movw	r22, r12
    48ae:	80 e3       	ldi	r24, 0x30	; 48
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	78 d0       	rcall	.+240    	; 0x49a4 <fputc>
    48b4:	a2 fe       	sbrs	r10, 2
    48b6:	16 c0       	rjmp	.+44     	; 0x48e4 <vfprintf+0x386>
    48b8:	a1 fc       	sbrc	r10, 1
    48ba:	03 c0       	rjmp	.+6      	; 0x48c2 <vfprintf+0x364>
    48bc:	88 e7       	ldi	r24, 0x78	; 120
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	02 c0       	rjmp	.+4      	; 0x48c6 <vfprintf+0x368>
    48c2:	88 e5       	ldi	r24, 0x58	; 88
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	b6 01       	movw	r22, r12
    48c8:	0c c0       	rjmp	.+24     	; 0x48e2 <vfprintf+0x384>
    48ca:	8a 2d       	mov	r24, r10
    48cc:	86 78       	andi	r24, 0x86	; 134
    48ce:	51 f0       	breq	.+20     	; 0x48e4 <vfprintf+0x386>
    48d0:	a1 fe       	sbrs	r10, 1
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <vfprintf+0x37a>
    48d4:	8b e2       	ldi	r24, 0x2B	; 43
    48d6:	01 c0       	rjmp	.+2      	; 0x48da <vfprintf+0x37c>
    48d8:	80 e2       	ldi	r24, 0x20	; 32
    48da:	a7 fc       	sbrc	r10, 7
    48dc:	8d e2       	ldi	r24, 0x2D	; 45
    48de:	b6 01       	movw	r22, r12
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	60 d0       	rcall	.+192    	; 0x49a4 <fputc>
    48e4:	89 14       	cp	r8, r9
    48e6:	30 f4       	brcc	.+12     	; 0x48f4 <vfprintf+0x396>
    48e8:	b6 01       	movw	r22, r12
    48ea:	80 e3       	ldi	r24, 0x30	; 48
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	5a d0       	rcall	.+180    	; 0x49a4 <fputc>
    48f0:	9a 94       	dec	r9
    48f2:	f8 cf       	rjmp	.-16     	; 0x48e4 <vfprintf+0x386>
    48f4:	8a 94       	dec	r8
    48f6:	f3 01       	movw	r30, r6
    48f8:	e8 0d       	add	r30, r8
    48fa:	f1 1d       	adc	r31, r1
    48fc:	80 81       	ld	r24, Z
    48fe:	b6 01       	movw	r22, r12
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	50 d0       	rcall	.+160    	; 0x49a4 <fputc>
    4904:	81 10       	cpse	r8, r1
    4906:	f6 cf       	rjmp	.-20     	; 0x48f4 <vfprintf+0x396>
    4908:	22 20       	and	r2, r2
    490a:	09 f4       	brne	.+2      	; 0x490e <vfprintf+0x3b0>
    490c:	4e ce       	rjmp	.-868    	; 0x45aa <vfprintf+0x4c>
    490e:	b6 01       	movw	r22, r12
    4910:	80 e2       	ldi	r24, 0x20	; 32
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	47 d0       	rcall	.+142    	; 0x49a4 <fputc>
    4916:	2a 94       	dec	r2
    4918:	f7 cf       	rjmp	.-18     	; 0x4908 <vfprintf+0x3aa>
    491a:	f6 01       	movw	r30, r12
    491c:	86 81       	ldd	r24, Z+6	; 0x06
    491e:	97 81       	ldd	r25, Z+7	; 0x07
    4920:	02 c0       	rjmp	.+4      	; 0x4926 <vfprintf+0x3c8>
    4922:	8f ef       	ldi	r24, 0xFF	; 255
    4924:	9f ef       	ldi	r25, 0xFF	; 255
    4926:	2b 96       	adiw	r28, 0x0b	; 11
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	f8 94       	cli
    492c:	de bf       	out	0x3e, r29	; 62
    492e:	0f be       	out	0x3f, r0	; 63
    4930:	cd bf       	out	0x3d, r28	; 61
    4932:	df 91       	pop	r29
    4934:	cf 91       	pop	r28
    4936:	1f 91       	pop	r17
    4938:	0f 91       	pop	r16
    493a:	ff 90       	pop	r15
    493c:	ef 90       	pop	r14
    493e:	df 90       	pop	r13
    4940:	cf 90       	pop	r12
    4942:	bf 90       	pop	r11
    4944:	af 90       	pop	r10
    4946:	9f 90       	pop	r9
    4948:	8f 90       	pop	r8
    494a:	7f 90       	pop	r7
    494c:	6f 90       	pop	r6
    494e:	5f 90       	pop	r5
    4950:	4f 90       	pop	r4
    4952:	3f 90       	pop	r3
    4954:	2f 90       	pop	r2
    4956:	08 95       	ret

00004958 <strnlen_P>:
    4958:	fc 01       	movw	r30, r24
    495a:	05 90       	lpm	r0, Z+
    495c:	61 50       	subi	r22, 0x01	; 1
    495e:	70 40       	sbci	r23, 0x00	; 0
    4960:	01 10       	cpse	r0, r1
    4962:	d8 f7       	brcc	.-10     	; 0x495a <strnlen_P+0x2>
    4964:	80 95       	com	r24
    4966:	90 95       	com	r25
    4968:	8e 0f       	add	r24, r30
    496a:	9f 1f       	adc	r25, r31
    496c:	08 95       	ret

0000496e <strnlen>:
    496e:	fc 01       	movw	r30, r24
    4970:	61 50       	subi	r22, 0x01	; 1
    4972:	70 40       	sbci	r23, 0x00	; 0
    4974:	01 90       	ld	r0, Z+
    4976:	01 10       	cpse	r0, r1
    4978:	d8 f7       	brcc	.-10     	; 0x4970 <strnlen+0x2>
    497a:	80 95       	com	r24
    497c:	90 95       	com	r25
    497e:	8e 0f       	add	r24, r30
    4980:	9f 1f       	adc	r25, r31
    4982:	08 95       	ret

00004984 <strrev>:
    4984:	dc 01       	movw	r26, r24
    4986:	fc 01       	movw	r30, r24
    4988:	67 2f       	mov	r22, r23
    498a:	71 91       	ld	r23, Z+
    498c:	77 23       	and	r23, r23
    498e:	e1 f7       	brne	.-8      	; 0x4988 <strrev+0x4>
    4990:	32 97       	sbiw	r30, 0x02	; 2
    4992:	04 c0       	rjmp	.+8      	; 0x499c <strrev+0x18>
    4994:	7c 91       	ld	r23, X
    4996:	6d 93       	st	X+, r22
    4998:	70 83       	st	Z, r23
    499a:	62 91       	ld	r22, -Z
    499c:	ae 17       	cp	r26, r30
    499e:	bf 07       	cpc	r27, r31
    49a0:	c8 f3       	brcs	.-14     	; 0x4994 <strrev+0x10>
    49a2:	08 95       	ret

000049a4 <fputc>:
    49a4:	0f 93       	push	r16
    49a6:	1f 93       	push	r17
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	fb 01       	movw	r30, r22
    49ae:	23 81       	ldd	r18, Z+3	; 0x03
    49b0:	21 fd       	sbrc	r18, 1
    49b2:	03 c0       	rjmp	.+6      	; 0x49ba <fputc+0x16>
    49b4:	8f ef       	ldi	r24, 0xFF	; 255
    49b6:	9f ef       	ldi	r25, 0xFF	; 255
    49b8:	2c c0       	rjmp	.+88     	; 0x4a12 <fputc+0x6e>
    49ba:	22 ff       	sbrs	r18, 2
    49bc:	16 c0       	rjmp	.+44     	; 0x49ea <fputc+0x46>
    49be:	46 81       	ldd	r20, Z+6	; 0x06
    49c0:	57 81       	ldd	r21, Z+7	; 0x07
    49c2:	24 81       	ldd	r18, Z+4	; 0x04
    49c4:	35 81       	ldd	r19, Z+5	; 0x05
    49c6:	42 17       	cp	r20, r18
    49c8:	53 07       	cpc	r21, r19
    49ca:	44 f4       	brge	.+16     	; 0x49dc <fputc+0x38>
    49cc:	a0 81       	ld	r26, Z
    49ce:	b1 81       	ldd	r27, Z+1	; 0x01
    49d0:	9d 01       	movw	r18, r26
    49d2:	2f 5f       	subi	r18, 0xFF	; 255
    49d4:	3f 4f       	sbci	r19, 0xFF	; 255
    49d6:	31 83       	std	Z+1, r19	; 0x01
    49d8:	20 83       	st	Z, r18
    49da:	8c 93       	st	X, r24
    49dc:	26 81       	ldd	r18, Z+6	; 0x06
    49de:	37 81       	ldd	r19, Z+7	; 0x07
    49e0:	2f 5f       	subi	r18, 0xFF	; 255
    49e2:	3f 4f       	sbci	r19, 0xFF	; 255
    49e4:	37 83       	std	Z+7, r19	; 0x07
    49e6:	26 83       	std	Z+6, r18	; 0x06
    49e8:	14 c0       	rjmp	.+40     	; 0x4a12 <fputc+0x6e>
    49ea:	8b 01       	movw	r16, r22
    49ec:	ec 01       	movw	r28, r24
    49ee:	fb 01       	movw	r30, r22
    49f0:	00 84       	ldd	r0, Z+8	; 0x08
    49f2:	f1 85       	ldd	r31, Z+9	; 0x09
    49f4:	e0 2d       	mov	r30, r0
    49f6:	19 95       	eicall
    49f8:	89 2b       	or	r24, r25
    49fa:	e1 f6       	brne	.-72     	; 0x49b4 <fputc+0x10>
    49fc:	d8 01       	movw	r26, r16
    49fe:	16 96       	adiw	r26, 0x06	; 6
    4a00:	8d 91       	ld	r24, X+
    4a02:	9c 91       	ld	r25, X
    4a04:	17 97       	sbiw	r26, 0x07	; 7
    4a06:	01 96       	adiw	r24, 0x01	; 1
    4a08:	17 96       	adiw	r26, 0x07	; 7
    4a0a:	9c 93       	st	X, r25
    4a0c:	8e 93       	st	-X, r24
    4a0e:	16 97       	sbiw	r26, 0x06	; 6
    4a10:	ce 01       	movw	r24, r28
    4a12:	df 91       	pop	r29
    4a14:	cf 91       	pop	r28
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	08 95       	ret

00004a1c <__ultoa_invert>:
    4a1c:	fa 01       	movw	r30, r20
    4a1e:	aa 27       	eor	r26, r26
    4a20:	28 30       	cpi	r18, 0x08	; 8
    4a22:	51 f1       	breq	.+84     	; 0x4a78 <__ultoa_invert+0x5c>
    4a24:	20 31       	cpi	r18, 0x10	; 16
    4a26:	81 f1       	breq	.+96     	; 0x4a88 <__ultoa_invert+0x6c>
    4a28:	e8 94       	clt
    4a2a:	6f 93       	push	r22
    4a2c:	6e 7f       	andi	r22, 0xFE	; 254
    4a2e:	6e 5f       	subi	r22, 0xFE	; 254
    4a30:	7f 4f       	sbci	r23, 0xFF	; 255
    4a32:	8f 4f       	sbci	r24, 0xFF	; 255
    4a34:	9f 4f       	sbci	r25, 0xFF	; 255
    4a36:	af 4f       	sbci	r26, 0xFF	; 255
    4a38:	b1 e0       	ldi	r27, 0x01	; 1
    4a3a:	3e d0       	rcall	.+124    	; 0x4ab8 <__ultoa_invert+0x9c>
    4a3c:	b4 e0       	ldi	r27, 0x04	; 4
    4a3e:	3c d0       	rcall	.+120    	; 0x4ab8 <__ultoa_invert+0x9c>
    4a40:	67 0f       	add	r22, r23
    4a42:	78 1f       	adc	r23, r24
    4a44:	89 1f       	adc	r24, r25
    4a46:	9a 1f       	adc	r25, r26
    4a48:	a1 1d       	adc	r26, r1
    4a4a:	68 0f       	add	r22, r24
    4a4c:	79 1f       	adc	r23, r25
    4a4e:	8a 1f       	adc	r24, r26
    4a50:	91 1d       	adc	r25, r1
    4a52:	a1 1d       	adc	r26, r1
    4a54:	6a 0f       	add	r22, r26
    4a56:	71 1d       	adc	r23, r1
    4a58:	81 1d       	adc	r24, r1
    4a5a:	91 1d       	adc	r25, r1
    4a5c:	a1 1d       	adc	r26, r1
    4a5e:	20 d0       	rcall	.+64     	; 0x4aa0 <__ultoa_invert+0x84>
    4a60:	09 f4       	brne	.+2      	; 0x4a64 <__ultoa_invert+0x48>
    4a62:	68 94       	set
    4a64:	3f 91       	pop	r19
    4a66:	2a e0       	ldi	r18, 0x0A	; 10
    4a68:	26 9f       	mul	r18, r22
    4a6a:	11 24       	eor	r1, r1
    4a6c:	30 19       	sub	r19, r0
    4a6e:	30 5d       	subi	r19, 0xD0	; 208
    4a70:	31 93       	st	Z+, r19
    4a72:	de f6       	brtc	.-74     	; 0x4a2a <__ultoa_invert+0xe>
    4a74:	cf 01       	movw	r24, r30
    4a76:	08 95       	ret
    4a78:	46 2f       	mov	r20, r22
    4a7a:	47 70       	andi	r20, 0x07	; 7
    4a7c:	40 5d       	subi	r20, 0xD0	; 208
    4a7e:	41 93       	st	Z+, r20
    4a80:	b3 e0       	ldi	r27, 0x03	; 3
    4a82:	0f d0       	rcall	.+30     	; 0x4aa2 <__ultoa_invert+0x86>
    4a84:	c9 f7       	brne	.-14     	; 0x4a78 <__ultoa_invert+0x5c>
    4a86:	f6 cf       	rjmp	.-20     	; 0x4a74 <__ultoa_invert+0x58>
    4a88:	46 2f       	mov	r20, r22
    4a8a:	4f 70       	andi	r20, 0x0F	; 15
    4a8c:	40 5d       	subi	r20, 0xD0	; 208
    4a8e:	4a 33       	cpi	r20, 0x3A	; 58
    4a90:	18 f0       	brcs	.+6      	; 0x4a98 <__ultoa_invert+0x7c>
    4a92:	49 5d       	subi	r20, 0xD9	; 217
    4a94:	31 fd       	sbrc	r19, 1
    4a96:	40 52       	subi	r20, 0x20	; 32
    4a98:	41 93       	st	Z+, r20
    4a9a:	02 d0       	rcall	.+4      	; 0x4aa0 <__ultoa_invert+0x84>
    4a9c:	a9 f7       	brne	.-22     	; 0x4a88 <__ultoa_invert+0x6c>
    4a9e:	ea cf       	rjmp	.-44     	; 0x4a74 <__ultoa_invert+0x58>
    4aa0:	b4 e0       	ldi	r27, 0x04	; 4
    4aa2:	a6 95       	lsr	r26
    4aa4:	97 95       	ror	r25
    4aa6:	87 95       	ror	r24
    4aa8:	77 95       	ror	r23
    4aaa:	67 95       	ror	r22
    4aac:	ba 95       	dec	r27
    4aae:	c9 f7       	brne	.-14     	; 0x4aa2 <__ultoa_invert+0x86>
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	61 05       	cpc	r22, r1
    4ab4:	71 05       	cpc	r23, r1
    4ab6:	08 95       	ret
    4ab8:	9b 01       	movw	r18, r22
    4aba:	ac 01       	movw	r20, r24
    4abc:	0a 2e       	mov	r0, r26
    4abe:	06 94       	lsr	r0
    4ac0:	57 95       	ror	r21
    4ac2:	47 95       	ror	r20
    4ac4:	37 95       	ror	r19
    4ac6:	27 95       	ror	r18
    4ac8:	ba 95       	dec	r27
    4aca:	c9 f7       	brne	.-14     	; 0x4abe <__ultoa_invert+0xa2>
    4acc:	62 0f       	add	r22, r18
    4ace:	73 1f       	adc	r23, r19
    4ad0:	84 1f       	adc	r24, r20
    4ad2:	95 1f       	adc	r25, r21
    4ad4:	a0 1d       	adc	r26, r0
    4ad6:	08 95       	ret

00004ad8 <_exit>:
    4ad8:	f8 94       	cli

00004ada <__stop_program>:
    4ada:	ff cf       	rjmp	.-2      	; 0x4ada <__stop_program>
