
NS_3944_task_4_lift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fd  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ea  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000451  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b4  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039b  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_16>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	77 01       	movw	r14, r14
  6a:	83 01       	movw	r16, r6
  6c:	86 01       	movw	r16, r12
  6e:	92 01       	movw	r18, r4
  70:	95 01       	movw	r18, r10
  72:	a1 01       	movw	r20, r2
  74:	a4 01       	movw	r20, r8
  76:	b0 01       	movw	r22, r0

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 30       	cpi	r26, 0x08	; 8
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  98:	0c 94 14 02 	jmp	0x428	; 0x428 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <__vector_16>:
*output:none
*logic:detect the overflow
*
*/
ISR(TIMER0_OVF_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	OCR0A = (PWM);
  c2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <PWM>
  c6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <PWM+0x1>
  ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM+0x2>
  ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PWM+0x3>
  d2:	0e 94 b6 01 	call	0x36c	; 0x36c <__fixunssfsi>
  d6:	67 bd       	out	0x27, r22	; 39
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <up>:
*
*/

void up (void)
{
	PWM = 255;
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	af e7       	ldi	r26, 0x7F	; 127
 100:	b3 e4       	ldi	r27, 0x43	; 67
 102:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PWM>
 106:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PWM+0x1>
 10a:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <PWM+0x2>
 10e:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <PWM+0x3>
	PORTC = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	31 e2       	ldi	r19, 0x21	; 33
 11a:	91 ea       	ldi	r25, 0xA1	; 161
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <up+0x22>
 124:	00 c0       	rjmp	.+0      	; 0x126 <up+0x2c>
 126:	00 00       	nop
	_delay_ms(3300);
	PWM = 00;
	PORTC = 0x00;
 128:	18 b8       	out	0x08, r1	; 8
	PWM = 100;
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	68 ec       	ldi	r22, 0xC8	; 200
 130:	72 e4       	ldi	r23, 0x42	; 66
 132:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <PWM>
 136:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <PWM+0x1>
 13a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <PWM+0x2>
 13e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <PWM+0x3>
	PORTC = 0x01;
 142:	88 b9       	out	0x08, r24	; 8
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	30 e7       	ldi	r19, 0x70	; 112
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	30 40       	sbci	r19, 0x00	; 0
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <up+0x50>
 152:	00 c0       	rjmp	.+0      	; 0x154 <up+0x5a>
 154:	00 00       	nop
	_delay_ms(50);
	PWM = 00;
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PWM>
 15a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <PWM+0x1>
 15e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <PWM+0x2>
 162:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <PWM+0x3>
	PORTC = 0x00;
 166:	18 b8       	out	0x08, r1	; 8
 168:	08 95       	ret

0000016a <down>:
*logic:rotate the motor in clockwise direction
*
*/
void down(void)
{
	PWM = 125;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	aa ef       	ldi	r26, 0xFA	; 250
 170:	b2 e4       	ldi	r27, 0x42	; 66
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PWM>
 176:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PWM+0x1>
 17a:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <PWM+0x2>
 17e:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <PWM+0x3>
	PORTC = 0x02;
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	88 b9       	out	0x08, r24	; 8
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	80 ea       	ldi	r24, 0xA0	; 160
 18a:	97 e7       	ldi	r25, 0x77	; 119
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <down+0x22>
 194:	00 c0       	rjmp	.+0      	; 0x196 <down+0x2c>
 196:	00 00       	nop
	_delay_ms(2450);
	PWM = 00;
 198:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PWM>
 19c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <PWM+0x1>
 1a0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <PWM+0x2>
 1a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <PWM+0x3>
	PORTC = 0x00;
 1a8:	18 b8       	out	0x08, r1	; 8
 1aa:	08 95       	ret

000001ac <stop>:
*logic:stop the rotation of motor
*
*/
void stop (void)
{
	PWM = 00;
 1ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PWM>
 1b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <PWM+0x1>
 1b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <PWM+0x2>
 1b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <PWM+0x3>
	PORTC = 0x00;
 1bc:	18 b8       	out	0x08, r1	; 8
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	83 ed       	ldi	r24, 0xD3	; 211
 1c2:	90 e3       	ldi	r25, 0x30	; 48
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <stop+0x18>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <stop+0x22>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <reverse>:
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	81 e1       	ldi	r24, 0x11	; 17
 1d6:	9a e7       	ldi	r25, 0x7A	; 122
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <reverse+0x6>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <reverse+0x10>
 1e2:	00 00       	nop
*
*/
void reverse(void)
{
	_delay_ms(2500);
	PWM = 50;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	a8 e4       	ldi	r26, 0x48	; 72
 1ea:	b2 e4       	ldi	r27, 0x42	; 66
 1ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PWM>
 1f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PWM+0x1>
 1f4:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <PWM+0x2>
 1f8:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <PWM+0x3>
	PORTC = 0x02;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	88 b9       	out	0x08, r24	; 8
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	87 e8       	ldi	r24, 0x87	; 135
 204:	93 e1       	ldi	r25, 0x13	; 19
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <reverse+0x34>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <reverse+0x3e>
 210:	00 00       	nop
	_delay_ms(400);
	PWM = 03;
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	a0 e4       	ldi	r26, 0x40	; 64
 218:	b0 e4       	ldi	r27, 0x40	; 64
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PWM>
 21e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PWM+0x1>
 222:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <PWM+0x2>
 226:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <PWM+0x3>
	PORTC = 0x00;
 22a:	18 b8       	out	0x08, r1	; 8
 22c:	08 95       	ret

0000022e <main>:
}

int main(void)
 
{	
	DDRD = 0x40;//SET  PWM PIN D8 AS OUT PUT PIN
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 232:	1b b8       	out	0x0b, r1	; 11
	
	DDRC = 0XFF;//SET A IN1=A0 7 IN2=A1 PIN AS OUT PUT PIN
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	87 b9       	out	0x07, r24	; 7
	PORTC =0X00;
 238:	18 b8       	out	0x08, r1	; 8
	
	DDRB = 0X00;//SET A PIN B4 AS OUTPUT PIN & CONNECT IR OUTPUT
 23a:	14 b8       	out	0x04, r1	; 4
	PORTB= 0XFF;
 23c:	85 b9       	out	0x05, r24	; 5
	
	TCCR0A = 0x83;
 23e:	83 e8       	ldi	r24, 0x83	; 131
 240:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 0x01;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = (PWM);
 248:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <PWM>
 24c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <PWM+0x1>
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM+0x2>
 254:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PWM+0x3>
 258:	0e 94 b6 01 	call	0x36c	; 0x36c <__fixunssfsi>
 25c:	67 bd       	out	0x27, r22	; 39
	sei();
 25e:	78 94       	sei
	TCCR0B = 0x05;
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	85 bd       	out	0x25, r24	; 37
	
    while(1)
    {

    ir = (PINB & 0X01); //READ THE VALU OF IR
 264:	83 b1       	in	r24, 0x03	; 3
 266:	80 fb       	bst	r24, 0
 268:	ee 24       	eor	r14, r14
 26a:	e0 f8       	bld	r14, 0
 26c:	f1 2c       	mov	r15, r1
 26e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <ir+0x1>
 272:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <ir>
    if((ir)== 1)
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	e2 16       	cp	r14, r18
 27a:	f1 04       	cpc	r15, r1
 27c:	a9 f4       	brne	.+42     	; 0x2a8 <main+0x7a>
    {
	    
	    count++; //INCRECEMENT THE COUNT
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 282:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 28c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	    
	    while (ir == 1)
	    {
		    ir = (PINB & 0X01);
 290:	83 b1       	in	r24, 0x03	; 3
 292:	08 2f       	mov	r16, r24
 294:	01 70       	andi	r16, 0x01	; 1
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <ir+0x1>
 29c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <ir>
    {
	    
	    count++; //INCRECEMENT THE COUNT

	    
	    while (ir == 1)
 2a0:	01 30       	cpi	r16, 0x01	; 1
 2a2:	11 05       	cpc	r17, r1
 2a4:	a9 f3       	breq	.-22     	; 0x290 <main+0x62>
 2a6:	16 c0       	rjmp	.+44     	; 0x2d4 <main+0xa6>
	    }
    }
    else
    {
	    
	    count++;
 2a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	   
	    while (ir == 0)
 2ba:	ef 28       	or	r14, r15
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <main+0xa6>
	    {
		    ir = (PINB & 0X01);
 2be:	83 b1       	in	r24, 0x03	; 3
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	c8 2f       	mov	r28, r24
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	d8 2f       	mov	r29, r24
 2c8:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <ir+0x1>
 2cc:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <ir>
    else
    {
	    
	    count++;
	   
	    while (ir == 0)
 2d0:	cd 2b       	or	r28, r29
 2d2:	a9 f3       	breq	.-22     	; 0x2be <main+0x90>
	
	
	/*************CHECK THE COUNT & BRING THE LIFT AT UPWARD & DOWNWORD***************/
	
	
 switch(count)
 2d4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 2d8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	e8 30       	cpi	r30, 0x08	; 8
 2e0:	f1 05       	cpc	r31, r1
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <main+0xb8>
 2e4:	40 c0       	rjmp	.+128    	; 0x366 <main+0x138>
 2e6:	ec 5c       	subi	r30, 0xCC	; 204
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__tablejump2__>
 2ee:	9f ef       	ldi	r25, 0xFF	; 255
 2f0:	23 ed       	ldi	r18, 0xD3	; 211
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	91 50       	subi	r25, 0x01	; 1
 2f6:	20 40       	sbci	r18, 0x00	; 0
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0xc6>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0xd0>
 2fe:	00 00       	nop
 
		{
			
			case 1:
					_delay_ms(1000);
			       up();
 300:	0e 94 7d 00 	call	0xfa	; 0xfa <up>
		           break;
 304:	af cf       	rjmp	.-162    	; 0x264 <main+0x36>

			case 2:
			       reverse();
 306:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <reverse>
			       break;
 30a:	ac cf       	rjmp	.-168    	; 0x264 <main+0x36>
 30c:	9f ef       	ldi	r25, 0xFF	; 255
 30e:	23 ed       	ldi	r18, 0xD3	; 211
 310:	80 e3       	ldi	r24, 0x30	; 48
 312:	91 50       	subi	r25, 0x01	; 1
 314:	20 40       	sbci	r18, 0x00	; 0
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <main+0xe4>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0xee>
 31c:	00 00       	nop

			case 3:
				  _delay_ms(1000);
			      down();
 31e:	0e 94 b5 00 	call	0x16a	; 0x16a <down>
			      break;
 322:	a0 cf       	rjmp	.-192    	; 0x264 <main+0x36>

			case 4:
			       stop();
 324:	0e 94 d6 00 	call	0x1ac	; 0x1ac <stop>
			       break;
 328:	9d cf       	rjmp	.-198    	; 0x264 <main+0x36>
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	23 ed       	ldi	r18, 0xD3	; 211
 32e:	80 e3       	ldi	r24, 0x30	; 48
 330:	91 50       	subi	r25, 0x01	; 1
 332:	20 40       	sbci	r18, 0x00	; 0
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x102>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x10c>
 33a:	00 00       	nop
				   
				
				case 5:
				_delay_ms(1000);
				up();
 33c:	0e 94 7d 00 	call	0xfa	; 0xfa <up>
				break;
 340:	91 cf       	rjmp	.-222    	; 0x264 <main+0x36>

				case 6:
				reverse();
 342:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <reverse>
				break;
 346:	8e cf       	rjmp	.-228    	; 0x264 <main+0x36>
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	23 ed       	ldi	r18, 0xD3	; 211
 34c:	80 e3       	ldi	r24, 0x30	; 48
 34e:	91 50       	subi	r25, 0x01	; 1
 350:	20 40       	sbci	r18, 0x00	; 0
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0x120>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x12a>
 358:	00 00       	nop

				case 7:
				_delay_ms(1000);
				down();
 35a:	0e 94 b5 00 	call	0x16a	; 0x16a <down>
				break;
 35e:	82 cf       	rjmp	.-252    	; 0x264 <main+0x36>

				case 8:
				stop();
 360:	0e 94 d6 00 	call	0x1ac	; 0x1ac <stop>
				break;	   
 364:	7f cf       	rjmp	.-258    	; 0x264 <main+0x36>
			
			default:
		           stop();
 366:	0e 94 d6 00 	call	0x1ac	; 0x1ac <stop>
			       break;
 36a:	7c cf       	rjmp	.-264    	; 0x264 <main+0x36>

0000036c <__fixunssfsi>:
 36c:	0e 94 ed 01 	call	0x3da	; 0x3da <__fp_splitA>
 370:	88 f0       	brcs	.+34     	; 0x394 <__fixunssfsi+0x28>
 372:	9f 57       	subi	r25, 0x7F	; 127
 374:	98 f0       	brcs	.+38     	; 0x39c <__fixunssfsi+0x30>
 376:	b9 2f       	mov	r27, r25
 378:	99 27       	eor	r25, r25
 37a:	b7 51       	subi	r27, 0x17	; 23
 37c:	b0 f0       	brcs	.+44     	; 0x3aa <__fixunssfsi+0x3e>
 37e:	e1 f0       	breq	.+56     	; 0x3b8 <__fixunssfsi+0x4c>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	1a f0       	brmi	.+6      	; 0x390 <__fixunssfsi+0x24>
 38a:	ba 95       	dec	r27
 38c:	c9 f7       	brne	.-14     	; 0x380 <__fixunssfsi+0x14>
 38e:	14 c0       	rjmp	.+40     	; 0x3b8 <__fixunssfsi+0x4c>
 390:	b1 30       	cpi	r27, 0x01	; 1
 392:	91 f0       	breq	.+36     	; 0x3b8 <__fixunssfsi+0x4c>
 394:	0e 94 07 02 	call	0x40e	; 0x40e <__fp_zero>
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	08 95       	ret
 39c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_zero>
 3a0:	67 2f       	mov	r22, r23
 3a2:	78 2f       	mov	r23, r24
 3a4:	88 27       	eor	r24, r24
 3a6:	b8 5f       	subi	r27, 0xF8	; 248
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <__fixunssfsi+0x4c>
 3aa:	b9 3f       	cpi	r27, 0xF9	; 249
 3ac:	cc f3       	brlt	.-14     	; 0x3a0 <__fixunssfsi+0x34>
 3ae:	86 95       	lsr	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b3 95       	inc	r27
 3b6:	d9 f7       	brne	.-10     	; 0x3ae <__fixunssfsi+0x42>
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__fixunssfsi+0x5c>
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__fp_split3>:
 3ca:	57 fd       	sbrc	r21, 7
 3cc:	90 58       	subi	r25, 0x80	; 128
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	59 f0       	breq	.+22     	; 0x3ea <__fp_splitA+0x10>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <__fp_splitA+0x1a>
 3d8:	47 95       	ror	r20

000003da <__fp_splitA>:
 3da:	88 0f       	add	r24, r24
 3dc:	97 fb       	bst	r25, 7
 3de:	99 1f       	adc	r25, r25
 3e0:	61 f0       	breq	.+24     	; 0x3fa <__fp_splitA+0x20>
 3e2:	9f 3f       	cpi	r25, 0xFF	; 255
 3e4:	79 f0       	breq	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e6:	87 95       	ror	r24
 3e8:	08 95       	ret
 3ea:	12 16       	cp	r1, r18
 3ec:	13 06       	cpc	r1, r19
 3ee:	14 06       	cpc	r1, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <__fp_split3+0xe>
 3f4:	46 95       	lsr	r20
 3f6:	f1 df       	rcall	.-30     	; 0x3da <__fp_splitA>
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fa:	16 16       	cp	r1, r22
 3fc:	17 06       	cpc	r1, r23
 3fe:	18 06       	cpc	r1, r24
 400:	99 1f       	adc	r25, r25
 402:	f1 cf       	rjmp	.-30     	; 0x3e6 <__fp_splitA+0xc>
 404:	86 95       	lsr	r24
 406:	71 05       	cpc	r23, r1
 408:	61 05       	cpc	r22, r1
 40a:	08 94       	sec
 40c:	08 95       	ret

0000040e <__fp_zero>:
 40e:	e8 94       	clt

00000410 <__fp_szero>:
 410:	bb 27       	eor	r27, r27
 412:	66 27       	eor	r22, r22
 414:	77 27       	eor	r23, r23
 416:	cb 01       	movw	r24, r22
 418:	97 f9       	bld	r25, 7
 41a:	08 95       	ret

0000041c <__tablejump2__>:
 41c:	ee 0f       	add	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	05 90       	lpm	r0, Z+
 422:	f4 91       	lpm	r31, Z
 424:	e0 2d       	mov	r30, r0
 426:	09 94       	ijmp

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
